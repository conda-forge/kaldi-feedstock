From 87e00a03c6cdd0e07a21893d60c49305c4bca321 Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Sun, 17 Apr 2022 08:47:02 -0700
Subject: [PATCH 1/2] Update cmake

---
 CMakeLists.txt                                | 27 ++++++++++++-------
 cmake/gen_cmake_skeleton.py                   |  8 +++---
 cmake/third_party/openfst.cmake               |  1 +
 ...hed-threaded-nnet3-cuda-online-pipeline.cc | 17 ++++++++++++
 4 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ff24df434..bd2b3d471 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -87,7 +87,7 @@ if(CONDA_ROOT)
     # https://github.com/kaldi-asr/kaldi/blob/master/src/matrix/kaldi-blas.h#L95-L113
     add_definitions(-DHAVE_OPENBLAS=1)
     if(MSVC)
-        include_directories($ENV{LIBRARY_INC}/)
+        link_libraries(cblas lapack)
         # necessary macros to compile on windows, from here:
         # https://icl.cs.utk.edu/lapack-for-windows/lapack/
         add_definitions(-DADD_)
@@ -147,6 +147,17 @@ if(MSVC)
     add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
 
     set(CUDA_USE_STATIC_CUDA_RUNTIME OFF CACHE INTERNAL "")
+    set(CompilerFlags
+        CMAKE_CXX_FLAGS
+        CMAKE_CXX_FLAGS_DEBUG
+        CMAKE_CXX_FLAGS_RELEASE
+        CMAKE_C_FLAGS
+        CMAKE_C_FLAGS_DEBUG
+        CMAKE_C_FLAGS_RELEASE
+        )
+foreach(CompilerFlag ${CompilerFlags})
+  string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
+endforeach()
     if(NOT DEFINED ENV{CUDAHOSTCXX})
         set(ENV{CUDAHOSTCXX} ${CMAKE_CXX_COMPILER})
     endif()
@@ -159,23 +170,21 @@ find_package(CUDAToolkit)
 find_package(CUDA)
 if(CUDA_FOUND)
     set(CUDA_PROPAGATE_HOST_FLAGS ON)
-    set(KALDI_CUDA_NVCC_FLAGS "--default-stream=per-thread;-std=c++${CMAKE_CXX_STANDARD}")
     if(MSVC)
+        set(KALDI_CUDA_NVCC_FLAGS "--default-stream=per-thread")
         list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler /permissive-,/FS,/wd4819,/EHsc,/bigobj")
         list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler /wd4018,/wd4244,/wd4267,/wd4291,/wd4305")
-        if(BUILD_SHARED_LIBS)
-            list(APPEND CUDA_NVCC_FLAGS_RELEASE -Xcompiler /MD)
-            list(APPEND CUDA_NVCC_FLAGS_DEBUG -Xcompiler /MDd)
-        endif()
+        list(APPEND CUDA_NVCC_FLAGS_RELEASE -Xcompiler /MD)
+        list(APPEND CUDA_NVCC_FLAGS_DEBUG -Xcompiler /MDd)
     else()
-    #     list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler -std=c++${CMAKE_CXX_STANDARD}")
+        set(KALDI_CUDA_NVCC_FLAGS "--default-stream=per-thread;-std=c++${CMAKE_CXX_STANDARD}")
         list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler -fPIC")
     endif()
     set(CUDA_NVCC_FLAGS ${KALDI_CUDA_NVCC_FLAGS} ${CUDA_NVCC_FLAGS})
 
     add_definitions(-DHAVE_CUDA=1)
     add_definitions(-DCUDA_API_PER_THREAD_DEFAULT_STREAM=1)
-    include_directories(${CUDA_INCLUDE_DIRS})
+    #include_directories(${CUDA_INCLUDE_DIRS})
     link_libraries(
         ${CUDA_LIBRARIES}
         ${CUDA_CUDA_LIBRARY}
@@ -244,8 +253,8 @@ add_subdirectory(src/chain)
 add_subdirectory(src/ivector)
 if(NOT MSVC)
     add_subdirectory(src/online)
-    add_subdirectory(src/online2)
 endif()
+add_subdirectory(src/online2)
 add_subdirectory(src/kws)
 
 add_subdirectory(src/itf)
diff --git a/cmake/gen_cmake_skeleton.py b/cmake/gen_cmake_skeleton.py
index 8056786bd..f2de074fd 100644
--- a/cmake/gen_cmake_skeleton.py
+++ b/cmake/gen_cmake_skeleton.py
@@ -92,7 +92,7 @@ def get_exe_additional_depends(t):
         "gmm-decode-*": ["decoder"],
         "gmm-align": ["decoder"],
         "gmm-align-compiled": ["decoder"],
-        "gmm-est-fmllr-gpost": ["sgmm2", "hmm"],
+        "gmm-est-fmllr-gpost": ["hmm"],
         "gmm-rescore-lattice": ["hmm", "lat"],
 
         # solve fgmmbin
@@ -194,7 +194,7 @@ class CMakeListsHeaderLibrary(object):
         ret.append("""
 install(TARGETS {tgt} EXPORT kaldi-targets)
 
-install(FILES ${{PUBLIC_HEADERS}} DESTINATION include/kaldi/{dir})
+install(FILES ${{PUBLIC_HEADERS}} DESTINATION include/kaldi/{dir} COMPONENT kaldi)
 """.format(tgt=self.target_name, dir=self.dir_name))
 
         return "\n".join(ret)
@@ -249,7 +249,7 @@ class CMakeListsLibrary(object):
             self.source_list.append("${CUDA_OBJS}")
             ret.append("if(CUDA_FOUND)")
             ret.append("    cuda_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)")
-            ret.append("    cuda_compile(CUDA_OBJS")
+            ret.append("    cuda_compile(CUDA_OBJS SHARED")
             for f in self.cuda_source_list:
                 ret.append("        " + f)
             ret.append("    )")
@@ -296,7 +296,7 @@ install(TARGETS {tgt}
     LIBRARY DESTINATION ${{CMAKE_INSTALL_LIBDIR}} COMPONENT kaldi
     RUNTIME DESTINATION ${{CMAKE_INSTALL_BINDIR}} COMPONENT kaldi
 )
-install(FILES ${{PUBLIC_HEADERS}} DESTINATION include/kaldi/{dir})
+install(FILES ${{PUBLIC_HEADERS}} DESTINATION include/kaldi/{dir} COMPONENT kaldi)
 """.format(tgt=self.target_name, dir=self.dir_name))
 
         return "\n".join(ret)
diff --git a/cmake/third_party/openfst.cmake b/cmake/third_party/openfst.cmake
index 26d25baef..ccd2cd726 100644
--- a/cmake/third_party/openfst.cmake
+++ b/cmake/third_party/openfst.cmake
@@ -54,6 +54,7 @@ if(NOT openfst_POPULATED)
             )
 
             install(DIRECTORY ${openfst_SOURCE_DIR}/src/include/ DESTINATION include/
+            COMPONENT kaldi
                     FILES_MATCHING PATTERN "*.h")
 
             install(TARGETS fst
diff --git a/src/cudadecoder/batched-threaded-nnet3-cuda-online-pipeline.cc b/src/cudadecoder/batched-threaded-nnet3-cuda-online-pipeline.cc
index 65e2f152e..d44ad273d 100644
--- a/src/cudadecoder/batched-threaded-nnet3-cuda-online-pipeline.cc
+++ b/src/cudadecoder/batched-threaded-nnet3-cuda-online-pipeline.cc
@@ -32,6 +32,23 @@
 #include "lat/lattice-functions.h"
 #include "nnet3/nnet-utils.h"
 
+#ifdef _WIN32
+  #include <windows.h>
+
+  void usleep(__int64 usec)
+  {
+      HANDLE timer;
+      LARGE_INTEGER ft;
+
+      ft.QuadPart = -(10*usec); // Convert to 100 nanosecond interval, negative value indicates relative time
+
+      timer = CreateWaitableTimer(NULL, TRUE, NULL);
+      SetWaitableTimer(timer, &ft, 0, NULL, NULL, 0);
+      WaitForSingleObject(timer, INFINITE);
+      CloseHandle(timer);
+  }
+#endif
+
 namespace kaldi {
 namespace cuda_decoder {
 
-- 
2.35.3.windows.1

