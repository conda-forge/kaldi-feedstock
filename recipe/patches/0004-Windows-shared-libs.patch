diff --git a/cmake/gen_cmake_skeleton.py b/cmake/gen_cmake_skeleton.py
index c8fee4c..0058ddb 100644
--- a/cmake/gen_cmake_skeleton.py
+++ b/cmake/gen_cmake_skeleton.py
@@ -154,6 +154,7 @@ def disable_for_win32(t):
         "online-audio-client",
         "online-net-client",
         "online2-tcp-nnet3-decode-faster",
+        "online2-tcp-nnet3-decode-faster-emscripten",
         "online-server-gmm-decode-faster",
         "online-audio-server-decode-faster"
     ]
@@ -266,6 +267,10 @@ class CMakeListsLibrary(object):
         ret.append("     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>")
         ret.append("     $<INSTALL_INTERFACE:include/kaldi>")
         ret.append(")\n")
+        
+        ret.append("if(MSVC)")
+        ret.append("    target_compile_definitions(" + self.target_name + " PRIVATE " + self.target_name.replace('-', '_') + "_EXPORTS)")
+        ret.append("endif(MSVC)\n")
 
         if len(self.depends) > 0:
             ret.append("target_link_libraries(" + self.target_name + " PUBLIC")
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 886af19..d779cd4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,7 +22,6 @@ endif()
 
 include(third_party/get_third_party)
 
-include(cmake/third_party/openfst.cmake)
 
 find_package(PythonInterp)
 if(NOT PYTHON_EXECUTABLE)
@@ -43,14 +42,20 @@ execute_process(COMMAND ${PYTHON_EXECUTABLE}
 )
 unset(IS_LIB_SHARE)
 
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_INSTALL_MESSAGE LAZY) # hide "-- Up-to-date: ..."
 if(BUILD_SHARED_LIBS)
     set(CMAKE_POSITION_INDEPENDENT_CODE ON)
-    if(WIN32)
+    if(MSVC)
+        find_package(dlfcn-win32 REQUIRED)
+        set(CMAKE_DL_LIBS dlfcn-win32::dl)
         set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
-        message(FATAL_ERROR "DLL is not supported currently")
+        add_definitions(-DWIN32_LEAN_AND_MEAN)
+        add_definitions(-DNOMINMAX)
+        add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+        add_definitions(-D_USE_MATH_DEFINES)
+        #message(FATAL_ERROR "DLL is not supported currently")
     elseif(APPLE)
         set(CMAKE_INSTALL_RPATH "@loader_path")
     else()
@@ -181,6 +186,8 @@ if(CUDA_FOUND)
         list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler -fPIC")
         set(KALDI_CUDA_NVCC_FLAGS "--default-stream=per-thread;-std=c++${CMAKE_CXX_STANDARD}")
     endif()
+    set(CMAKE_CUDA_STANDARD 17)
+    set(CMAKE_CUDA_STANDARD_REQUIRED TRUE)
     set(CUDA_NVCC_FLAGS ${KALDI_CUDA_NVCC_FLAGS} ${CUDA_NVCC_FLAGS})
 
     add_definitions(-DHAVE_CUDA=1)
@@ -285,8 +292,8 @@ add_subdirectory(src/chainbin)
 add_subdirectory(src/ivectorbin)
 if(NOT MSVC)
     add_subdirectory(src/onlinebin)
-    add_subdirectory(src/online2bin)
 endif()
+add_subdirectory(src/online2bin)
 add_subdirectory(src/kwsbin)
 
 # add all cuda executables
diff --git a/egs/librispeech/s5/fairseq_ltlm/kaldi_utils/latgen-faster-mapped-fake-am.cc b/egs/librispeech/s5/fairseq_ltlm/kaldi_utils/latgen-faster-mapped-fake-am.cc
index 30a7b6f..99e5b44 100644
--- a/egs/librispeech/s5/fairseq_ltlm/kaldi_utils/latgen-faster-mapped-fake-am.cc
+++ b/egs/librispeech/s5/fairseq_ltlm/kaldi_utils/latgen-faster-mapped-fake-am.cc
@@ -28,7 +28,6 @@
 #include "util/common-utils.h"
 
 using namespace kaldi;
-typedef kaldi::int32 int32;
 using fst::Fst;
 using fst::StdArc;
 using fst::SymbolTable;
@@ -93,7 +92,7 @@ int main(int argc, char *argv[]) {
                   << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     // Reading Fake acoustic model form ark file
diff --git a/src/base/kaldi-error.h b/src/base/kaldi-error.h
index a9904a7..42adad4 100644
--- a/src/base/kaldi-error.h
+++ b/src/base/kaldi-error.h
@@ -33,6 +33,7 @@
 
 #include "base/kaldi-types.h"
 #include "base/kaldi-utils.h"
+#include "base/kaldi_base_Export.h"
 /* Important that this file does not depend on any other kaldi headers. */
 
 #ifdef _MSC_VER
@@ -54,7 +55,7 @@ void SetProgramName(const char *basename);
 
 /// This is set by util/parse-options.{h,cc} if you set --verbose=? option.
 /// Do not use directly, prefer {Get,Set}VerboseLevel().
-extern int32 g_kaldi_verbose_level;
+extern int32 kaldi_base_EXPORT g_kaldi_verbose_level;
 
 /// Get verbosity level, usually set via command line '--verbose=' switch.
 inline int32 GetVerboseLevel() { return g_kaldi_verbose_level; }
diff --git a/src/base/kaldi_base_Export.h b/src/base/kaldi_base_Export.h
new file mode 100644
index 0000000..d1b43dd
--- /dev/null
+++ b/src/base/kaldi_base_Export.h
@@ -0,0 +1,46 @@
+
+#ifndef kaldi_base_EXPORT_H
+#define kaldi_base_EXPORT_H
+
+#ifdef kaldi_base_BUILT_AS_STATIC
+#  define kaldi_base_EXPORT
+#  define KALDI_base_NO_EXPORT
+#else
+#ifdef _WIN32
+#  ifndef kaldi_base_EXPORT
+#    ifdef kaldi_base_EXPORTS
+        /* We are building this library */
+#      define kaldi_base_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define kaldi_base_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef KALDI_BASE_NO_EXPORT
+#    define KALDI_BASE_NO_EXPORT 
+#  endif
+#else
+        #define kaldi_base_EXPORT
+#endif // _WIN32
+#endif
+
+#ifndef KALDI_BASE_DEPRECATED
+#  define KALDI_BASE_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef KALDI_BASE_DEPRECATED_EXPORT
+#  define KALDI_BASE_DEPRECATED_EXPORT kaldi_base_EXPORT KALDI_BASE_DEPRECATED
+#endif
+
+#ifndef KALDI_BASE_DEPRECATED_NO_EXPORT
+#  define KALDI_BASE_DEPRECATED_NO_EXPORT KALDI_BASE_NO_EXPORT KALDI_BASE_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef KALDI_BASE_NO_DEPRECATED
+#    define KALDI_BASE_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* kaldi_base_EXPORT_H */
diff --git a/src/bin/acc-lda.cc b/src/bin/acc-lda.cc
index b664135..7c44dc4 100644
--- a/src/bin/acc-lda.cc
+++ b/src/bin/acc-lda.cc
@@ -31,7 +31,6 @@ the current transformation), the un-transformed features and state
 posterior probabilities */
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Accumulate LDA statistics based on pdf-ids.\n"
diff --git a/src/bin/acc-tree-stats.cc b/src/bin/acc-tree-stats.cc
index 8b9ce90..9807369 100644
--- a/src/bin/acc-tree-stats.cc
+++ b/src/bin/acc-tree-stats.cc
@@ -33,7 +33,6 @@ identify the contexts.Transition model is used as an input to identify
 the PDF's and the phones.  */
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Accumulate statistics for phonetic-context tree building.\n"
diff --git a/src/bin/add-self-loops.cc b/src/bin/add-self-loops.cc
index b223dfe..04f9079 100644
--- a/src/bin/add-self-loops.cc
+++ b/src/bin/add-self-loops.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/ali-to-pdf.cc b/src/bin/ali-to-pdf.cc
index 61b5138..85e203a 100644
--- a/src/bin/ali-to-pdf.cc
+++ b/src/bin/ali-to-pdf.cc
@@ -28,7 +28,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Converts alignments (containing transition-ids) to pdf-ids, zero-based.\n"
diff --git a/src/bin/ali-to-phones.cc b/src/bin/ali-to-phones.cc
index 602e32e..1193c58 100644
--- a/src/bin/ali-to-phones.cc
+++ b/src/bin/ali-to-phones.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Convert model-level alignments to phone-sequences (in integer, "
diff --git a/src/bin/ali-to-post.cc b/src/bin/ali-to-post.cc
index 833c8d7..3f30741 100644
--- a/src/bin/ali-to-post.cc
+++ b/src/bin/ali-to-post.cc
@@ -30,7 +30,6 @@
     symbol gets a weight of 1.0 */
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Convert alignments to posteriors.  This is simply a format change\n"
diff --git a/src/bin/align-compiled-mapped.cc b/src/bin/align-compiled-mapped.cc
index 98ffebd..e65b007 100644
--- a/src/bin/align-compiled-mapped.cc
+++ b/src/bin/align-compiled-mapped.cc
@@ -31,7 +31,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -84,7 +83,7 @@ int main(int argc, char *argv[]) {
 
     int num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     
     for (; !loglikes_reader.Done(); loglikes_reader.Next()) {
       std::string utt = loglikes_reader.Key();
diff --git a/src/bin/align-equal-compiled.cc b/src/bin/align-equal-compiled.cc
index 55f3927..a231d4f 100644
--- a/src/bin/align-equal-compiled.cc
+++ b/src/bin/align-equal-compiled.cc
@@ -31,7 +31,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/align-equal.cc b/src/bin/align-equal.cc
index a3bc40d..97bead4 100644
--- a/src/bin/align-equal.cc
+++ b/src/bin/align-equal.cc
@@ -31,7 +31,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/align-mapped.cc b/src/bin/align-mapped.cc
index c78401f..ccd45e7 100644
--- a/src/bin/align-mapped.cc
+++ b/src/bin/align-mapped.cc
@@ -31,7 +31,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -95,7 +94,7 @@ int main(int argc, char *argv[]) {
 
     int num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
 
     for (; !loglikes_reader.Done(); loglikes_reader.Next()) {
       std::string utt = loglikes_reader.Key();
diff --git a/src/bin/align-text.cc b/src/bin/align-text.cc
index 1c69567..caf9c48 100644
--- a/src/bin/align-text.cc
+++ b/src/bin/align-text.cc
@@ -28,7 +28,6 @@ bool IsNotToken(const std::string &token) {
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
diff --git a/src/bin/am-info.cc b/src/bin/am-info.cc
index 6afb0c5..8952ec4 100644
--- a/src/bin/am-info.cc
+++ b/src/bin/am-info.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Write to standard output various properties of a model, of any type\n"
diff --git a/src/bin/analyze-counts.cc b/src/bin/analyze-counts.cc
index 6eeb90d..3066e2f 100644
--- a/src/bin/analyze-counts.cc
+++ b/src/bin/analyze-counts.cc
@@ -29,8 +29,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::uint64 uint64;
   try {
     const char *usage =
         "Computes element counts from integer vector table.\n"
diff --git a/src/bin/build-pfile-from-ali.cc b/src/bin/build-pfile-from-ali.cc
index fadb873..13cda14 100644
--- a/src/bin/build-pfile-from-ali.cc
+++ b/src/bin/build-pfile-from-ali.cc
@@ -36,7 +36,6 @@ using std::vector;
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Build pfiles for neural network training from alignment.\n"
diff --git a/src/bin/build-tree-two-level.cc b/src/bin/build-tree-two-level.cc
index c7cd553..d2db49e 100644
--- a/src/bin/build-tree-two-level.cc
+++ b/src/bin/build-tree-two-level.cc
@@ -54,7 +54,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Trains two-level decision tree.  Outputs the larger tree, and a mapping from the\n"
diff --git a/src/bin/build-tree.cc b/src/bin/build-tree.cc
index 920827b..1df0f6c 100644
--- a/src/bin/build-tree.cc
+++ b/src/bin/build-tree.cc
@@ -31,7 +31,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Train decision tree\n"
diff --git a/src/bin/cluster-phones.cc b/src/bin/cluster-phones.cc
index 1d5b382..f712a99 100644
--- a/src/bin/cluster-phones.cc
+++ b/src/bin/cluster-phones.cc
@@ -32,7 +32,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Cluster phones (or sets of phones) into sets for various purposes\n"
diff --git a/src/bin/compile-graph.cc b/src/bin/compile-graph.cc
index 7174fdf..cc27f00 100644
--- a/src/bin/compile-graph.cc
+++ b/src/bin/compile-graph.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/compile-questions.cc b/src/bin/compile-questions.cc
index f969414..02b18b9 100644
--- a/src/bin/compile-questions.cc
+++ b/src/bin/compile-questions.cc
@@ -58,7 +58,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Compile questions\n"
diff --git a/src/bin/compile-train-graphs-fsts.cc b/src/bin/compile-train-graphs-fsts.cc
index 00ec103..21f6146 100644
--- a/src/bin/compile-train-graphs-fsts.cc
+++ b/src/bin/compile-train-graphs-fsts.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/compile-train-graphs-without-lexicon.cc b/src/bin/compile-train-graphs-without-lexicon.cc
index 5615791..471b3ec 100644
--- a/src/bin/compile-train-graphs-without-lexicon.cc
+++ b/src/bin/compile-train-graphs-without-lexicon.cc
@@ -29,7 +29,6 @@
 
 namespace kaldi {
 
-typedef kaldi::int32 int32;
 using fst::SymbolTable;
 using fst::VectorFst;
 using fst::StdArc;
@@ -94,7 +93,6 @@ void MakeLinearLG(const std::vector<int32> &transcripts,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/compile-train-graphs.cc b/src/bin/compile-train-graphs.cc
index 874d079..1b6f62c 100644
--- a/src/bin/compile-train-graphs.cc
+++ b/src/bin/compile-train-graphs.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/compute-gop.cc b/src/bin/compute-gop.cc
index a6db0fc..3adbe37 100644
--- a/src/bin/compute-gop.cc
+++ b/src/bin/compute-gop.cc
@@ -102,7 +102,6 @@ void ComputeLpps(const Matrix<BaseFloat> &prob,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Compute Goodness Of Pronunciation (GOP) from a matrix of "
diff --git a/src/bin/compute-wer-bootci.cc b/src/bin/compute-wer-bootci.cc
index ba2a4ce..b261554 100644
--- a/src/bin/compute-wer-bootci.cc
+++ b/src/bin/compute-wer-bootci.cc
@@ -158,7 +158,6 @@ void GetBootstrapWERTwoSystemComparison(
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
diff --git a/src/bin/compute-wer.cc b/src/bin/compute-wer.cc
index 3d5b42c..2efc569 100644
--- a/src/bin/compute-wer.cc
+++ b/src/bin/compute-wer.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
diff --git a/src/bin/convert-ali.cc b/src/bin/convert-ali.cc
index 89fe838..ac2f0be 100644
--- a/src/bin/convert-ali.cc
+++ b/src/bin/convert-ali.cc
@@ -28,7 +28,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Convert alignments from one decision-tree/model to another\n"
diff --git a/src/bin/copy-gselect.cc b/src/bin/copy-gselect.cc
index e6c9201..313caa3 100644
--- a/src/bin/copy-gselect.cc
+++ b/src/bin/copy-gselect.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using std::vector;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Copy Gaussian indices for pruning, possibly making the\n"
         "lists shorter (e.g. the --n=10 limits to the 10 best indices\n"
diff --git a/src/bin/copy-post.cc b/src/bin/copy-post.cc
index d5ca3f4..f4ac5ec 100644
--- a/src/bin/copy-post.cc
+++ b/src/bin/copy-post.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy archives of posteriors, with optional scaling\n"
diff --git a/src/bin/copy-transition-model.cc b/src/bin/copy-transition-model.cc
index 62a5d0c..7609ab7 100644
--- a/src/bin/copy-transition-model.cc
+++ b/src/bin/copy-transition-model.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/copy-tree.cc b/src/bin/copy-tree.cc
index c412366..2803d61 100644
--- a/src/bin/copy-tree.cc
+++ b/src/bin/copy-tree.cc
@@ -29,7 +29,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy decision tree (possibly changing binary/text format)\n"
diff --git a/src/bin/decode-faster-mapped.cc b/src/bin/decode-faster-mapped.cc
index 67cd1a2..220b796 100644
--- a/src/bin/decode-faster-mapped.cc
+++ b/src/bin/decode-faster-mapped.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::Fst;
@@ -92,7 +91,7 @@ int main(int argc, char *argv[]) {
     Fst<StdArc> *decode_fst = fst::ReadFstKaldiGeneric(fst_in_filename);
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     FasterDecoder decoder(*decode_fst, decoder_opts);
 
diff --git a/src/bin/decode-faster.cc b/src/bin/decode-faster.cc
index cbcdb77..e37cabd 100644
--- a/src/bin/decode-faster.cc
+++ b/src/bin/decode-faster.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -87,7 +86,7 @@ int main(int argc, char *argv[]) {
     VectorFst<StdArc> *decode_fst = fst::ReadFstKaldi(fst_in_filename);
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     FasterDecoder decoder(*decode_fst, decoder_opts);
 
diff --git a/src/bin/est-lda.cc b/src/bin/est-lda.cc
index 6bcdc65..5c2e2fb 100644
--- a/src/bin/est-lda.cc
+++ b/src/bin/est-lda.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Estimate LDA transform using stats obtained with acc-lda.\n"
diff --git a/src/bin/est-mllt.cc b/src/bin/est-mllt.cc
index 4802130..b901165 100644
--- a/src/bin/est-mllt.cc
+++ b/src/bin/est-mllt.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Do update for MLLT (also known as STC)\n"
diff --git a/src/bin/est-pca.cc b/src/bin/est-pca.cc
index afc3ce5..3fd5bd6 100644
--- a/src/bin/est-pca.cc
+++ b/src/bin/est-pca.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Estimate PCA transform; dimension reduction is optional (if not specified\n"
diff --git a/src/bin/get-post-on-ali.cc b/src/bin/get-post-on-ali.cc
index 6d6dfd0..6494c0d 100644
--- a/src/bin/get-post-on-ali.cc
+++ b/src/bin/get-post-on-ali.cc
@@ -29,7 +29,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Given input posteriors, e.g. derived from lattice-to-post, and an alignment\n"
diff --git a/src/bin/hmm-info.cc b/src/bin/hmm-info.cc
index 4ece5e8..96c6c86 100644
--- a/src/bin/hmm-info.cc
+++ b/src/bin/hmm-info.cc
@@ -24,7 +24,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Write to standard output various properties of HMM-based transition model\n"
diff --git a/src/bin/latgen-faster-mapped-parallel.cc b/src/bin/latgen-faster-mapped-parallel.cc
index 4479ec8..4f8eb87 100644
--- a/src/bin/latgen-faster-mapped-parallel.cc
+++ b/src/bin/latgen-faster-mapped-parallel.cc
@@ -34,7 +34,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -96,7 +95,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     Fst<StdArc> *decode_fst = NULL; // only used if there is a single
                                     // decoding graph.
diff --git a/src/bin/latgen-faster-mapped.cc b/src/bin/latgen-faster-mapped.cc
index 610d9aa..d40c544 100644
--- a/src/bin/latgen-faster-mapped.cc
+++ b/src/bin/latgen-faster-mapped.cc
@@ -33,7 +33,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -92,7 +91,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
diff --git a/src/bin/latgen-incremental-mapped.cc b/src/bin/latgen-incremental-mapped.cc
index 80c65bf..d19fab2 100644
--- a/src/bin/latgen-incremental-mapped.cc
+++ b/src/bin/latgen-incremental-mapped.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -91,7 +90,7 @@ int main(int argc, char *argv[]) {
         KALDI_ERR << "Could not read symbol table from file " << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
diff --git a/src/bin/logprob-to-post.cc b/src/bin/logprob-to-post.cc
index f221580..68e6771 100644
--- a/src/bin/logprob-to-post.cc
+++ b/src/bin/logprob-to-post.cc
@@ -38,7 +38,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Convert a matrix of log-probabilities (e.g. from nnet-logprob) to posteriors\n"
diff --git a/src/bin/make-h-transducer.cc b/src/bin/make-h-transducer.cc
index c54b925..62389ce 100644
--- a/src/bin/make-h-transducer.cc
+++ b/src/bin/make-h-transducer.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/make-ilabel-transducer.cc b/src/bin/make-ilabel-transducer.cc
index a78cefa..680c9a7 100644
--- a/src/bin/make-ilabel-transducer.cc
+++ b/src/bin/make-ilabel-transducer.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/make-pdf-to-tid-transducer.cc b/src/bin/make-pdf-to-tid-transducer.cc
index 907380a..0cd2506 100644
--- a/src/bin/make-pdf-to-tid-transducer.cc
+++ b/src/bin/make-pdf-to-tid-transducer.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/matrix-max.cc b/src/bin/matrix-max.cc
index 5849493..f13fbfa 100644
--- a/src/bin/matrix-max.cc
+++ b/src/bin/matrix-max.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Compute element-wise max of given matrices (useful for some posterior\n"
diff --git a/src/bin/phones-to-prons.cc b/src/bin/phones-to-prons.cc
index 0d7ab12..8a3d9a8 100644
--- a/src/bin/phones-to-prons.cc
+++ b/src/bin/phones-to-prons.cc
@@ -63,7 +63,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   using fst::VectorFst;
   using fst::StdArc;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Convert pairs of (phone-level, word-level) transcriptions to\n"
@@ -172,7 +171,7 @@ int main(int argc, char *argv[]) {
         if (g_kaldi_verbose_level >= 2) {
           KALDI_LOG << "phn2word FST is below:";
           fst::FstPrinter<StdArc> fstprinter(phn2word, NULL, NULL, NULL, false, true, "\t");
-          fstprinter.Print(&std::cerr, "standard error");
+          fstprinter.Print(std::cerr, "standard error");
           KALDI_LOG << "phone sequence is: ";
           for (size_t i = 0; i < phones.size(); i++)
             std::cerr << phones[i] << ' ';
diff --git a/src/bin/post-to-pdf-post.cc b/src/bin/post-to-pdf-post.cc
index 99aa577..8cba722 100644
--- a/src/bin/post-to-pdf-post.cc
+++ b/src/bin/post-to-pdf-post.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "This program turns per-frame posteriors, which have transition-ids as\n"
diff --git a/src/bin/post-to-phone-post.cc b/src/bin/post-to-phone-post.cc
index 871f03a..9cc7559 100644
--- a/src/bin/post-to-phone-post.cc
+++ b/src/bin/post-to-phone-post.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Convert posteriors (or pdf-level posteriors) to phone-level posteriors\n"
diff --git a/src/bin/post-to-smat.cc b/src/bin/post-to-smat.cc
index 2d04300..253cd41 100644
--- a/src/bin/post-to-smat.cc
+++ b/src/bin/post-to-smat.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "This program turns an archive of per-frame posteriors, e.g. from\n"
diff --git a/src/bin/post-to-tacc.cc b/src/bin/post-to-tacc.cc
index d50a2a6..8edb0b6 100644
--- a/src/bin/post-to-tacc.cc
+++ b/src/bin/post-to-tacc.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "From posteriors, compute transition-accumulators\n"
diff --git a/src/bin/post-to-weights.cc b/src/bin/post-to-weights.cc
index b346f2d..e29f5ff 100644
--- a/src/bin/post-to-weights.cc
+++ b/src/bin/post-to-weights.cc
@@ -25,8 +25,7 @@
 
 int main(int argc, char *argv[]) {
   try {
-    using namespace kaldi;
-    typedef kaldi::int32 int32;  
+    using namespace kaldi;  
 
     const char *usage =
         "Turn posteriors into per-frame weights (typically most useful after\n"
diff --git a/src/bin/prob-to-post.cc b/src/bin/prob-to-post.cc
index 4266d34..438f2e4 100644
--- a/src/bin/prob-to-post.cc
+++ b/src/bin/prob-to-post.cc
@@ -38,7 +38,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Convert a matrix of probabilities (e.g. from nnet-logprob2) to posteriors\n"
diff --git a/src/bin/prons-to-wordali.cc b/src/bin/prons-to-wordali.cc
index a633104..bc847f6 100644
--- a/src/bin/prons-to-wordali.cc
+++ b/src/bin/prons-to-wordali.cc
@@ -30,7 +30,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   using fst::VectorFst;
   using fst::StdArc;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Caution: this program relates to older scripts and is deprecated,\n"
diff --git a/src/bin/scale-post.cc b/src/bin/scale-post.cc
index f8e5fac..dc6e993 100644
--- a/src/bin/scale-post.cc
+++ b/src/bin/scale-post.cc
@@ -26,8 +26,7 @@
 
 int main(int argc, char *argv[]) {
   try {
-    using namespace kaldi;
-    typedef kaldi::int32 int32;  
+    using namespace kaldi;  
 
     const char *usage =
         "Scale posteriors with either a global scale, or a different scale for "
diff --git a/src/bin/show-alignments.cc b/src/bin/show-alignments.cc
index 06bc907..8d3eead 100644
--- a/src/bin/show-alignments.cc
+++ b/src/bin/show-alignments.cc
@@ -26,7 +26,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Display alignments in human-readable form\n"
diff --git a/src/bin/show-transitions.cc b/src/bin/show-transitions.cc
index bdc780b..7b26e14 100644
--- a/src/bin/show-transitions.cc
+++ b/src/bin/show-transitions.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/bin/sum-lda-accs.cc b/src/bin/sum-lda-accs.cc
index 22f11cc..9e11cb5 100644
--- a/src/bin/sum-lda-accs.cc
+++ b/src/bin/sum-lda-accs.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Sum stats obtained with acc-lda.\n"
diff --git a/src/bin/sum-matrices.cc b/src/bin/sum-matrices.cc
index 816b111..165a994 100644
--- a/src/bin/sum-matrices.cc
+++ b/src/bin/sum-matrices.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Sum matrices, e.g. stats for fMPE training\n"
diff --git a/src/bin/sum-mllt-accs.cc b/src/bin/sum-mllt-accs.cc
index 4d580e2..197efed 100644
--- a/src/bin/sum-mllt-accs.cc
+++ b/src/bin/sum-mllt-accs.cc
@@ -23,7 +23,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Sum stats obtained with gmm-acc-mllt.\n"
diff --git a/src/bin/sum-post.cc b/src/bin/sum-post.cc
index 46476f0..30a8c86 100644
--- a/src/bin/sum-post.cc
+++ b/src/bin/sum-post.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Sum two sets of posteriors for each utterance, e.g. useful in fMMI.\n"
diff --git a/src/bin/sum-tree-stats.cc b/src/bin/sum-tree-stats.cc
index fdaa3d1..c9e0cb4 100644
--- a/src/bin/sum-tree-stats.cc
+++ b/src/bin/sum-tree-stats.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Sum statistics for phonetic-context tree building.\n"
diff --git a/src/bin/tree-info.cc b/src/bin/tree-info.cc
index ce3c5c9..c97b6f0 100644
--- a/src/bin/tree-info.cc
+++ b/src/bin/tree-info.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Print information about decision tree (mainly the number of pdfs), to stdout\n"
diff --git a/src/bin/weight-post.cc b/src/bin/weight-post.cc
index 5e8ae95..a3ad6bb 100644
--- a/src/bin/weight-post.cc
+++ b/src/bin/weight-post.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     int32 length_tolerance = 2;
 
diff --git a/src/bin/weight-silence-post.cc b/src/bin/weight-silence-post.cc
index dba935d..50b45cc 100644
--- a/src/bin/weight-silence-post.cc
+++ b/src/bin/weight-silence-post.cc
@@ -28,7 +28,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Apply weight to silences in posts\n"
diff --git a/src/chainbin/chain-est-phone-lm.cc b/src/chainbin/chain-est-phone-lm.cc
index f16b3f4..171dbc5 100644
--- a/src/chainbin/chain-est-phone-lm.cc
+++ b/src/chainbin/chain-est-phone-lm.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::chain;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize un-smoothed phone language model for 'chain' training\n"
diff --git a/src/chainbin/chain-get-supervision.cc b/src/chainbin/chain-get-supervision.cc
index 9c29492..4b3ddcd 100644
--- a/src/chainbin/chain-get-supervision.cc
+++ b/src/chainbin/chain-get-supervision.cc
@@ -59,8 +59,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::chain;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get a 'chain' supervision object for each file of training data.\n"
diff --git a/src/chainbin/chain-make-den-fst.cc b/src/chainbin/chain-make-den-fst.cc
index 0d8d249..dd96950 100644
--- a/src/chainbin/chain-make-den-fst.cc
+++ b/src/chainbin/chain-make-den-fst.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::chain;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Created 'denominator' FST for 'chain' training\n"
diff --git a/src/chainbin/chain-make-num-fst-e2e.cc b/src/chainbin/chain-make-num-fst-e2e.cc
index 19b7943..989d9ad 100644
--- a/src/chainbin/chain-make-num-fst-e2e.cc
+++ b/src/chainbin/chain-make-num-fst-e2e.cc
@@ -71,7 +71,6 @@ bool AddWeightToFst(const fst::StdVectorFst &normalization_fst,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Converts chain e2e numerator fst (containing transition-ids) to fst (containing pdf-ids+1, \n"
diff --git a/src/chainbin/nnet3-chain-acc-lda-stats.cc b/src/chainbin/nnet3-chain-acc-lda-stats.cc
index 693eb2d..a7655a9 100644
--- a/src/chainbin/nnet3-chain-acc-lda-stats.cc
+++ b/src/chainbin/nnet3-chain-acc-lda-stats.cc
@@ -188,8 +188,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Accumulate statistics in the same format as acc-lda (i.e. stats for\n"
diff --git a/src/chainbin/nnet3-chain-add-post-to-egs.cc b/src/chainbin/nnet3-chain-add-post-to-egs.cc
index bdd5519..5050722 100644
--- a/src/chainbin/nnet3-chain-add-post-to-egs.cc
+++ b/src/chainbin/nnet3-chain-add-post-to-egs.cc
@@ -80,8 +80,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace kaldi::nnet3;
     using namespace kaldi::chain;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program reads the input nnet3 egs, computes nnet outputs for them and .\n"
diff --git a/src/chainbin/nnet3-chain-combine.cc b/src/chainbin/nnet3-chain-combine.cc
index a3222d2..e9d35e6 100644
--- a/src/chainbin/nnet3-chain-combine.cc
+++ b/src/chainbin/nnet3-chain-combine.cc
@@ -84,8 +84,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Using a subset of training or held-out nnet3+chain examples, compute\n"
diff --git a/src/chainbin/nnet3-chain-combine2.cc b/src/chainbin/nnet3-chain-combine2.cc
index e83553e..b70ebd1 100644
--- a/src/chainbin/nnet3-chain-combine2.cc
+++ b/src/chainbin/nnet3-chain-combine2.cc
@@ -88,8 +88,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Using a subset of training or held-out nnet3+chain examples, compute\n"
diff --git a/src/chainbin/nnet3-chain-compute-post.cc b/src/chainbin/nnet3-chain-compute-post.cc
index 914c70b..d0d4c36 100644
--- a/src/chainbin/nnet3-chain-compute-post.cc
+++ b/src/chainbin/nnet3-chain-compute-post.cc
@@ -31,8 +31,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Compute posteriors from 'denominator FST' of chain model and optionally "
diff --git a/src/chainbin/nnet3-chain-compute-prob.cc b/src/chainbin/nnet3-chain-compute-prob.cc
index 8cf25d4..ac5d7c4 100644
--- a/src/chainbin/nnet3-chain-compute-prob.cc
+++ b/src/chainbin/nnet3-chain-compute-prob.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Computes and prints to in logging messages the average log-prob per frame of\n"
diff --git a/src/chainbin/nnet3-chain-copy-egs.cc b/src/chainbin/nnet3-chain-copy-egs.cc
index 0117fe2..a1c9f97 100644
--- a/src/chainbin/nnet3-chain-copy-egs.cc
+++ b/src/chainbin/nnet3-chain-copy-egs.cc
@@ -271,8 +271,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples for nnet3+chain network training, possibly changing the binary mode.\n"
diff --git a/src/chainbin/nnet3-chain-e2e-get-egs.cc b/src/chainbin/nnet3-chain-e2e-get-egs.cc
index 8cdda8d..f7b5354 100644
--- a/src/chainbin/nnet3-chain-e2e-get-egs.cc
+++ b/src/chainbin/nnet3-chain-e2e-get-egs.cc
@@ -207,8 +207,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/chainbin/nnet3-chain-get-egs.cc b/src/chainbin/nnet3-chain-get-egs.cc
index 6c3951d..90989b6 100644
--- a/src/chainbin/nnet3-chain-get-egs.cc
+++ b/src/chainbin/nnet3-chain-get-egs.cc
@@ -249,8 +249,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for nnet3+chain neural network\n"
diff --git a/src/chainbin/nnet3-chain-merge-egs.cc b/src/chainbin/nnet3-chain-merge-egs.cc
index 46df29b..eda548e 100644
--- a/src/chainbin/nnet3-chain-merge-egs.cc
+++ b/src/chainbin/nnet3-chain-merge-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This copies nnet3+chain training examples from input to output, merging them\n"
diff --git a/src/chainbin/nnet3-chain-normalize-egs.cc b/src/chainbin/nnet3-chain-normalize-egs.cc
index a97797e..b33cfb1 100644
--- a/src/chainbin/nnet3-chain-normalize-egs.cc
+++ b/src/chainbin/nnet3-chain-normalize-egs.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Add weights from 'normalization' FST to nnet3+chain examples.\n"
diff --git a/src/chainbin/nnet3-chain-shuffle-egs.cc b/src/chainbin/nnet3-chain-shuffle-egs.cc
index 1198991..cf71f93 100644
--- a/src/chainbin/nnet3-chain-shuffle-egs.cc
+++ b/src/chainbin/nnet3-chain-shuffle-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy nnet3+chain examples for neural network training, from the input to output,\n"
diff --git a/src/chainbin/nnet3-chain-subset-egs.cc b/src/chainbin/nnet3-chain-subset-egs.cc
index d8a76b6..c309b0a 100644
--- a/src/chainbin/nnet3-chain-subset-egs.cc
+++ b/src/chainbin/nnet3-chain-subset-egs.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Creates a random subset of the input nnet3+chain examples, of a specified size.\n"
diff --git a/src/chainbin/nnet3-chain-train.cc b/src/chainbin/nnet3-chain-train.cc
index 7342f0c..3d381dc 100644
--- a/src/chainbin/nnet3-chain-train.cc
+++ b/src/chainbin/nnet3-chain-train.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace kaldi::nnet3;
     using namespace kaldi::chain;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train nnet3+chain neural network parameters with backprop and stochastic\n"
diff --git a/src/chainbin/nnet3-chain-train2.cc b/src/chainbin/nnet3-chain-train2.cc
index b7c7195..8086a67 100644
--- a/src/chainbin/nnet3-chain-train2.cc
+++ b/src/chainbin/nnet3-chain-train2.cc
@@ -29,8 +29,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace kaldi::nnet3;
     using namespace kaldi::chain;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train nnet3+chain neural network parameters with backprop and stochastic\n"
diff --git a/src/cudadecoderbin/batched-wav-nnet3-cuda-online.cc b/src/cudadecoderbin/batched-wav-nnet3-cuda-online.cc
index 1aba714..b174262 100644
--- a/src/cudadecoderbin/batched-wav-nnet3-cuda-online.cc
+++ b/src/cudadecoderbin/batched-wav-nnet3-cuda-online.cc
@@ -46,8 +46,6 @@ using namespace kaldi::cuda_decoder;
 using namespace fst;
 using CorrelationID = CudaOnlinePipelineDynamicBatcher::CorrelationID;
 
-typedef kaldi::int32 int32;
-typedef kaldi::int64 int64;
 
 struct Stream {
   std::shared_ptr<WaveData> wav;
diff --git a/src/cudadecoderbin/batched-wav-nnet3-cuda.cc b/src/cudadecoderbin/batched-wav-nnet3-cuda.cc
index 4613811..3151985 100644
--- a/src/cudadecoderbin/batched-wav-nnet3-cuda.cc
+++ b/src/cudadecoderbin/batched-wav-nnet3-cuda.cc
@@ -110,8 +110,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding with "
diff --git a/src/cudadecoderbin/batched-wav-nnet3-cuda2.cc b/src/cudadecoderbin/batched-wav-nnet3-cuda2.cc
index 992b345..b1c8486 100644
--- a/src/cudadecoderbin/batched-wav-nnet3-cuda2.cc
+++ b/src/cudadecoderbin/batched-wav-nnet3-cuda2.cc
@@ -45,8 +45,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and decodes them with "
diff --git a/src/cudafeatbin/apply-batched-cmvn-online-cuda.cc b/src/cudafeatbin/apply-batched-cmvn-online-cuda.cc
index 24e7cbd..040be9b 100644
--- a/src/cudafeatbin/apply-batched-cmvn-online-cuda.cc
+++ b/src/cudafeatbin/apply-batched-cmvn-online-cuda.cc
@@ -46,7 +46,6 @@ struct UtteranceDataHandle {
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Apply online cepstral mean (and possibly variance) computation "
diff --git a/src/cudafeatbin/apply-cmvn-online-cuda.cc b/src/cudafeatbin/apply-cmvn-online-cuda.cc
index 6dc18fd..89ce8f0 100644
--- a/src/cudafeatbin/apply-cmvn-online-cuda.cc
+++ b/src/cudafeatbin/apply-cmvn-online-cuda.cc
@@ -26,7 +26,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
       "Apply online cepstral mean (and possibly variance) computation online,\n"
diff --git a/src/cudafeatbin/compute-fbank-online-batched-cuda.cc b/src/cudafeatbin/compute-fbank-online-batched-cuda.cc
index 36cfc4a..237a1b0 100644
--- a/src/cudafeatbin/compute-fbank-online-batched-cuda.cc
+++ b/src/cudafeatbin/compute-fbank-online-batched-cuda.cc
@@ -61,7 +61,6 @@ struct UtteranceDataHandle {
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute online fbank features.\n\n"
diff --git a/src/cudafeatbin/compute-mfcc-online-batched-cuda.cc b/src/cudafeatbin/compute-mfcc-online-batched-cuda.cc
index 99883f3..c9e1a15 100644
--- a/src/cudafeatbin/compute-mfcc-online-batched-cuda.cc
+++ b/src/cudafeatbin/compute-mfcc-online-batched-cuda.cc
@@ -61,7 +61,6 @@ struct UtteranceDataHandle {
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute online mfcc features.\n\n"
diff --git a/src/cudafeatbin/compute-online-feats-batched-cuda.cc b/src/cudafeatbin/compute-online-feats-batched-cuda.cc
index 787acee..a8fcdaf 100644
--- a/src/cudafeatbin/compute-online-feats-batched-cuda.cc
+++ b/src/cudafeatbin/compute-online-feats-batched-cuda.cc
@@ -102,7 +102,6 @@ void CUDART_CB CopySlicesCallback(void *cb_state_p) {
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute online features and ivector features.\n\n"
diff --git a/src/cudafeatbin/compute-online-feats-cuda.cc b/src/cudafeatbin/compute-online-feats-cuda.cc
index b9135c3..a94a281 100644
--- a/src/cudafeatbin/compute-online-feats-cuda.cc
+++ b/src/cudafeatbin/compute-online-feats-cuda.cc
@@ -27,8 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
       "Extract features and ivectors for utterances using the cuda online\n"
diff --git a/src/cudamatrix/cu-allocator.h b/src/cudamatrix/cu-allocator.h
index d7d65da..b86747a 100644
--- a/src/cudamatrix/cu-allocator.h
+++ b/src/cudamatrix/cu-allocator.h
@@ -38,6 +38,7 @@
 #include "base/kaldi-common.h"
 #include "util/stl-utils.h"
 #include "itf/options-itf.h"
+#include "cudamatrix/kaldi_cudamatrix_Export.h"
 
 namespace kaldi {
 
@@ -82,7 +83,7 @@ struct CuAllocatorOptions {
   }
 };
 
-extern CuAllocatorOptions g_allocator_options;
+extern CuAllocatorOptions kaldi_cudamatrix_EXPORT g_allocator_options;
 
 inline void RegisterCuAllocatorOptions(OptionsItf *po) {
   g_allocator_options.Register(po);
@@ -356,7 +357,7 @@ class CuMemoryAllocator {
 // output to them the free memory and the total memory of the device.
 std::string GetFreeGpuMemory(int64* free, int64* total);
 
-extern CuMemoryAllocator g_cuda_allocator;
+extern CuMemoryAllocator kaldi_cudamatrix_EXPORT g_cuda_allocator;
 
 }  // namespace kaldi
 
diff --git a/src/cudamatrix/cu-device.cc b/src/cudamatrix/cu-device.cc
index 39bcf37..3a7050b 100644
--- a/src/cudamatrix/cu-device.cc
+++ b/src/cudamatrix/cu-device.cc
@@ -620,7 +620,12 @@ CuDevice::~CuDevice() {
 
 // Each thread has its own copy of the CuDevice object.
 // Note: this was declared "static".
-thread_local CuDevice CuDevice::this_thread_device_;
+  #ifdef _WIN32
+  CuDevice CuDevice::this_thread_device_;
+  #else
+  thread_local CuDevice CuDevice::this_thread_device_;
+  #endif
+
 
 CuDevice::CuDeviceOptions CuDevice::device_options_;
 
diff --git a/src/cudamatrix/cu-device.h b/src/cudamatrix/cu-device.h
index 2f278eb..b9722a6 100644
--- a/src/cudamatrix/cu-device.h
+++ b/src/cudamatrix/cu-device.h
@@ -48,6 +48,7 @@ typedef int cusolverStatus_t;
 #include "base/timer.h"
 #include "cudamatrix/cu-allocator.h"
 #include "cudamatrix/cu-common.h"
+#include "cudamatrix/kaldi_cudamatrix_Export.h"
 
 
 namespace kaldi {
@@ -283,7 +284,7 @@ class CuDevice {
     }
   };
 
-  static CuDeviceOptions device_options_;
+  static CuDeviceOptions kaldi_cudamatrix_EXPORT device_options_;
 
   // Default constructor used to initialize this_thread_device_
   CuDevice();
@@ -326,20 +327,23 @@ class CuDevice {
   // Each thread has its own CuDevice object, which contains the cublas and
   // cusparse handles.  These are unique to the thread (which is what is
   // recommended by NVidia).
+  #ifdef _WIN32
+  static CuDevice kaldi_cudamatrix_EXPORT this_thread_device_;
+  #else
   static thread_local CuDevice this_thread_device_;
-
+  #endif
   // The GPU device-id that we are using.  This will be initialized to -1, and will
   // be set when the user calls
   //  CuDevice::Instantiate::SelectGpuId(...)
   // from the main thread.  Background threads will, when spawned and when
   // CuDevice::Instantiate() is called from them the first time, will
   // call cudaSetDevice(device_id))
-  static int32 device_id_;
+  static int32 kaldi_cudamatrix_EXPORT device_id_;
 
   // This will automatically be set to true if the application has multiple
   // threads that access the GPU device.  It is used to know whether to
   // use locks when accessing the allocator and the profiling-related code.
-  static bool multi_threaded_;
+  static bool kaldi_cudamatrix_EXPORT multi_threaded_;
 
   // The variable profile_map_ will only be used if the verbose level is >= 1;
   // it will accumulate some function-level timing information that is printed
diff --git a/src/cudamatrix/kaldi_cudamatrix_Export.h b/src/cudamatrix/kaldi_cudamatrix_Export.h
new file mode 100644
index 0000000..718e5a5
--- /dev/null
+++ b/src/cudamatrix/kaldi_cudamatrix_Export.h
@@ -0,0 +1,46 @@
+
+#ifndef kaldi_cudamatrix_EXPORT_H
+#define kaldi_cudamatrix_EXPORT_H
+
+#ifdef kaldi_cudamatrix_BUILT_AS_STATIC
+#  define kaldi_cudamatrix_EXPORT
+#  define KALDI_CUDAMATRIX_NO_EXPORT
+#else
+#ifdef _WIN32
+#  ifndef kaldi_cudamatrix_EXPORT
+#    ifdef kaldi_cudamatrix_EXPORTS
+        /* We are building this library */
+#      define kaldi_cudamatrix_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define kaldi_cudamatrix_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef KALDI_CUDAMATRIX_NO_EXPORT
+#    define KALDI_CUDAMATRIX_NO_EXPORT 
+#  endif
+#else
+        #define kaldi_cudamatrix_EXPORT
+#endif // _WIN32
+#endif
+
+#ifndef KALDI_CUDAMATRIX_DEPRECATED
+#  define KALDI_CUDAMATRIX_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef KALDI_CUDAMATRIX_DEPRECATED_EXPORT
+#  define KALDI_CUDAMATRIX_DEPRECATED_EXPORT kaldi_cudamatrix_EXPORT KALDI_CUDAMATRIX_DEPRECATED
+#endif
+
+#ifndef KALDI_CUDAMATRIX_DEPRECATED_NO_EXPORT
+#  define KALDI_CUDAMATRIX_DEPRECATED_NO_EXPORT KALDI_CUDAMATRIX_NO_EXPORT KALDI_CUDAMATRIX_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef KALDI_CUDAMATRIX_NO_DEPRECATED
+#    define KALDI_CUDAMATRIX_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* kaldi_cudamatrix_EXPORT_H */
diff --git a/src/featbin/apply-cmvn-sliding.cc b/src/featbin/apply-cmvn-sliding.cc
index 7bff998..31e218f 100644
--- a/src/featbin/apply-cmvn-sliding.cc
+++ b/src/featbin/apply-cmvn-sliding.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Apply sliding-window cepstral mean (and optionally variance)\n"
diff --git a/src/featbin/apply-cmvn.cc b/src/featbin/apply-cmvn.cc
index b4b073b..7fd2b7f 100644
--- a/src/featbin/apply-cmvn.cc
+++ b/src/featbin/apply-cmvn.cc
@@ -73,7 +73,7 @@ int main(int argc, char *argv[]) {
       // don't even uncompress, if it was a CompressedMatrix.
       SequentialGeneralMatrixReader reader(feat_rspecifier);
       GeneralMatrixWriter writer(feat_wspecifier);
-      kaldi::int32 num_done = 0;
+      int32 num_done = 0;
       for (;!reader.Done(); reader.Next()) {
         writer.Write(reader.Key(), reader.Value());
         num_done++;
@@ -92,7 +92,7 @@ int main(int argc, char *argv[]) {
     }
 
 
-    kaldi::int32 num_done = 0, num_err = 0;
+    int32 num_done = 0, num_err = 0;
 
     SequentialBaseFloatMatrixReader feat_reader(feat_rspecifier);
     BaseFloatMatrixWriter feat_writer(feat_wspecifier);
diff --git a/src/featbin/compute-cmvn-stats-two-channel.cc b/src/featbin/compute-cmvn-stats-two-channel.cc
index d174622..b32de75 100644
--- a/src/featbin/compute-cmvn-stats-two-channel.cc
+++ b/src/featbin/compute-cmvn-stats-two-channel.cc
@@ -100,7 +100,6 @@ void AccCmvnStatsForPair(const std::string &utt1, const std::string &utt2,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Compute cepstral mean and variance normalization statistics\n"
diff --git a/src/featbin/compute-cmvn-stats.cc b/src/featbin/compute-cmvn-stats.cc
index 9cbb54e..7b7ee6c 100644
--- a/src/featbin/compute-cmvn-stats.cc
+++ b/src/featbin/compute-cmvn-stats.cc
@@ -54,7 +54,6 @@ bool AccCmvnStatsWrapper(const std::string &utt,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Compute cepstral mean and variance normalization statistics\n"
diff --git a/src/featbin/fmpe-acc-stats.cc b/src/featbin/fmpe-acc-stats.cc
index c69e95b..bb0320c 100644
--- a/src/featbin/fmpe-acc-stats.cc
+++ b/src/featbin/fmpe-acc-stats.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  using kaldi::int32;
   try {
     const char *usage =
         "Compute statistics for fMPE training\n"
diff --git a/src/featbin/fmpe-apply-transform.cc b/src/featbin/fmpe-apply-transform.cc
index 9473e5f..b8c1c35 100644
--- a/src/featbin/fmpe-apply-transform.cc
+++ b/src/featbin/fmpe-apply-transform.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  using kaldi::int32;
   try {
     const char *usage =
         "Apply fMPE transform to features\n"
diff --git a/src/featbin/fmpe-sum-accs.cc b/src/featbin/fmpe-sum-accs.cc
index e2976ab..b552553 100644
--- a/src/featbin/fmpe-sum-accs.cc
+++ b/src/featbin/fmpe-sum-accs.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  using kaldi::int32;
   try {
     const char *usage =
         "Sum fMPE stats\n"
diff --git a/src/fgmmbin/fgmm-global-acc-stats-post.cc b/src/fgmmbin/fgmm-global-acc-stats-post.cc
index ebc77a0..9042eb4 100644
--- a/src/fgmmbin/fgmm-global-acc-stats-post.cc
+++ b/src/fgmmbin/fgmm-global-acc-stats-post.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Accumulate stats from posteriors and features for instantiating "
diff --git a/src/fgmmbin/fgmm-global-copy.cc b/src/fgmmbin/fgmm-global-copy.cc
index a38604c..b003734 100644
--- a/src/fgmmbin/fgmm-global-copy.cc
+++ b/src/fgmmbin/fgmm-global-copy.cc
@@ -24,7 +24,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a full-covariance GMM\n"
diff --git a/src/fgmmbin/fgmm-global-est.cc b/src/fgmmbin/fgmm-global-est.cc
index 0465e10..e74abb8 100644
--- a/src/fgmmbin/fgmm-global-est.cc
+++ b/src/fgmmbin/fgmm-global-est.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef int32 int32;
     MleFullGmmOptions gmm_opts;
 
     const char *usage =
diff --git a/src/fgmmbin/fgmm-global-gselect-to-post.cc b/src/fgmmbin/fgmm-global-gselect-to-post.cc
index f65ec4e..fd13c23 100644
--- a/src/fgmmbin/fgmm-global-gselect-to-post.cc
+++ b/src/fgmmbin/fgmm-global-gselect-to-post.cc
@@ -27,8 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Given features and Gaussian-selection (gselect) information for\n"
diff --git a/src/fgmmbin/fgmm-global-info.cc b/src/fgmmbin/fgmm-global-info.cc
index e00384f..d9710b4 100644
--- a/src/fgmmbin/fgmm-global-info.cc
+++ b/src/fgmmbin/fgmm-global-info.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Write to standard output various properties of full-covariance GMM model\n"
diff --git a/src/fgmmbin/fgmm-global-init-from-accs.cc b/src/fgmmbin/fgmm-global-init-from-accs.cc
index 70b43e0..7024eb8 100644
--- a/src/fgmmbin/fgmm-global-init-from-accs.cc
+++ b/src/fgmmbin/fgmm-global-init-from-accs.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef int32 int32;
     MleFullGmmOptions gmm_opts;
 
     const char *usage =
diff --git a/src/fgmmbin/fgmm-global-merge.cc b/src/fgmmbin/fgmm-global-merge.cc
index 48cd69e..6fd2548 100644
--- a/src/fgmmbin/fgmm-global-merge.cc
+++ b/src/fgmmbin/fgmm-global-merge.cc
@@ -65,7 +65,6 @@ void MergeFullGmm(const FullGmm &src, FullGmm *dst) {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Combine a number of GMMs into a larger GMM, with #Gauss = \n"
diff --git a/src/fgmmbin/fgmm-global-sum-accs.cc b/src/fgmmbin/fgmm-global-sum-accs.cc
index 4d6df5f..c7ded7b 100644
--- a/src/fgmmbin/fgmm-global-sum-accs.cc
+++ b/src/fgmmbin/fgmm-global-sum-accs.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Sum multiple accumulated stats files for full-covariance GMM "
diff --git a/src/fgmmbin/fgmm-global-to-gmm.cc b/src/fgmmbin/fgmm-global-to-gmm.cc
index f81c5c2..8fcf756 100644
--- a/src/fgmmbin/fgmm-global-to-gmm.cc
+++ b/src/fgmmbin/fgmm-global-to-gmm.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Convert single full-covariance GMM to single diagonal-covariance GMM.\n"
diff --git a/src/fgmmbin/fgmm-gselect.cc b/src/fgmmbin/fgmm-gselect.cc
index ab36af7..280f0e6 100644
--- a/src/fgmmbin/fgmm-gselect.cc
+++ b/src/fgmmbin/fgmm-gselect.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using std::vector;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Precompute Gaussian indices for pruning\n"
         " (e.g. in training UBMs, SGMMs, tied-mixture systems)\n"
@@ -72,7 +71,7 @@ int main(int argc, char *argv[]) {
     }
     
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
     
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     Int32VectorVectorWriter gselect_writer(gselect_wspecifier);
diff --git a/src/fstbin/fstaddselfloops.cc b/src/fstbin/fstaddselfloops.cc
index 96895f2..1656a2f 100644
--- a/src/fstbin/fstaddselfloops.cc
+++ b/src/fstbin/fstaddselfloops.cc
@@ -37,7 +37,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Adds self-loops to states of an FST to propagate disambiguation symbols through it\n"
diff --git a/src/fstbin/fstaddsubsequentialloop.cc b/src/fstbin/fstaddsubsequentialloop.cc
index 7f81334..2e26485 100644
--- a/src/fstbin/fstaddsubsequentialloop.cc
+++ b/src/fstbin/fstaddsubsequentialloop.cc
@@ -38,7 +38,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Minimizes FST after encoding [this algorithm applicable to all FSTs in tropical semiring]\n"
diff --git a/src/fstbin/fstcomposecontext.cc b/src/fstbin/fstcomposecontext.cc
index 8f9d270..45f2ab5 100644
--- a/src/fstbin/fstcomposecontext.cc
+++ b/src/fstbin/fstcomposecontext.cc
@@ -67,7 +67,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
     /*
         # fstcomposecontext composes efficiently with a context fst
         # that it generates.  Without --disambig-syms specified, it
diff --git a/src/fstbin/fstcopy.cc b/src/fstbin/fstcopy.cc
index a22b148..ed75397 100644
--- a/src/fstbin/fstcopy.cc
+++ b/src/fstbin/fstcopy.cc
@@ -42,7 +42,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Copy tables/archives of FSTs, indexed by a string (e.g. utterance-id)\n"
diff --git a/src/fstbin/fstdeterminizelog.cc b/src/fstbin/fstdeterminizelog.cc
index f446241..6b90089 100644
--- a/src/fstbin/fstdeterminizelog.cc
+++ b/src/fstbin/fstdeterminizelog.cc
@@ -30,7 +30,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Determinizes in the log semiring\n"
diff --git a/src/fstbin/fstdeterminizestar.cc b/src/fstbin/fstdeterminizestar.cc
index 35cb51a..ad8b2ff 100644
--- a/src/fstbin/fstdeterminizestar.cc
+++ b/src/fstbin/fstdeterminizestar.cc
@@ -65,7 +65,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Removes epsilons and determinizes in one step\n"
diff --git a/src/fstbin/fstisstochastic.cc b/src/fstbin/fstisstochastic.cc
index 3e0f165..9b24c37 100644
--- a/src/fstbin/fstisstochastic.cc
+++ b/src/fstbin/fstisstochastic.cc
@@ -44,7 +44,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Checks whether an FST is stochastic and exits with success if so.\n"
diff --git a/src/fstbin/fstmakecontextfst.cc b/src/fstbin/fstmakecontextfst.cc
index 818bf00..729f8a0 100644
--- a/src/fstbin/fstmakecontextfst.cc
+++ b/src/fstbin/fstmakecontextfst.cc
@@ -33,7 +33,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Constructs a context FST with a specified context-width and context-position.\n"
@@ -74,7 +73,7 @@ int main(int argc, char *argv[]) {
     std::string fst_out_filename = po.GetOptArg(4);
 
 
-    std::vector<kaldi::int32> phone_syms;
+    std::vector<int32> phone_syms;
     {
       fst::SymbolTable *phones_symtab = NULL;
       {  // read phone symbol table.
diff --git a/src/fstbin/fstmakecontextsyms.cc b/src/fstbin/fstmakecontextsyms.cc
index c9d4939..4a2eb59 100644
--- a/src/fstbin/fstmakecontextsyms.cc
+++ b/src/fstbin/fstmakecontextsyms.cc
@@ -84,7 +84,7 @@ int main(int argc, char *argv[]) {
         ilabel_info_filename = po.GetArg(2),
         clg_symtab_filename = po.GetOptArg(3);
 
-    std::vector<std::vector<kaldi::int32> > ilabel_info;
+    std::vector<std::vector<int32> > ilabel_info;
     {
       bool binary;
       Input ki(ilabel_info_filename, &binary);
diff --git a/src/fstbin/fstminimizeencoded.cc b/src/fstbin/fstminimizeencoded.cc
index 1346c06..2e04dd5 100644
--- a/src/fstbin/fstminimizeencoded.cc
+++ b/src/fstbin/fstminimizeencoded.cc
@@ -36,7 +36,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Minimizes FST after encoding [similar to fstminimize, but no weight-pushing]\n"
diff --git a/src/fstbin/fstphicompose.cc b/src/fstbin/fstphicompose.cc
index 13ffcf3..196f820 100644
--- a/src/fstbin/fstphicompose.cc
+++ b/src/fstbin/fstphicompose.cc
@@ -81,7 +81,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
     /*
       fstphicompose does composition, but treats the second FST
       specially (basically, like a backoff LM); whenever the
diff --git a/src/fstbin/fstpushspecial.cc b/src/fstbin/fstpushspecial.cc
index b7428f2..308682b 100644
--- a/src/fstbin/fstpushspecial.cc
+++ b/src/fstbin/fstpushspecial.cc
@@ -31,7 +31,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Pushes weights in an FST such that all the states\n"
diff --git a/src/fstbin/fstrand.cc b/src/fstbin/fstrand.cc
index f0bc393..97a0e68 100644
--- a/src/fstbin/fstrand.cc
+++ b/src/fstbin/fstrand.cc
@@ -30,7 +30,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Generate random FST\n"
diff --git a/src/fstbin/fstrmepslocal.cc b/src/fstbin/fstrmepslocal.cc
index 3aedd6d..73f7726 100644
--- a/src/fstbin/fstrmepslocal.cc
+++ b/src/fstbin/fstrmepslocal.cc
@@ -46,7 +46,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Removes some (but not all) epsilons in an algorithm that will always reduce the number of\n"
diff --git a/src/fstbin/fstrmsymbols.cc b/src/fstbin/fstrmsymbols.cc
index a365b01..8052c6d 100644
--- a/src/fstbin/fstrmsymbols.cc
+++ b/src/fstbin/fstrmsymbols.cc
@@ -86,7 +86,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     bool apply_to_output = false;
     bool remove_arcs = false;
diff --git a/src/fstbin/fsts-concat.cc b/src/fstbin/fsts-concat.cc
index 2a217ed..ed47601 100644
--- a/src/fstbin/fsts-concat.cc
+++ b/src/fstbin/fsts-concat.cc
@@ -29,8 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Reads kaldi archives with FSTs. Concatenates the fsts from all the rspecifiers.\n"
diff --git a/src/fstbin/fsts-project.cc b/src/fstbin/fsts-project.cc
index 015f143..5fce7e5 100644
--- a/src/fstbin/fsts-project.cc
+++ b/src/fstbin/fsts-project.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Reads kaldi archive of FSTs; for each element, performs the project\n"
diff --git a/src/fstbin/fsts-to-transcripts.cc b/src/fstbin/fsts-to-transcripts.cc
index ae74d5d..e0f0be1 100644
--- a/src/fstbin/fsts-to-transcripts.cc
+++ b/src/fstbin/fsts-to-transcripts.cc
@@ -29,8 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Reads a table of FSTs; for each element, finds the best path and \n"
diff --git a/src/fstbin/fsts-union.cc b/src/fstbin/fsts-union.cc
index ed68cea..9150831 100644
--- a/src/fstbin/fsts-union.cc
+++ b/src/fstbin/fsts-union.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Reads a kaldi archive of FSTs. Performs the FST operation union on\n"
diff --git a/src/fstbin/fsttablecompose.cc b/src/fstbin/fsttablecompose.cc
index 07f8e2f..faded85 100644
--- a/src/fstbin/fsttablecompose.cc
+++ b/src/fstbin/fsttablecompose.cc
@@ -43,7 +43,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
     /*
       fsttablecompose should always give equivalent results to compose,
       but it is more efficient for certain kinds of inputs.
diff --git a/src/fstbin/make-grammar-fst.cc b/src/fstbin/make-grammar-fst.cc
index 564f255..0f788c6 100644
--- a/src/fstbin/make-grammar-fst.cc
+++ b/src/fstbin/make-grammar-fst.cc
@@ -31,7 +31,6 @@ void MakeGrammarFst(kaldi::ParseOptions po,
                     bool write_as_grammar){
   using namespace kaldi;
   using namespace fst;
-  using kaldi::int32;
 
   std::string fst_out_str = po.GetArg(po.NumArgs());
   std::string top_fst_str = po.GetArg(1);
@@ -86,7 +85,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    using kaldi::int32;
 
     const char *usage =
         "Construct GrammarFst and write it to disk (or convert it to ConstFst\n"
diff --git a/src/gmm/am-diag-gmm-test.cc b/src/gmm/am-diag-gmm-test.cc
index d40ef3d..e79412d 100644
--- a/src/gmm/am-diag-gmm-test.cc
+++ b/src/gmm/am-diag-gmm-test.cc
@@ -23,7 +23,6 @@
 #include "util/kaldi-io.h"
 
 using kaldi::AmDiagGmm;
-using kaldi::int32;
 using kaldi::BaseFloat;
 namespace ut = kaldi::unittest;
 
diff --git a/src/gmm/mle-am-diag-gmm-test.cc b/src/gmm/mle-am-diag-gmm-test.cc
index 2db7fc8..519d2c4 100644
--- a/src/gmm/mle-am-diag-gmm-test.cc
+++ b/src/gmm/mle-am-diag-gmm-test.cc
@@ -24,7 +24,6 @@
 
 using kaldi::AmDiagGmm;
 using kaldi::AccumAmDiagGmm;
-using kaldi::int32;
 using kaldi::BaseFloat;
 namespace ut = kaldi::unittest;
 using namespace kaldi;
diff --git a/src/gmmbin/gmm-acc-mllt-global.cc b/src/gmmbin/gmm-acc-mllt-global.cc
index bed91c0..28d840c 100644
--- a/src/gmmbin/gmm-acc-mllt-global.cc
+++ b/src/gmmbin/gmm-acc-mllt-global.cc
@@ -59,7 +59,6 @@ int main(int argc, char *argv[]) {
         accs_wxfilename = po.GetArg(3);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     DiagGmm gmm;
     ReadKaldiObject(gmm_filename, &gmm);
diff --git a/src/gmmbin/gmm-acc-mllt.cc b/src/gmmbin/gmm-acc-mllt.cc
index 6e57f08..c3135b6 100644
--- a/src/gmmbin/gmm-acc-mllt.cc
+++ b/src/gmmbin/gmm-acc-mllt.cc
@@ -55,7 +55,6 @@ int main(int argc, char *argv[]) {
         accs_wxfilename = po.GetArg(4);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     AmDiagGmm am_gmm;
     TransitionModel trans_model;
diff --git a/src/gmmbin/gmm-acc-stats-ali.cc b/src/gmmbin/gmm-acc-stats-ali.cc
index 5552d45..a1fb97d 100644
--- a/src/gmmbin/gmm-acc-stats-ali.cc
+++ b/src/gmmbin/gmm-acc-stats-ali.cc
@@ -29,7 +29,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Accumulate stats for GMM training.\n"
@@ -67,7 +66,7 @@ int main(int argc, char *argv[]) {
     gmm_accs.Init(am_gmm, kGmmAll);
 
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     RandomAccessInt32VectorReader alignments_reader(alignments_rspecifier);
diff --git a/src/gmmbin/gmm-acc-stats-twofeats.cc b/src/gmmbin/gmm-acc-stats-twofeats.cc
index 05f94ff..fe7b439 100644
--- a/src/gmmbin/gmm-acc-stats-twofeats.cc
+++ b/src/gmmbin/gmm-acc-stats-twofeats.cc
@@ -56,7 +56,6 @@ int main(int argc, char *argv[]) {
         accs_wxfilename = po.GetArg(5);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     AmDiagGmm am_gmm;
     TransitionModel trans_model;
diff --git a/src/gmmbin/gmm-acc-stats.cc b/src/gmmbin/gmm-acc-stats.cc
index e213fff..4255464 100644
--- a/src/gmmbin/gmm-acc-stats.cc
+++ b/src/gmmbin/gmm-acc-stats.cc
@@ -29,7 +29,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Accumulate stats for GMM training (reading in posteriors).\n"
diff --git a/src/gmmbin/gmm-acc-stats2.cc b/src/gmmbin/gmm-acc-stats2.cc
index 70730c8..16142e3 100644
--- a/src/gmmbin/gmm-acc-stats2.cc
+++ b/src/gmmbin/gmm-acc-stats2.cc
@@ -28,8 +28,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Accumulate stats for GMM training (from posteriors)\n"
diff --git a/src/gmmbin/gmm-adapt-map.cc b/src/gmmbin/gmm-adapt-map.cc
index ec3eb8c..a3be0a9 100644
--- a/src/gmmbin/gmm-adapt-map.cc
+++ b/src/gmmbin/gmm-adapt-map.cc
@@ -31,7 +31,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute MAP estimates per-utterance (default) or per-speaker for\n"
diff --git a/src/gmmbin/gmm-align-compiled.cc b/src/gmmbin/gmm-align-compiled.cc
index 3634977..3884f47 100644
--- a/src/gmmbin/gmm-align-compiled.cc
+++ b/src/gmmbin/gmm-align-compiled.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -94,7 +93,7 @@ int main(int argc, char *argv[]) {
 
     int num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
 
     for (; !fst_reader.Done(); fst_reader.Next()) {
       std::string utt = fst_reader.Key();
diff --git a/src/gmmbin/gmm-align.cc b/src/gmmbin/gmm-align.cc
index c9c2fde..6469472 100644
--- a/src/gmmbin/gmm-align.cc
+++ b/src/gmmbin/gmm-align.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -102,7 +101,7 @@ int main(int argc, char *argv[]) {
     
     int32 num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     for (; !feature_reader.Done(); feature_reader.Next()) {
       std::string utt = feature_reader.Key();
       if (!transcript_reader.HasKey(utt)) {
diff --git a/src/gmmbin/gmm-basis-fmllr-accs-gpost.cc b/src/gmmbin/gmm-basis-fmllr-accs-gpost.cc
index f8f7b5d..663bbcb 100644
--- a/src/gmmbin/gmm-basis-fmllr-accs-gpost.cc
+++ b/src/gmmbin/gmm-basis-fmllr-accs-gpost.cc
@@ -52,7 +52,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Accumulate gradient scatter from training set, either per utterance or \n"
diff --git a/src/gmmbin/gmm-basis-fmllr-accs.cc b/src/gmmbin/gmm-basis-fmllr-accs.cc
index 58b3653..a5fa1e0 100644
--- a/src/gmmbin/gmm-basis-fmllr-accs.cc
+++ b/src/gmmbin/gmm-basis-fmllr-accs.cc
@@ -54,7 +54,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Accumulate gradient scatter from training set, either per utterance or \n"
diff --git a/src/gmmbin/gmm-basis-fmllr-training.cc b/src/gmmbin/gmm-basis-fmllr-training.cc
index 3d93c3c..c946c2d 100644
--- a/src/gmmbin/gmm-basis-fmllr-training.cc
+++ b/src/gmmbin/gmm-basis-fmllr-training.cc
@@ -31,7 +31,6 @@ using std::vector;
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate fMLLR basis representation. Reads a set of gradient scatter\n"
diff --git a/src/gmmbin/gmm-boost-silence.cc b/src/gmmbin/gmm-boost-silence.cc
index 7c9e4c8..79802db 100644
--- a/src/gmmbin/gmm-boost-silence.cc
+++ b/src/gmmbin/gmm-boost-silence.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Modify GMM-based model to boost (by a certain factor) all\n"
diff --git a/src/gmmbin/gmm-compute-likes.cc b/src/gmmbin/gmm-compute-likes.cc
index 78c813e..9c0e7b6 100644
--- a/src/gmmbin/gmm-compute-likes.cc
+++ b/src/gmmbin/gmm-compute-likes.cc
@@ -30,7 +30,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/gmmbin/gmm-copy.cc b/src/gmmbin/gmm-copy.cc
index 0b33bc6..67a6aa8 100644
--- a/src/gmmbin/gmm-copy.cc
+++ b/src/gmmbin/gmm-copy.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy GMM based model (and possibly change binary/text format)\n"
diff --git a/src/gmmbin/gmm-decode-biglm-faster.cc b/src/gmmbin/gmm-decode-biglm-faster.cc
index 6e47d68..735fafa 100644
--- a/src/gmmbin/gmm-decode-biglm-faster.cc
+++ b/src/gmmbin/gmm-decode-biglm-faster.cc
@@ -69,7 +69,6 @@ int main(int argc, char *argv[])
 {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::Fst;
@@ -150,7 +149,7 @@ int main(int argc, char *argv[])
 
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     Timer timer;
diff --git a/src/gmmbin/gmm-decode-faster-regtree-fmllr.cc b/src/gmmbin/gmm-decode-faster-regtree-fmllr.cc
index ca39cbe..f26d703 100644
--- a/src/gmmbin/gmm-decode-faster-regtree-fmllr.cc
+++ b/src/gmmbin/gmm-decode-faster-regtree-fmllr.cc
@@ -83,7 +83,7 @@ bool DecodeUtterance(kaldi::FasterDecoder *decoder,
       KALDI_WARN << "Decoder did not reach end-state, outputting partial "
           "traceback.";
     
-    vector<kaldi::int32> alignment, words;
+    vector<int32> alignment, words;
     LatticeWeight weight;
     GetLinearSymbolSequence(decoded, &alignment, &words, &weight);
 
@@ -117,7 +117,6 @@ bool DecodeUtterance(kaldi::FasterDecoder *decoder,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage = "Decode features using GMM-based model.\n"
               "Usage: gmm-decode-faster-regtree-fmllr [options] model-in fst-in "
@@ -190,7 +189,7 @@ int main(int argc, char *argv[]) {
     }
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     FasterDecoder decoder(*decode_fst, decoder_opts);
 
diff --git a/src/gmmbin/gmm-decode-faster-regtree-mllr.cc b/src/gmmbin/gmm-decode-faster-regtree-mllr.cc
index 9a5d948..12faab5 100644
--- a/src/gmmbin/gmm-decode-faster-regtree-mllr.cc
+++ b/src/gmmbin/gmm-decode-faster-regtree-mllr.cc
@@ -82,7 +82,7 @@ bool DecodeUtterance(kaldi::FasterDecoder *decoder,
       KALDI_WARN << "Decoder did not reach end-state, outputting partial "
           "traceback.";
     
-    vector<kaldi::int32> alignment, words;
+    vector<int32> alignment, words;
     LatticeWeight weight;
     GetLinearSymbolSequence(decoded, &alignment, &words, &weight);
 
@@ -116,7 +116,6 @@ bool DecodeUtterance(kaldi::FasterDecoder *decoder,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage = "Decode features using GMM-based model.\n"
               "Usage: gmm-decode-faster-regtree-mllr [options] model-in fst-in "
@@ -189,7 +188,7 @@ int main(int argc, char *argv[]) {
     }
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     FasterDecoder decoder(*decode_fst, decoder_opts);
 
diff --git a/src/gmmbin/gmm-decode-faster.cc b/src/gmmbin/gmm-decode-faster.cc
index 34c4ff2..475eb48 100644
--- a/src/gmmbin/gmm-decode-faster.cc
+++ b/src/gmmbin/gmm-decode-faster.cc
@@ -67,7 +67,6 @@ fst::Fst<fst::StdArc> *ReadNetwork(std::string filename) {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Decode features using GMM-based model.\n"
@@ -132,7 +131,7 @@ int main(int argc, char *argv[]) {
     fst::Fst<fst::StdArc> *decode_fst = ReadNetwork(fst_rxfilename);
     
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     FasterDecoder decoder(*decode_fst, decoder_opts);
 
diff --git a/src/gmmbin/gmm-decode-simple.cc b/src/gmmbin/gmm-decode-simple.cc
index 5ef3555..02615ac 100644
--- a/src/gmmbin/gmm-decode-simple.cc
+++ b/src/gmmbin/gmm-decode-simple.cc
@@ -35,7 +35,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::Fst;
@@ -104,7 +103,7 @@ int main(int argc, char *argv[]) {
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     SimpleDecoder decoder(*decode_fst, beam);
 
diff --git a/src/gmmbin/gmm-est-basis-fmllr-gpost.cc b/src/gmmbin/gmm-est-basis-fmllr-gpost.cc
index 54b92d8..ec1e99f 100644
--- a/src/gmmbin/gmm-est-basis-fmllr-gpost.cc
+++ b/src/gmmbin/gmm-est-basis-fmllr-gpost.cc
@@ -52,7 +52,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Perform basis fMLLR adaptation in testing stage, either per utterance or\n"
diff --git a/src/gmmbin/gmm-est-basis-fmllr.cc b/src/gmmbin/gmm-est-basis-fmllr.cc
index 0d16316..c2e8ea5 100644
--- a/src/gmmbin/gmm-est-basis-fmllr.cc
+++ b/src/gmmbin/gmm-est-basis-fmllr.cc
@@ -54,7 +54,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Perform basis fMLLR adaptation in testing stage, either per utterance or\n"
diff --git a/src/gmmbin/gmm-est-fmllr-global.cc b/src/gmmbin/gmm-est-fmllr-global.cc
index b3af078..7bd0de9 100644
--- a/src/gmmbin/gmm-est-fmllr-global.cc
+++ b/src/gmmbin/gmm-est-fmllr-global.cc
@@ -35,7 +35,6 @@ using std::vector;
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate global fMLLR transforms, either per utterance or for the supplied\n"
diff --git a/src/gmmbin/gmm-est-fmllr-gpost.cc b/src/gmmbin/gmm-est-fmllr-gpost.cc
index d1cae0d..2b2f6e4 100644
--- a/src/gmmbin/gmm-est-fmllr-gpost.cc
+++ b/src/gmmbin/gmm-est-fmllr-gpost.cc
@@ -52,7 +52,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate global fMLLR transforms, either per utterance or for the supplied\n"
diff --git a/src/gmmbin/gmm-est-fmllr-raw-gpost.cc b/src/gmmbin/gmm-est-fmllr-raw-gpost.cc
index 1f5a09f..fa3c791 100644
--- a/src/gmmbin/gmm-est-fmllr-raw-gpost.cc
+++ b/src/gmmbin/gmm-est-fmllr-raw-gpost.cc
@@ -48,7 +48,6 @@ void AccStatsForUtterance(const TransitionModel &trans_model,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate fMLLR transforms in the space before splicing and linear transforms\n"
diff --git a/src/gmmbin/gmm-est-fmllr-raw.cc b/src/gmmbin/gmm-est-fmllr-raw.cc
index 5e83bfb..421d930 100644
--- a/src/gmmbin/gmm-est-fmllr-raw.cc
+++ b/src/gmmbin/gmm-est-fmllr-raw.cc
@@ -50,7 +50,6 @@ void AccStatsForUtterance(const TransitionModel &trans_model,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate fMLLR transforms in the space before splicing and linear transforms\n"
diff --git a/src/gmmbin/gmm-est-fmllr.cc b/src/gmmbin/gmm-est-fmllr.cc
index 9f8dfd8..cc74e6c 100644
--- a/src/gmmbin/gmm-est-fmllr.cc
+++ b/src/gmmbin/gmm-est-fmllr.cc
@@ -54,7 +54,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate global fMLLR transforms, either per utterance or for the supplied\n"
diff --git a/src/gmmbin/gmm-est-gaussians-ebw.cc b/src/gmmbin/gmm-est-gaussians-ebw.cc
index bbd53c2..d6cde80 100644
--- a/src/gmmbin/gmm-est-gaussians-ebw.cc
+++ b/src/gmmbin/gmm-est-gaussians-ebw.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Do EBW update for MMI, MPE or MCE discriminative training.\n"
diff --git a/src/gmmbin/gmm-est-lvtln-trans.cc b/src/gmmbin/gmm-est-lvtln-trans.cc
index abfc24a..afd71eb 100644
--- a/src/gmmbin/gmm-est-lvtln-trans.cc
+++ b/src/gmmbin/gmm-est-lvtln-trans.cc
@@ -50,7 +50,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate linear-VTLN transforms, either per utterance or for "
diff --git a/src/gmmbin/gmm-est-map.cc b/src/gmmbin/gmm-est-map.cc
index 22ea8ac..749c42a 100644
--- a/src/gmmbin/gmm-est-map.cc
+++ b/src/gmmbin/gmm-est-map.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     
     const char *usage =
         "Do Maximum A Posteriori re-estimation of GMM-based acoustic model\n"
diff --git a/src/gmmbin/gmm-est-regtree-fmllr-ali.cc b/src/gmmbin/gmm-est-regtree-fmllr-ali.cc
index 0158bae..f33dff5 100644
--- a/src/gmmbin/gmm-est-regtree-fmllr-ali.cc
+++ b/src/gmmbin/gmm-est-regtree-fmllr-ali.cc
@@ -30,7 +30,6 @@ using std::vector;
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute FMLLR transforms per-utterance (default) or per-speaker for "
@@ -84,7 +83,7 @@ int main(int argc, char *argv[]) {
     fmllr_accs.Init(regtree.NumBaseclasses(), am_gmm.Dim());
 
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
 
     int32 num_done = 0, num_no_alignment = 0, num_other_error = 0;
     double tot_objf_impr = 0.0, tot_t_objf = 0.0;
diff --git a/src/gmmbin/gmm-est-regtree-fmllr.cc b/src/gmmbin/gmm-est-regtree-fmllr.cc
index ca807f0..a151bcf 100644
--- a/src/gmmbin/gmm-est-regtree-fmllr.cc
+++ b/src/gmmbin/gmm-est-regtree-fmllr.cc
@@ -32,7 +32,6 @@ using std::vector;
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute FMLLR transforms per-utterance (default) or per-speaker for "
diff --git a/src/gmmbin/gmm-est-regtree-mllr.cc b/src/gmmbin/gmm-est-regtree-mllr.cc
index a4df5cc..703ff2c 100644
--- a/src/gmmbin/gmm-est-regtree-mllr.cc
+++ b/src/gmmbin/gmm-est-regtree-mllr.cc
@@ -32,7 +32,6 @@ using std::vector;
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Compute MLLR transforms per-utterance (default) or per-speaker for "
diff --git a/src/gmmbin/gmm-est-rescale.cc b/src/gmmbin/gmm-est-rescale.cc
index a432b3d..51818a3 100644
--- a/src/gmmbin/gmm-est-rescale.cc
+++ b/src/gmmbin/gmm-est-rescale.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Do \"re-scaling\" re-estimation of GMM-based model\n"
diff --git a/src/gmmbin/gmm-est-weights-ebw.cc b/src/gmmbin/gmm-est-weights-ebw.cc
index f19343a..a7c03cc 100644
--- a/src/gmmbin/gmm-est-weights-ebw.cc
+++ b/src/gmmbin/gmm-est-weights-ebw.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Do EBW update on weights for MMI, MPE or MCE discriminative training.\n"
diff --git a/src/gmmbin/gmm-est.cc b/src/gmmbin/gmm-est.cc
index 18c836a..c7b111a 100644
--- a/src/gmmbin/gmm-est.cc
+++ b/src/gmmbin/gmm-est.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Do Maximum Likelihood re-estimation of GMM-based acoustic model\n"
diff --git a/src/gmmbin/gmm-fmpe-acc-stats.cc b/src/gmmbin/gmm-fmpe-acc-stats.cc
index 4868b63..6a78ea3 100644
--- a/src/gmmbin/gmm-fmpe-acc-stats.cc
+++ b/src/gmmbin/gmm-fmpe-acc-stats.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  using kaldi::int32;
   try {
     const char *usage =
         "Accumulate stats for fMPE training, using GMM model.  Note: this could\n"
diff --git a/src/gmmbin/gmm-get-stats-deriv.cc b/src/gmmbin/gmm-get-stats-deriv.cc
index 939fe26..fc7b126 100644
--- a/src/gmmbin/gmm-get-stats-deriv.cc
+++ b/src/gmmbin/gmm-get-stats-deriv.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     MleDiagGmmOptions gmm_opts;
     
     const char *usage =
diff --git a/src/gmmbin/gmm-global-copy.cc b/src/gmmbin/gmm-global-copy.cc
index af31b03..b198d74 100644
--- a/src/gmmbin/gmm-global-copy.cc
+++ b/src/gmmbin/gmm-global-copy.cc
@@ -24,7 +24,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a diagonal-covariance GMM\n"
diff --git a/src/gmmbin/gmm-global-est-fmllr.cc b/src/gmmbin/gmm-global-est-fmllr.cc
index b1d5b68..9a661a0 100644
--- a/src/gmmbin/gmm-global-est-fmllr.cc
+++ b/src/gmmbin/gmm-global-est-fmllr.cc
@@ -82,7 +82,6 @@ bool AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate global fMLLR transforms, either per utterance or for the supplied\n"
diff --git a/src/gmmbin/gmm-global-est-lvtln-trans.cc b/src/gmmbin/gmm-global-est-lvtln-trans.cc
index 10bb5be..bfe584b 100644
--- a/src/gmmbin/gmm-global-est-lvtln-trans.cc
+++ b/src/gmmbin/gmm-global-est-lvtln-trans.cc
@@ -56,7 +56,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate linear-VTLN transforms, either per utterance or for "
diff --git a/src/gmmbin/gmm-global-est.cc b/src/gmmbin/gmm-global-est.cc
index 17d3f36..78ad240 100644
--- a/src/gmmbin/gmm-global-est.cc
+++ b/src/gmmbin/gmm-global-est.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     MleDiagGmmOptions gmm_opts;
 
diff --git a/src/gmmbin/gmm-global-get-post.cc b/src/gmmbin/gmm-global-get-post.cc
index b364c33..a8e9266 100644
--- a/src/gmmbin/gmm-global-get-post.cc
+++ b/src/gmmbin/gmm-global-get-post.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using std::vector;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Precompute Gaussian indices and convert immediately to top-n\n"
         "posteriors (useful in iVector extraction with diagonal UBMs)\n"
@@ -68,7 +67,7 @@ int main(int argc, char *argv[]) {
     }
     
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
     
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     PosteriorWriter post_writer(post_wspecifier);
diff --git a/src/gmmbin/gmm-global-gselect-to-post.cc b/src/gmmbin/gmm-global-gselect-to-post.cc
index 0fe2366..f2ed73e 100644
--- a/src/gmmbin/gmm-global-gselect-to-post.cc
+++ b/src/gmmbin/gmm-global-gselect-to-post.cc
@@ -27,8 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Given features and Gaussian-selection (gselect) information for\n"
diff --git a/src/gmmbin/gmm-global-info.cc b/src/gmmbin/gmm-global-info.cc
index 7c21005..a173495 100644
--- a/src/gmmbin/gmm-global-info.cc
+++ b/src/gmmbin/gmm-global-info.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Write to standard output various properties of GMM model\n"
diff --git a/src/gmmbin/gmm-global-sum-accs.cc b/src/gmmbin/gmm-global-sum-accs.cc
index e7ad2c8..8c42579 100644
--- a/src/gmmbin/gmm-global-sum-accs.cc
+++ b/src/gmmbin/gmm-global-sum-accs.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Sum multiple accumulated stats files for diagonal-covariance GMM "
diff --git a/src/gmmbin/gmm-global-to-fgmm.cc b/src/gmmbin/gmm-global-to-fgmm.cc
index d16a8bf..8b5fc82 100644
--- a/src/gmmbin/gmm-global-to-fgmm.cc
+++ b/src/gmmbin/gmm-global-to-fgmm.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Convert single diagonal-covariance GMM to single full-covariance GMM.\n"
diff --git a/src/gmmbin/gmm-gselect.cc b/src/gmmbin/gmm-gselect.cc
index a873b96..ca47f80 100644
--- a/src/gmmbin/gmm-gselect.cc
+++ b/src/gmmbin/gmm-gselect.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using std::vector;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Precompute Gaussian indices for pruning\n"
         " (e.g. in training UBMs, SGMMs, tied-mixture systems)\n"
@@ -73,7 +72,7 @@ int main(int argc, char *argv[]) {
     }
     
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
     
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     Int32VectorVectorWriter gselect_writer(gselect_wspecifier);
diff --git a/src/gmmbin/gmm-info.cc b/src/gmmbin/gmm-info.cc
index 31f7aea..c935e6e 100644
--- a/src/gmmbin/gmm-info.cc
+++ b/src/gmmbin/gmm-info.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Write to standard output various properties of GMM-based model\n"
diff --git a/src/gmmbin/gmm-init-biphone.cc b/src/gmmbin/gmm-init-biphone.cc
index 18f7b68..5098cd0 100644
--- a/src/gmmbin/gmm-init-biphone.cc
+++ b/src/gmmbin/gmm-init-biphone.cc
@@ -254,7 +254,6 @@ static void ReadPhoneCounts(std::string &filename, int32 num_phones,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Initialize a biphone context-dependency tree with all the\n"
diff --git a/src/gmmbin/gmm-init-lvtln.cc b/src/gmmbin/gmm-init-lvtln.cc
index 0a896c5..f0b0c8c 100644
--- a/src/gmmbin/gmm-init-lvtln.cc
+++ b/src/gmmbin/gmm-init-lvtln.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Initialize lvtln transforms\n"
diff --git a/src/gmmbin/gmm-init-model-flat.cc b/src/gmmbin/gmm-init-model-flat.cc
index fecd91f..62a50cf 100644
--- a/src/gmmbin/gmm-init-model-flat.cc
+++ b/src/gmmbin/gmm-init-model-flat.cc
@@ -71,7 +71,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize GMM, with Gaussians initialized to mean and variance\n"
diff --git a/src/gmmbin/gmm-init-model.cc b/src/gmmbin/gmm-init-model.cc
index e2d943b..a467c81 100644
--- a/src/gmmbin/gmm-init-model.cc
+++ b/src/gmmbin/gmm-init-model.cc
@@ -221,7 +221,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize GMM from decision tree and tree stats\n"
diff --git a/src/gmmbin/gmm-init-mono.cc b/src/gmmbin/gmm-init-mono.cc
index 3c370c3..cbeeca9 100644
--- a/src/gmmbin/gmm-init-mono.cc
+++ b/src/gmmbin/gmm-init-mono.cc
@@ -53,7 +53,6 @@ void ReadSharedPhonesList(std::string rxfilename, std::vector<std::vector<int32>
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Initialize monophone GMM.\n"
diff --git a/src/gmmbin/gmm-ismooth-stats.cc b/src/gmmbin/gmm-ismooth-stats.cc
index b29e1ef..751e448 100644
--- a/src/gmmbin/gmm-ismooth-stats.cc
+++ b/src/gmmbin/gmm-ismooth-stats.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Apply I-smoothing to statistics, e.g. for discriminative training\n"
diff --git a/src/gmmbin/gmm-latgen-biglm-faster.cc b/src/gmmbin/gmm-latgen-biglm-faster.cc
index d4e0645..ea7a925 100644
--- a/src/gmmbin/gmm-latgen-biglm-faster.cc
+++ b/src/gmmbin/gmm-latgen-biglm-faster.cc
@@ -143,7 +143,6 @@ bool DecodeUtterance(LatticeBiglmFasterDecoder &decoder, // not const but is rea
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::Fst;
@@ -227,7 +226,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
 
diff --git a/src/gmmbin/gmm-latgen-faster-parallel.cc b/src/gmmbin/gmm-latgen-faster-parallel.cc
index 41f414b..d711f17 100644
--- a/src/gmmbin/gmm-latgen-faster-parallel.cc
+++ b/src/gmmbin/gmm-latgen-faster-parallel.cc
@@ -36,7 +36,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::Fst;
@@ -110,7 +109,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_done = 0, num_err = 0;
     Fst<StdArc> *decode_fst = NULL; // only used if there is a single
                                           // decoding graph.
diff --git a/src/gmmbin/gmm-latgen-faster-regtree-fmllr.cc b/src/gmmbin/gmm-latgen-faster-regtree-fmllr.cc
index 36031b1..5083bc7 100644
--- a/src/gmmbin/gmm-latgen-faster-regtree-fmllr.cc
+++ b/src/gmmbin/gmm-latgen-faster-regtree-fmllr.cc
@@ -37,7 +37,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -117,7 +116,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_done = 0, num_err = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
diff --git a/src/gmmbin/gmm-latgen-faster.cc b/src/gmmbin/gmm-latgen-faster.cc
index 6bc475d..a5846ef 100644
--- a/src/gmmbin/gmm-latgen-faster.cc
+++ b/src/gmmbin/gmm-latgen-faster.cc
@@ -34,7 +34,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -100,7 +99,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_done = 0, num_err = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
diff --git a/src/gmmbin/gmm-latgen-map.cc b/src/gmmbin/gmm-latgen-map.cc
index ccc15f5..2d2bb21 100644
--- a/src/gmmbin/gmm-latgen-map.cc
+++ b/src/gmmbin/gmm-latgen-map.cc
@@ -39,7 +39,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using std::string;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -121,7 +120,7 @@ int main(int argc, char *argv[]) {
     }
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     Timer timer;
 
diff --git a/src/gmmbin/gmm-latgen-simple.cc b/src/gmmbin/gmm-latgen-simple.cc
index 812bee7..1a244e7 100644
--- a/src/gmmbin/gmm-latgen-simple.cc
+++ b/src/gmmbin/gmm-latgen-simple.cc
@@ -35,7 +35,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -103,7 +102,7 @@ int main(int argc, char *argv[]) {
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     LatticeSimpleDecoder decoder(*decode_fst, config);
 
diff --git a/src/gmmbin/gmm-make-regtree.cc b/src/gmmbin/gmm-make-regtree.cc
index 8c79d01..7b40681 100644
--- a/src/gmmbin/gmm-make-regtree.cc
+++ b/src/gmmbin/gmm-make-regtree.cc
@@ -28,7 +28,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     typedef kaldi::BaseFloat BaseFloat;
 
     const char *usage =
diff --git a/src/gmmbin/gmm-mixup.cc b/src/gmmbin/gmm-mixup.cc
index a76b380..0f102c5 100644
--- a/src/gmmbin/gmm-mixup.cc
+++ b/src/gmmbin/gmm-mixup.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Does GMM mixing up (and Gaussian merging)\n"
diff --git a/src/gmmbin/gmm-post-to-gpost.cc b/src/gmmbin/gmm-post-to-gpost.cc
index 59da0f9..eea480d 100644
--- a/src/gmmbin/gmm-post-to-gpost.cc
+++ b/src/gmmbin/gmm-post-to-gpost.cc
@@ -53,7 +53,6 @@ int main(int argc, char *argv[]) {
         gpost_wspecifier = po.GetArg(4);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     AmDiagGmm am_gmm;
     TransitionModel trans_model;
diff --git a/src/gmmbin/gmm-rescore-lattice.cc b/src/gmmbin/gmm-rescore-lattice.cc
index 5415644..37e50be 100644
--- a/src/gmmbin/gmm-rescore-lattice.cc
+++ b/src/gmmbin/gmm-rescore-lattice.cc
@@ -31,8 +31,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/gmmbin/gmm-sum-accs.cc b/src/gmmbin/gmm-sum-accs.cc
index c9886e8..28070cd 100644
--- a/src/gmmbin/gmm-sum-accs.cc
+++ b/src/gmmbin/gmm-sum-accs.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Sum multiple accumulated stats files for GMM training.\n"
diff --git a/src/gmmbin/gmm-train-lvtln-special.cc b/src/gmmbin/gmm-train-lvtln-special.cc
index e1eebe7..8faab37 100644
--- a/src/gmmbin/gmm-train-lvtln-special.cc
+++ b/src/gmmbin/gmm-train-lvtln-special.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Set one of the transforms in lvtln to the minimum-squared-error solution\n"
diff --git a/src/gmmbin/gmm-transform-means-global.cc b/src/gmmbin/gmm-transform-means-global.cc
index 6b1a6be..aec6e4e 100644
--- a/src/gmmbin/gmm-transform-means-global.cc
+++ b/src/gmmbin/gmm-transform-means-global.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Transform GMM means with linear or affine transform\n"
diff --git a/src/gmmbin/gmm-transform-means.cc b/src/gmmbin/gmm-transform-means.cc
index 5c08ec3..1964d38 100644
--- a/src/gmmbin/gmm-transform-means.cc
+++ b/src/gmmbin/gmm-transform-means.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Transform GMM means with linear or affine transform\n"
diff --git a/src/ivectorbin/agglomerative-cluster.cc b/src/ivectorbin/agglomerative-cluster.cc
index 4812dd2..514f3f0 100644
--- a/src/ivectorbin/agglomerative-cluster.cc
+++ b/src/ivectorbin/agglomerative-cluster.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Cluster utterances by similarity score, used in diarization.\n"
diff --git a/src/ivectorbin/compute-eer.cc b/src/ivectorbin/compute-eer.cc
index 22f1146..06e0dd1 100644
--- a/src/ivectorbin/compute-eer.cc
+++ b/src/ivectorbin/compute-eer.cc
@@ -76,7 +76,6 @@ BaseFloat ComputeEer(std::vector<BaseFloat> *target_scores,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Computes Equal Error Rate\n"
diff --git a/src/ivectorbin/compute-vad-from-frame-likes.cc b/src/ivectorbin/compute-vad-from-frame-likes.cc
index 4ad9ac8..dfedf22 100644
--- a/src/ivectorbin/compute-vad-from-frame-likes.cc
+++ b/src/ivectorbin/compute-vad-from-frame-likes.cc
@@ -97,7 +97,6 @@ void PreparePriors(const std::string &priors_str, int32 num_classes,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "This program computes frame-level voice activity decisions from a\n"
diff --git a/src/ivectorbin/compute-vad.cc b/src/ivectorbin/compute-vad.cc
index 6748c87..7f4758c 100644
--- a/src/ivectorbin/compute-vad.cc
+++ b/src/ivectorbin/compute-vad.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "This program reads input features and writes out, for each utterance,\n"
diff --git a/src/ivectorbin/ivector-adapt-plda.cc b/src/ivectorbin/ivector-adapt-plda.cc
index 4f5d925..35e483e 100644
--- a/src/ivectorbin/ivector-adapt-plda.cc
+++ b/src/ivectorbin/ivector-adapt-plda.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Adapt a PLDA object using unsupervised adaptation-data iVectors from a different\n"
diff --git a/src/ivectorbin/ivector-compute-dot-products.cc b/src/ivectorbin/ivector-compute-dot-products.cc
index 2f055dd..010a3a9 100644
--- a/src/ivectorbin/ivector-compute-dot-products.cc
+++ b/src/ivectorbin/ivector-compute-dot-products.cc
@@ -27,8 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Computes dot-products between iVectors; useful in application of an\n"
diff --git a/src/ivectorbin/ivector-compute-lda.cc b/src/ivectorbin/ivector-compute-lda.cc
index 02246a9..23d30e7 100644
--- a/src/ivectorbin/ivector-compute-lda.cc
+++ b/src/ivectorbin/ivector-compute-lda.cc
@@ -204,7 +204,6 @@ void ComputeAndSubtractMean(
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Compute an LDA matrix for iVector system.  Reads in iVectors per utterance,\n"
diff --git a/src/ivectorbin/ivector-compute-plda.cc b/src/ivectorbin/ivector-compute-plda.cc
index c955f07..1bcb5d9 100644
--- a/src/ivectorbin/ivector-compute-plda.cc
+++ b/src/ivectorbin/ivector-compute-plda.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Computes a Plda object (for Probabilistic Linear Discriminant Analysis)\n"
diff --git a/src/ivectorbin/ivector-copy-plda.cc b/src/ivectorbin/ivector-copy-plda.cc
index a7a9afd..cd4a182 100644
--- a/src/ivectorbin/ivector-copy-plda.cc
+++ b/src/ivectorbin/ivector-copy-plda.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Copy a PLDA object, possibly applying smoothing to the within-class\n"
diff --git a/src/ivectorbin/ivector-extract-online.cc b/src/ivectorbin/ivector-extract-online.cc
index 38dc521..80bfe9e 100644
--- a/src/ivectorbin/ivector-extract-online.cc
+++ b/src/ivectorbin/ivector-extract-online.cc
@@ -26,8 +26,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Extract iVectors for utterances, using a trained iVector extractor,\n"
diff --git a/src/ivectorbin/ivector-extract.cc b/src/ivectorbin/ivector-extract.cc
index 3ae5d7f..73070ed 100644
--- a/src/ivectorbin/ivector-extract.cc
+++ b/src/ivectorbin/ivector-extract.cc
@@ -209,8 +209,6 @@ int32 RunPerSpeaker(const std::string &ivector_extractor_rxfilename,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Extract iVectors for utterances, using a trained iVector extractor,\n"
diff --git a/src/ivectorbin/ivector-extractor-acc-stats.cc b/src/ivectorbin/ivector-extractor-acc-stats.cc
index 5c2e691..c80d9c5 100644
--- a/src/ivectorbin/ivector-extractor-acc-stats.cc
+++ b/src/ivectorbin/ivector-extractor-acc-stats.cc
@@ -61,8 +61,6 @@ class IvectorTask {
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Accumulate stats for iVector extractor training\n"
diff --git a/src/ivectorbin/ivector-extractor-copy.cc b/src/ivectorbin/ivector-extractor-copy.cc
index f04a6d2..ec6f870 100644
--- a/src/ivectorbin/ivector-extractor-copy.cc
+++ b/src/ivectorbin/ivector-extractor-copy.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Copy the i-vector extractor to a text file\n"
diff --git a/src/ivectorbin/ivector-extractor-est.cc b/src/ivectorbin/ivector-extractor-est.cc
index 4f4b415..07d7e76 100644
--- a/src/ivectorbin/ivector-extractor-est.cc
+++ b/src/ivectorbin/ivector-extractor-est.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
 
     const char *usage =
diff --git a/src/ivectorbin/ivector-extractor-init.cc b/src/ivectorbin/ivector-extractor-init.cc
index 35f1699..7ab5fd0 100644
--- a/src/ivectorbin/ivector-extractor-init.cc
+++ b/src/ivectorbin/ivector-extractor-init.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Initialize ivector-extractor\n"
diff --git a/src/ivectorbin/ivector-extractor-sum-accs.cc b/src/ivectorbin/ivector-extractor-sum-accs.cc
index 96c7c0f..62a4319 100644
--- a/src/ivectorbin/ivector-extractor-sum-accs.cc
+++ b/src/ivectorbin/ivector-extractor-sum-accs.cc
@@ -23,7 +23,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
 
     const char *usage =
diff --git a/src/ivectorbin/ivector-mean.cc b/src/ivectorbin/ivector-mean.cc
index 6e6117c..6f7d6cf 100644
--- a/src/ivectorbin/ivector-mean.cc
+++ b/src/ivectorbin/ivector-mean.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "With 3 or 4 arguments, averages iVectors over all the\n"
diff --git a/src/ivectorbin/ivector-normalize-length.cc b/src/ivectorbin/ivector-normalize-length.cc
index 209c888..42c231f 100644
--- a/src/ivectorbin/ivector-normalize-length.cc
+++ b/src/ivectorbin/ivector-normalize-length.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Normalize length of iVectors to equal sqrt(feature-dimension)\n"
diff --git a/src/ivectorbin/ivector-plda-scoring-dense.cc b/src/ivectorbin/ivector-plda-scoring-dense.cc
index e96f7de..ae16f79 100644
--- a/src/ivectorbin/ivector-plda-scoring-dense.cc
+++ b/src/ivectorbin/ivector-plda-scoring-dense.cc
@@ -113,7 +113,6 @@ void ApplyPca(const Matrix<BaseFloat> &ivectors_in,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Perform PLDA scoring for speaker diarization.  The input reco2utt\n"
diff --git a/src/ivectorbin/ivector-plda-scoring.cc b/src/ivectorbin/ivector-plda-scoring.cc
index 46be441..1510fa5 100644
--- a/src/ivectorbin/ivector-plda-scoring.cc
+++ b/src/ivectorbin/ivector-plda-scoring.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   typedef std::string string;
   try {
     const char *usage =
diff --git a/src/ivectorbin/ivector-subtract-global-mean.cc b/src/ivectorbin/ivector-subtract-global-mean.cc
index 4083580..f0d5861 100644
--- a/src/ivectorbin/ivector-subtract-global-mean.cc
+++ b/src/ivectorbin/ivector-subtract-global-mean.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Copies a table of iVectors but subtracts the global mean as\n"
diff --git a/src/ivectorbin/ivector-transform.cc b/src/ivectorbin/ivector-transform.cc
index b5a7567..54782cd 100644
--- a/src/ivectorbin/ivector-transform.cc
+++ b/src/ivectorbin/ivector-transform.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Multiplies iVectors (on the left) by a supplied transformation matrix\n"
diff --git a/src/ivectorbin/logistic-regression-copy.cc b/src/ivectorbin/logistic-regression-copy.cc
index b70d750..4fc3375 100644
--- a/src/ivectorbin/logistic-regression-copy.cc
+++ b/src/ivectorbin/logistic-regression-copy.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Copy a logistic-regression model, possibly changing the binary mode;\n"
diff --git a/src/ivectorbin/logistic-regression-eval.cc b/src/ivectorbin/logistic-regression-eval.cc
index 85f5819..ec31ac4 100644
--- a/src/ivectorbin/logistic-regression-eval.cc
+++ b/src/ivectorbin/logistic-regression-eval.cc
@@ -116,7 +116,6 @@ int32 ComputeScores(ParseOptions &po, const LogisticRegressionConfig &config,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Evaluates a model on input vectors and outputs either\n"
diff --git a/src/ivectorbin/logistic-regression-train.cc b/src/ivectorbin/logistic-regression-train.cc
index 098665a..53019bc 100644
--- a/src/ivectorbin/logistic-regression-train.cc
+++ b/src/ivectorbin/logistic-regression-train.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Trains a model using Logistic Regression with L-BFGS from\n"
diff --git a/src/ivectorbin/merge-vads.cc b/src/ivectorbin/merge-vads.cc
index 6f65835..4608a36 100644
--- a/src/ivectorbin/merge-vads.cc
+++ b/src/ivectorbin/merge-vads.cc
@@ -84,7 +84,6 @@ void PrepareMap(const std::string map_rxfilename,
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "This program merges two archives of per-frame weights representing\n"
diff --git a/src/ivectorbin/select-voiced-frames.cc b/src/ivectorbin/select-voiced-frames.cc
index 18e6009..35c7b1d 100644
--- a/src/ivectorbin/select-voiced-frames.cc
+++ b/src/ivectorbin/select-voiced-frames.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    using kaldi::int32;
 
     const char *usage =
         "Select a subset of frames of the input files, based on the output of\n"
diff --git a/src/kwsbin/compute-atwv.cc b/src/kwsbin/compute-atwv.cc
index e2eb8fc..d2237ef 100644
--- a/src/kwsbin/compute-atwv.cc
+++ b/src/kwsbin/compute-atwv.cc
@@ -31,10 +31,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint32 uint32;
-    typedef kaldi::uint64 uint64;
-
     const char *usage = "Computes the Actual Term-Weighted Value and prints it."
         "\n"
         "Usage: \n"
diff --git a/src/kwsbin/generate-proxy-keywords.cc b/src/kwsbin/generate-proxy-keywords.cc
index 253969b..79b8b1a 100644
--- a/src/kwsbin/generate-proxy-keywords.cc
+++ b/src/kwsbin/generate-proxy-keywords.cc
@@ -61,8 +61,6 @@ int main(int argc, char *argv[]) {
     using namespace fst;
     using std::vector;
     using std::string;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
     typedef StdArc::StateId StateId;
     typedef StdArc::Weight Weight;
 
diff --git a/src/kwsbin/kws-index-union.cc b/src/kwsbin/kws-index-union.cc
index cd82ede..0bdc703 100644
--- a/src/kwsbin/kws-index-union.cc
+++ b/src/kwsbin/kws-index-union.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Take a union of the indexed lattices. The input index is in "
diff --git a/src/kwsbin/kws-search.cc b/src/kwsbin/kws-search.cc
index 8e2b2a8..ed4fcaa 100644
--- a/src/kwsbin/kws-search.cc
+++ b/src/kwsbin/kws-search.cc
@@ -160,9 +160,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
     using std::vector;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint32 uint32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Search the keywords over the index. This program can be executed\n"
@@ -305,7 +302,7 @@ int main(int argc, char *argv[]) {
 
       KwsLexicographicFst keyword_fst;
       KwsLexicographicFst result_fst;
-      Map(keyword, &keyword_fst, VectorFstToKwsLexicographicFstMapper());
+      ArcMap(keyword, &keyword_fst, VectorFstToKwsLexicographicFstMapper());
       Compose(keyword_fst, index, &result_fst);
 
       if (stats_wspecifier != "") {
diff --git a/src/kwsbin/lattice-to-kws-index.cc b/src/kwsbin/lattice-to-kws-index.cc
index fcd6b82..cd8812b 100644
--- a/src/kwsbin/lattice-to-kws-index.cc
+++ b/src/kwsbin/lattice-to-kws-index.cc
@@ -32,8 +32,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using fst::VectorFst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Create an inverted index of the given lattices. The output index is \n"
diff --git a/src/kwsbin/print-proxy-keywords.cc b/src/kwsbin/print-proxy-keywords.cc
index 5f60884..21a1c3f 100644
--- a/src/kwsbin/print-proxy-keywords.cc
+++ b/src/kwsbin/print-proxy-keywords.cc
@@ -59,8 +59,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
     typedef StdArc::StateId StateId;
     typedef StdArc::Weight Weight;
 
diff --git a/src/kwsbin/transcripts-to-fsts.cc b/src/kwsbin/transcripts-to-fsts.cc
index ecf76ed..6ffc0ac 100644
--- a/src/kwsbin/transcripts-to-fsts.cc
+++ b/src/kwsbin/transcripts-to-fsts.cc
@@ -41,8 +41,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace fst;
-    typedef kaldi::int32 int32;
-    typedef kaldi::uint64 uint64;
 
     const char *usage =
         "Build a linear acceptor for each transcription in the archive. "
diff --git a/src/lat/determinize-lattice-pruned-test.cc b/src/lat/determinize-lattice-pruned-test.cc
index f6684f0..9ac2a9e 100644
--- a/src/lat/determinize-lattice-pruned-test.cc
+++ b/src/lat/determinize-lattice-pruned-test.cc
@@ -34,7 +34,7 @@ namespace fst {
 // FSTs (not guaranteed determinzable, but we use the
 // max-states option to stop it getting out of control).
 template<class Arc> void TestDeterminizeLatticePruned() {
-  typedef kaldi::int32 Int;
+  typedef int32 Int;
   typedef typename Arc::Weight Weight;
   typedef ArcTpl<CompactLatticeWeightTpl<Weight, Int> > CompactArc;
 
diff --git a/src/lat/kaldi-lattice.h b/src/lat/kaldi-lattice.h
index dc9f3a7..0e91185 100644
--- a/src/lat/kaldi-lattice.h
+++ b/src/lat/kaldi-lattice.h
@@ -31,7 +31,7 @@ namespace kaldi {
 
 typedef fst::LatticeWeightTpl<BaseFloat> LatticeWeight;
 
-// careful: kaldi::int32 is not always the same C type as fst::int32
+// careful: int32 is not always the same C type as fst::int32
 typedef fst::CompactLatticeWeightTpl<LatticeWeight, int32> CompactLatticeWeight;
 
 typedef fst::CompactLatticeWeightCommonDivisorTpl<LatticeWeight, int32>
diff --git a/src/lat/minimize-lattice-test.cc b/src/lat/minimize-lattice-test.cc
index d976dab..44fe99e 100644
--- a/src/lat/minimize-lattice-test.cc
+++ b/src/lat/minimize-lattice-test.cc
@@ -64,7 +64,6 @@ void TestMinimizeCompactLattice() {
 
 int main() {
   using namespace kaldi;
-  using kaldi::int32;
   SetVerboseLevel(4);
   for (int32 i = 0; i < 1000; i++) {
     TestMinimizeCompactLattice();
diff --git a/src/lat/push-lattice-test.cc b/src/lat/push-lattice-test.cc
index c264329..4d05d44 100644
--- a/src/lat/push-lattice-test.cc
+++ b/src/lat/push-lattice-test.cc
@@ -111,7 +111,6 @@ void TestPushCompactLatticeWeights() {
 
 int main() {
   using namespace kaldi;
-  using kaldi::int32;
   for (int32 i = 0; i < 15; i++) {
     TestPushCompactLatticeStrings();
     TestPushCompactLatticeWeights();
diff --git a/src/latbin/lattice-1best.cc b/src/latbin/lattice-1best.cc
index 4081100..f92b0ae 100644
--- a/src/latbin/lattice-1best.cc
+++ b/src/latbin/lattice-1best.cc
@@ -29,8 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::VectorFst;
     using fst::StdArc;
 
diff --git a/src/latbin/lattice-add-nnlmscore.cc b/src/latbin/lattice-add-nnlmscore.cc
index 8c0aa4e..6f65b3d 100644
--- a/src/latbin/lattice-add-nnlmscore.cc
+++ b/src/latbin/lattice-add-nnlmscore.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Add estimated neural language model scores of all arcs in a lattice\n"
diff --git a/src/latbin/lattice-add-penalty.cc b/src/latbin/lattice-add-penalty.cc
index 74620da..eb4d6c0 100644
--- a/src/latbin/lattice-add-penalty.cc
+++ b/src/latbin/lattice-add-penalty.cc
@@ -22,7 +22,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Add word insertion penalty to the lattice.\n"
diff --git a/src/latbin/lattice-add-trans-probs.cc b/src/latbin/lattice-add-trans-probs.cc
index 9e88738..5ced929 100644
--- a/src/latbin/lattice-add-trans-probs.cc
+++ b/src/latbin/lattice-add-trans-probs.cc
@@ -29,8 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-align-phones.cc b/src/latbin/lattice-align-phones.cc
index 6cfd7fd..88a4fea 100644
--- a/src/latbin/lattice-align-phones.cc
+++ b/src/latbin/lattice-align-phones.cc
@@ -29,7 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using fst::StdArc;
-    using kaldi::int32;
 
     const char *usage =
         "Convert lattices so that the arcs in the CompactLattice format correspond with\n"
diff --git a/src/latbin/lattice-align-words-lexicon.cc b/src/latbin/lattice-align-words-lexicon.cc
index 5d209da..1d0ef53 100644
--- a/src/latbin/lattice-align-words-lexicon.cc
+++ b/src/latbin/lattice-align-words-lexicon.cc
@@ -29,7 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using fst::StdArc;
-    using kaldi::int32;
 
     const char *usage =
         "Convert lattices so that the arcs in the CompactLattice format correspond with\n"
diff --git a/src/latbin/lattice-align-words.cc b/src/latbin/lattice-align-words.cc
index 50c613b..3c4eee3 100644
--- a/src/latbin/lattice-align-words.cc
+++ b/src/latbin/lattice-align-words.cc
@@ -29,7 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using fst::StdArc;
-    using kaldi::int32;
 
     const char *usage =
         "Convert lattices so that the arcs in the CompactLattice format correspond with\n"
diff --git a/src/latbin/lattice-arc-post.cc b/src/latbin/lattice-arc-post.cc
index 0aca9cd..7a1a11b 100644
--- a/src/latbin/lattice-arc-post.cc
+++ b/src/latbin/lattice-arc-post.cc
@@ -112,7 +112,6 @@ class ArcPosteriorComputer {
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-best-path.cc b/src/latbin/lattice-best-path.cc
index ce9016d..eb31759 100644
--- a/src/latbin/lattice-best-path.cc
+++ b/src/latbin/lattice-best-path.cc
@@ -27,8 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-boost-ali.cc b/src/latbin/lattice-boost-ali.cc
index 6a91092..09c8931 100644
--- a/src/latbin/lattice-boost-ali.cc
+++ b/src/latbin/lattice-boost-ali.cc
@@ -26,7 +26,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-combine.cc b/src/latbin/lattice-combine.cc
index 8a0b54f..00e1bc3 100644
--- a/src/latbin/lattice-combine.cc
+++ b/src/latbin/lattice-combine.cc
@@ -122,7 +122,6 @@ void SplitStringToWeights(const string &full, const char *delim,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Combine lattices generated by different systems by removing the total\n"
diff --git a/src/latbin/lattice-compose.cc b/src/latbin/lattice-compose.cc
index d191b07..faf4982 100644
--- a/src/latbin/lattice-compose.cc
+++ b/src/latbin/lattice-compose.cc
@@ -27,8 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -126,9 +124,9 @@ int main(int argc, char *argv[]) {
       // with all the cost on the first member of the pair (since we're
       // assuming it's a graph weight).
       fst::CacheOptions cache_opts(true, num_states_cache);
-      fst::MapFstOptions mapfst_opts(cache_opts);
+      fst::ArcMapFstOptions mapfst_opts(cache_opts);
       fst::StdToLatticeMapper<BaseFloat> mapper;
-      fst::MapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
+      fst::ArcMapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
           mapped_fst2(*fst2, mapper, mapfst_opts);
 
       for (; !lattice_reader1.Done(); lattice_reader1.Next()) {
@@ -265,9 +263,9 @@ int main(int argc, char *argv[]) {
         // with all the cost on the first member of the pair (since we're
         // assuming it's a graph weight).
         fst::CacheOptions cache_opts(true, num_states_cache);
-        fst::MapFstOptions mapfst_opts(cache_opts);
+        fst::ArcMapFstOptions mapfst_opts(cache_opts);
         fst::StdToLatticeMapper<BaseFloat> mapper;
-        fst::MapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
+        fst::ArcMapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
             mapped_fst2(fst2, mapper, mapfst_opts);
 
         // sort lat1 on olabel.
diff --git a/src/latbin/lattice-confidence.cc b/src/latbin/lattice-confidence.cc
index 56cf5ba..2fd262c 100644
--- a/src/latbin/lattice-confidence.cc
+++ b/src/latbin/lattice-confidence.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-copy-backoff.cc b/src/latbin/lattice-copy-backoff.cc
index 41f898d..fbcb292 100644
--- a/src/latbin/lattice-copy-backoff.cc
+++ b/src/latbin/lattice-copy-backoff.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Copy a table of lattices (1st argument), but for any keys that appear\n"
diff --git a/src/latbin/lattice-copy.cc b/src/latbin/lattice-copy.cc
index 22bddef..0ecbef7 100644
--- a/src/latbin/lattice-copy.cc
+++ b/src/latbin/lattice-copy.cc
@@ -131,8 +131,6 @@ namespace kaldi {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-depth-per-frame.cc b/src/latbin/lattice-depth-per-frame.cc
index 82c8bea..5bde76e 100644
--- a/src/latbin/lattice-depth-per-frame.cc
+++ b/src/latbin/lattice-depth-per-frame.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-depth.cc b/src/latbin/lattice-depth.cc
index 9a785c4..1695bcc 100644
--- a/src/latbin/lattice-depth.cc
+++ b/src/latbin/lattice-depth.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-determinize-non-compact.cc b/src/latbin/lattice-determinize-non-compact.cc
index 7d61d3e..e35d625 100644
--- a/src/latbin/lattice-determinize-non-compact.cc
+++ b/src/latbin/lattice-determinize-non-compact.cc
@@ -95,8 +95,6 @@ bool DeterminizeLatticeWrapper(const Lattice &lat,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-determinize-phone-pruned-parallel.cc b/src/latbin/lattice-determinize-phone-pruned-parallel.cc
index 6d273d4..6c46e7b 100644
--- a/src/latbin/lattice-determinize-phone-pruned-parallel.cc
+++ b/src/latbin/lattice-determinize-phone-pruned-parallel.cc
@@ -89,7 +89,6 @@ class DeterminizeLatticeTask {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     
     const char *usage =
         "Determinize lattices, keeping only the best path (sequence of\n"
diff --git a/src/latbin/lattice-determinize-phone-pruned.cc b/src/latbin/lattice-determinize-phone-pruned.cc
index 91086af..a3adb25 100644
--- a/src/latbin/lattice-determinize-phone-pruned.cc
+++ b/src/latbin/lattice-determinize-phone-pruned.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Determinize lattices, keeping only the best path (sequence of\n"
diff --git a/src/latbin/lattice-determinize-pruned-parallel.cc b/src/latbin/lattice-determinize-pruned-parallel.cc
index 82f200c..938436c 100644
--- a/src/latbin/lattice-determinize-pruned-parallel.cc
+++ b/src/latbin/lattice-determinize-pruned-parallel.cc
@@ -97,7 +97,6 @@ class DeterminizeLatticeTask {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     
     const char *usage =
         "Determinize lattices, keeping only the best path (sequence of acoustic states)\n"
diff --git a/src/latbin/lattice-determinize-pruned.cc b/src/latbin/lattice-determinize-pruned.cc
index 3c6c579..6150d98 100644
--- a/src/latbin/lattice-determinize-pruned.cc
+++ b/src/latbin/lattice-determinize-pruned.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Determinize lattices, keeping only the best path (sequence of acoustic states)\n"
diff --git a/src/latbin/lattice-determinize.cc b/src/latbin/lattice-determinize.cc
index ce2edfd..5abb441 100644
--- a/src/latbin/lattice-determinize.cc
+++ b/src/latbin/lattice-determinize.cc
@@ -89,8 +89,6 @@ bool DeterminizeLatticeWrapper(const Lattice &lat,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-difference.cc b/src/latbin/lattice-difference.cc
index cb2e88f..52c5f9b 100644
--- a/src/latbin/lattice-difference.cc
+++ b/src/latbin/lattice-difference.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-equivalent.cc b/src/latbin/lattice-equivalent.cc
index ad35b29..228a2c0 100644
--- a/src/latbin/lattice-equivalent.cc
+++ b/src/latbin/lattice-equivalent.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-expand-ngram.cc b/src/latbin/lattice-expand-ngram.cc
index 1e7625d..1b80560 100644
--- a/src/latbin/lattice-expand-ngram.cc
+++ b/src/latbin/lattice-expand-ngram.cc
@@ -24,8 +24,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using kaldi::CompactLatticeArc;
diff --git a/src/latbin/lattice-expand.cc b/src/latbin/lattice-expand.cc
index a054496..0e00659 100644
--- a/src/latbin/lattice-expand.cc
+++ b/src/latbin/lattice-expand.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage = 
       "Expand lattices so that arcs with higher posteriors than epsilon have\n"
diff --git a/src/latbin/lattice-interp.cc b/src/latbin/lattice-interp.cc
index 41e1b32..fb6a857 100644
--- a/src/latbin/lattice-interp.cc
+++ b/src/latbin/lattice-interp.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-limit-depth.cc b/src/latbin/lattice-limit-depth.cc
index fdb1114..bb9051e 100644
--- a/src/latbin/lattice-limit-depth.cc
+++ b/src/latbin/lattice-limit-depth.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-lmrescore-const-arpa.cc b/src/latbin/lattice-lmrescore-const-arpa.cc
index 789f0fb..11c5875 100644
--- a/src/latbin/lattice-lmrescore-const-arpa.cc
+++ b/src/latbin/lattice-lmrescore-const-arpa.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Rescores lattice with the ConstArpaLm format language model. The LM\n"
diff --git a/src/latbin/lattice-lmrescore-kaldi-rnnlm-pruned.cc b/src/latbin/lattice-lmrescore-kaldi-rnnlm-pruned.cc
index 73895e7..6e4de23 100644
--- a/src/latbin/lattice-lmrescore-kaldi-rnnlm-pruned.cc
+++ b/src/latbin/lattice-lmrescore-kaldi-rnnlm-pruned.cc
@@ -32,8 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-lmrescore-kaldi-rnnlm.cc b/src/latbin/lattice-lmrescore-kaldi-rnnlm.cc
index fc1034a..445ea27 100644
--- a/src/latbin/lattice-lmrescore-kaldi-rnnlm.cc
+++ b/src/latbin/lattice-lmrescore-kaldi-rnnlm.cc
@@ -31,8 +31,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Rescores lattice with kaldi-rnnlm. This script is called from \n"
diff --git a/src/latbin/lattice-lmrescore-pruned.cc b/src/latbin/lattice-lmrescore-pruned.cc
index 9f7f332..1654ea1 100644
--- a/src/latbin/lattice-lmrescore-pruned.cc
+++ b/src/latbin/lattice-lmrescore-pruned.cc
@@ -30,8 +30,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-lmrescore-rnnlm.cc b/src/latbin/lattice-lmrescore-rnnlm.cc
index 91d207b..8791b1a 100644
--- a/src/latbin/lattice-lmrescore-rnnlm.cc
+++ b/src/latbin/lattice-lmrescore-rnnlm.cc
@@ -29,8 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Rescores lattice with rnnlm. The LM will be wrapped into the\n"
diff --git a/src/latbin/lattice-lmrescore.cc b/src/latbin/lattice-lmrescore.cc
index 2e5406f..84a0edf 100644
--- a/src/latbin/lattice-lmrescore.cc
+++ b/src/latbin/lattice-lmrescore.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -75,9 +73,9 @@ int main(int argc, char *argv[]) {
     // with all the cost on the first member of the pair (since it's a graph
     // weight).
     fst::CacheOptions cache_opts(true, num_states_cache);
-    fst::MapFstOptions mapfst_opts(cache_opts);
+    fst::ArcMapFstOptions mapfst_opts(cache_opts);
     fst::StdToLatticeMapper<BaseFloat> mapper;
-    fst::MapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
+    fst::ArcMapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
         lm_fst(*std_lm_fst, mapper, mapfst_opts);
     delete std_lm_fst;
 
diff --git a/src/latbin/lattice-mbr-decode.cc b/src/latbin/lattice-mbr-decode.cc
index 2ae4987..b43c04b 100644
--- a/src/latbin/lattice-mbr-decode.cc
+++ b/src/latbin/lattice-mbr-decode.cc
@@ -24,7 +24,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Do Minimum Bayes Risk decoding (decoding that aims to minimize the \n"
diff --git a/src/latbin/lattice-minimize.cc b/src/latbin/lattice-minimize.cc
index e30979b..d36b9ac 100644
--- a/src/latbin/lattice-minimize.cc
+++ b/src/latbin/lattice-minimize.cc
@@ -30,8 +30,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-oracle.cc b/src/latbin/lattice-oracle.cc
index 5f25131..9930ef9 100644
--- a/src/latbin/lattice-oracle.cc
+++ b/src/latbin/lattice-oracle.cc
@@ -66,7 +66,7 @@ void ConvertLatticeToUnweightedAcceptor(const kaldi::Lattice &ilat,
   // first convert from  lattice to normal FST
   fst::ConvertLattice(ilat, ofst);
   // remove weights, project to output, sort according to input arg
-  fst::Map(ofst, fst::RmWeightMapper<fst::StdArc>());
+  fst::ArcMap(ofst, fst::RmWeightMapper<fst::StdArc>());
   fst::Project(ofst, fst::PROJECT_OUTPUT);  // The words are on the output side
   fst::Relabel(ofst, wildcards, wildcards);
   fst::RmEpsilon(ofst);   // Don't tolerate epsilons as they make it hard to
@@ -168,8 +168,6 @@ int main(int argc, char *argv[]) {
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     typedef fst::StdArc::Weight Weight;
     typedef fst::StdArc::StateId StateId;
 
diff --git a/src/latbin/lattice-path-cover.cc b/src/latbin/lattice-path-cover.cc
index 0e333d5..b439296 100644
--- a/src/latbin/lattice-path-cover.cc
+++ b/src/latbin/lattice-path-cover.cc
@@ -189,7 +189,6 @@ class PathCoverComputer {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
 
     const char *usage =
diff --git a/src/latbin/lattice-project.cc b/src/latbin/lattice-project.cc
index b74ab17..f98833b 100644
--- a/src/latbin/lattice-project.cc
+++ b/src/latbin/lattice-project.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-prune.cc b/src/latbin/lattice-prune.cc
index 49399f7..0eb6eca 100644
--- a/src/latbin/lattice-prune.cc
+++ b/src/latbin/lattice-prune.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-push.cc b/src/latbin/lattice-push.cc
index 8366fd6..4bf8b84 100644
--- a/src/latbin/lattice-push.cc
+++ b/src/latbin/lattice-push.cc
@@ -29,8 +29,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-rescore-mapped.cc b/src/latbin/lattice-rescore-mapped.cc
index 9dcc632..9c40b83 100644
--- a/src/latbin/lattice-rescore-mapped.cc
+++ b/src/latbin/lattice-rescore-mapped.cc
@@ -32,7 +32,7 @@ void LatticeAcousticRescore(const TransitionModel &trans_model,
                             const Matrix<BaseFloat> &log_likes,
                             const std::vector<int32> &state_times,
                             Lattice *lat) {
-  kaldi::uint64 props = lat->Properties(fst::kFstProperties, false);
+  uint64 props = lat->Properties(fst::kFstProperties, false);
   if (!(props & fst::kTopSorted))
     KALDI_ERR << "Input lattice must be topologically sorted.";
 
@@ -74,8 +74,6 @@ void LatticeAcousticRescore(const TransitionModel &trans_model,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -138,7 +136,7 @@ int main(int argc, char *argv[]) {
       if (old_acoustic_scale != 1.0)
         fst::ScaleLattice(fst::AcousticLatticeScale(old_acoustic_scale), &lat);
 
-      kaldi::uint64 props = lat.Properties(fst::kFstProperties, false);
+      uint64 props = lat.Properties(fst::kFstProperties, false);
       if (!(props & fst::kTopSorted)) {
         if (fst::TopSort(&lat) == false)
           KALDI_ERR << "Cycles detected in lattice.";
diff --git a/src/latbin/lattice-reverse.cc b/src/latbin/lattice-reverse.cc
index 433915f..c5e13d8 100644
--- a/src/latbin/lattice-reverse.cc
+++ b/src/latbin/lattice-reverse.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-rmali.cc b/src/latbin/lattice-rmali.cc
index 6cd9141..89c6109 100644
--- a/src/latbin/lattice-rmali.cc
+++ b/src/latbin/lattice-rmali.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-scale.cc b/src/latbin/lattice-scale.cc
index f9c61b4..674070c 100644
--- a/src/latbin/lattice-scale.cc
+++ b/src/latbin/lattice-scale.cc
@@ -27,8 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-to-ctm-conf.cc b/src/latbin/lattice-to-ctm-conf.cc
index 772197d..f837b2f 100644
--- a/src/latbin/lattice-to-ctm-conf.cc
+++ b/src/latbin/lattice-to-ctm-conf.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "This tool turns a lattice into a ctm with confidences, based on the\n"
diff --git a/src/latbin/lattice-to-fst.cc b/src/latbin/lattice-to-fst.cc
index 0d2ac29..0f8a62e 100644
--- a/src/latbin/lattice-to-fst.cc
+++ b/src/latbin/lattice-to-fst.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-to-mpe-post.cc b/src/latbin/lattice-to-mpe-post.cc
index 7961cc5..bbec8dc 100644
--- a/src/latbin/lattice-to-mpe-post.cc
+++ b/src/latbin/lattice-to-mpe-post.cc
@@ -29,7 +29,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -106,7 +105,7 @@ int main(int argc, char *argv[]) {
       if (acoustic_scale != 1.0 || lm_scale != 1.0)
         fst::ScaleLattice(fst::LatticeScale(lm_scale, acoustic_scale), &lat);
       
-      kaldi::uint64 props = lat.Properties(fst::kFstProperties, false);
+      uint64 props = lat.Properties(fst::kFstProperties, false);
       if (!(props & fst::kTopSorted)) {
         if (fst::TopSort(&lat) == false)
           KALDI_ERR << "Cycles detected in lattice.";
diff --git a/src/latbin/lattice-to-nbest.cc b/src/latbin/lattice-to-nbest.cc
index f5ecbe0..67258b9 100644
--- a/src/latbin/lattice-to-nbest.cc
+++ b/src/latbin/lattice-to-nbest.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-to-phone-lattice.cc b/src/latbin/lattice-to-phone-lattice.cc
index 10da2b4..f8ea5a2 100644
--- a/src/latbin/lattice-to-phone-lattice.cc
+++ b/src/latbin/lattice-to-phone-lattice.cc
@@ -28,8 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/lattice-to-post.cc b/src/latbin/lattice-to-post.cc
index 76d79f1..7293692 100644
--- a/src/latbin/lattice-to-post.cc
+++ b/src/latbin/lattice-to-post.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -78,7 +77,7 @@ int main(int argc, char *argv[]) {
       if (acoustic_scale != 1.0 || lm_scale != 1.0)
         fst::ScaleLattice(fst::LatticeScale(lm_scale, acoustic_scale), &lat);
 
-      kaldi::uint64 props = lat.Properties(fst::kFstProperties, false);
+      uint64 props = lat.Properties(fst::kFstProperties, false);
       if (!(props & fst::kTopSorted)) {
         if (fst::TopSort(&lat) == false)
           KALDI_ERR << "Cycles detected in lattice.";
diff --git a/src/latbin/lattice-to-smbr-post.cc b/src/latbin/lattice-to-smbr-post.cc
index e277231..aa714cd 100644
--- a/src/latbin/lattice-to-smbr-post.cc
+++ b/src/latbin/lattice-to-smbr-post.cc
@@ -29,7 +29,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -107,7 +106,7 @@ int main(int argc, char *argv[]) {
       if (acoustic_scale != 1.0 || lm_scale != 1.0)
         fst::ScaleLattice(fst::LatticeScale(lm_scale, acoustic_scale), &lat);
       
-      kaldi::uint64 props = lat.Properties(fst::kFstProperties, false);
+      uint64 props = lat.Properties(fst::kFstProperties, false);
       if (!(props & fst::kTopSorted)) {
         if (fst::TopSort(&lat) == false)
           KALDI_ERR << "Cycles detected in lattice.";
diff --git a/src/latbin/lattice-union.cc b/src/latbin/lattice-union.cc
index 3e60373..51c37a1 100644
--- a/src/latbin/lattice-union.cc
+++ b/src/latbin/lattice-union.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/linear-to-nbest.cc b/src/latbin/linear-to-nbest.cc
index a1864d0..76e613b 100644
--- a/src/latbin/linear-to-nbest.cc
+++ b/src/latbin/linear-to-nbest.cc
@@ -50,8 +50,6 @@ void MakeLatticeFromLinear(const std::vector<int32> &ali,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/nbest-to-ctm.cc b/src/latbin/nbest-to-ctm.cc
index 89c4744..b30958e 100644
--- a/src/latbin/nbest-to-ctm.cc
+++ b/src/latbin/nbest-to-ctm.cc
@@ -25,7 +25,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Takes as input lattices which must be linear (single path),\n"
diff --git a/src/latbin/nbest-to-lattice.cc b/src/latbin/nbest-to-lattice.cc
index a9d4e74..fd210cd 100644
--- a/src/latbin/nbest-to-lattice.cc
+++ b/src/latbin/nbest-to-lattice.cc
@@ -36,7 +36,6 @@ bool GetUtteranceId(const std::string &nbest_id, std::string *utterance_id) {
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Read in a Table containing N-best entries from a lattices (i.e. individual\n"
diff --git a/src/latbin/nbest-to-linear.cc b/src/latbin/nbest-to-linear.cc
index d63c380..7f8a67d 100644
--- a/src/latbin/nbest-to-linear.cc
+++ b/src/latbin/nbest-to-linear.cc
@@ -26,8 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/latbin/nbest-to-prons.cc b/src/latbin/nbest-to-prons.cc
index bb34588..88068ae 100644
--- a/src/latbin/nbest-to-prons.cc
+++ b/src/latbin/nbest-to-prons.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Reads lattices which must be linear (single path), and must be in\n"
diff --git a/src/lmbin/arpa-to-const-arpa.cc b/src/lmbin/arpa-to-const-arpa.cc
index 33d1cb7..585957d 100644
--- a/src/lmbin/arpa-to-const-arpa.cc
+++ b/src/lmbin/arpa-to-const-arpa.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage  =
         "Converts an Arpa format language model into ConstArpaLm format,\n"
diff --git a/src/matrix/kaldi_matrix_Export.h b/src/matrix/kaldi_matrix_Export.h
new file mode 100644
index 0000000..54e8cb6
--- /dev/null
+++ b/src/matrix/kaldi_matrix_Export.h
@@ -0,0 +1,46 @@
+
+#ifndef kaldi_matrix_EXPORT_H
+#define kaldi_matrix_EXPORT_H
+
+#ifdef kaldi_matrix_BUILT_AS_STATIC
+#  define kaldi_matrix_EXPORT
+#  define KALDI_matrix_NO_EXPORT
+#else
+#ifdef _WIN32
+#  ifndef kaldi_matrix_EXPORT
+#    ifdef kaldi_matrix_EXPORTS
+        /* We are building this library */
+#      define kaldi_matrix_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define kaldi_matrix_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef KALDI_MATRIX_NO_EXPORT
+#    define KALDI_MATRIX_NO_EXPORT 
+#  endif
+#else
+        #define kaldi_matrix_EXPORT
+#endif // _WIN32
+#endif
+
+#ifndef KALDI_MATRIX_DEPRECATED
+#  define KALDI_MATRIX_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef KALDI_MATRIX_DEPRECATED_EXPORT
+#  define KALDI_MATRIX_DEPRECATED_EXPORT kaldi_matrix_EXPORT KALDI_MATRIX_DEPRECATED
+#endif
+
+#ifndef KALDI_MATRIX_DEPRECATED_NO_EXPORT
+#  define KALDI_MATRIX_DEPRECATED_NO_EXPORT KALDI_MATRIX_NO_EXPORT KALDI_MATRIX_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef KALDI_MATRIX_NO_DEPRECATED
+#    define KALDI_MATRIX_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* kaldi_matrix_EXPORT_H */
diff --git a/src/nnet/nnet-component-test.cc b/src/nnet/nnet-component-test.cc
index 0786eb5..fb95a76 100644
--- a/src/nnet/nnet-component-test.cc
+++ b/src/nnet/nnet-component-test.cc
@@ -271,7 +271,7 @@ int main() {
   using namespace kaldi;
   using namespace kaldi::nnet1;
 
-  for (kaldi::int32 loop = 0; loop < 2; loop++) {
+  for (int32 loop = 0; loop < 2; loop++) {
 #if HAVE_CUDA == 1
     if (loop == 0)
       // use no GPU,
diff --git a/src/nnet2/nnet-example-functions-test.cc b/src/nnet2/nnet-example-functions-test.cc
index 0348414..668c039 100644
--- a/src/nnet2/nnet-example-functions-test.cc
+++ b/src/nnet2/nnet-example-functions-test.cc
@@ -62,7 +62,6 @@ void UnitTestSolvePackingProblem() {
 int main() {
   using namespace kaldi;
   using namespace kaldi::nnet2;
-  using kaldi::int32;
   for (int32 i = 0; i < 10; i++)
     UnitTestSolvePackingProblem();
 }
diff --git a/src/nnet2/online-nnet2-decodable-test.cc b/src/nnet2/online-nnet2-decodable-test.cc
index 10ca206..aa403a5 100644
--- a/src/nnet2/online-nnet2-decodable-test.cc
+++ b/src/nnet2/online-nnet2-decodable-test.cc
@@ -104,7 +104,6 @@ void UnitTestNnetDecodable() {
 int main() {
   using namespace kaldi;
   using namespace kaldi::nnet2;
-  using kaldi::int32;
 
   for (int32 i = 0; i < 3; i++)
     UnitTestNnetDecodable();
diff --git a/src/nnet2bin/nnet-adjust-priors.cc b/src/nnet2bin/nnet-adjust-priors.cc
index 8cbbe35..7f4ed9c 100644
--- a/src/nnet2bin/nnet-adjust-priors.cc
+++ b/src/nnet2bin/nnet-adjust-priors.cc
@@ -71,7 +71,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Set the priors of the neural net to the computed posteriors from the net,\n"
diff --git a/src/nnet2bin/nnet-align-compiled.cc b/src/nnet2bin/nnet-align-compiled.cc
index 6d19967..6060177 100644
--- a/src/nnet2bin/nnet-align-compiled.cc
+++ b/src/nnet2bin/nnet-align-compiled.cc
@@ -33,7 +33,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -88,7 +87,7 @@ int main(int argc, char *argv[]) {
 
     int num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
 
     {
       TransitionModel trans_model;
diff --git a/src/nnet2bin/nnet-am-average.cc b/src/nnet2bin/nnet-am-average.cc
index 61ee921..df69899 100644
--- a/src/nnet2bin/nnet-am-average.cc
+++ b/src/nnet2bin/nnet-am-average.cc
@@ -114,8 +114,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace kaldi::nnet2;
     using std::string;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program averages (or sums, if --sum=true) the parameters over a\n"
diff --git a/src/nnet2bin/nnet-am-compute.cc b/src/nnet2bin/nnet-am-compute.cc
index d40c288..a29038d 100644
--- a/src/nnet2bin/nnet-am-compute.cc
+++ b/src/nnet2bin/nnet-am-compute.cc
@@ -31,8 +31,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Does the neural net computation for each file of input features, and\n"
diff --git a/src/nnet2bin/nnet-am-copy.cc b/src/nnet2bin/nnet-am-copy.cc
index b5665a1..efe0178 100644
--- a/src/nnet2bin/nnet-am-copy.cc
+++ b/src/nnet2bin/nnet-am-copy.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a (nnet2) neural net and its associated transition model,\n"
diff --git a/src/nnet2bin/nnet-am-fix.cc b/src/nnet2bin/nnet-am-fix.cc
index 8492746..c9284de 100644
--- a/src/nnet2bin/nnet-am-fix.cc
+++ b/src/nnet2bin/nnet-am-fix.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a (cpu-based) neural net and its associated transition model,\n"
diff --git a/src/nnet2bin/nnet-am-info.cc b/src/nnet2bin/nnet-am-info.cc
index 0206f54..0254fb6 100644
--- a/src/nnet2bin/nnet-am-info.cc
+++ b/src/nnet2bin/nnet-am-info.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Print human-readable information about the neural network\n"
diff --git a/src/nnet2bin/nnet-am-init.cc b/src/nnet2bin/nnet-am-init.cc
index 39473a6..2348f5c 100644
--- a/src/nnet2bin/nnet-am-init.cc
+++ b/src/nnet2bin/nnet-am-init.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     // TODO: specify in the usage message where the example scripts are.
     const char *usage =
diff --git a/src/nnet2bin/nnet-am-mixup.cc b/src/nnet2bin/nnet-am-mixup.cc
index 32a961b..0c7be6d 100644
--- a/src/nnet2bin/nnet-am-mixup.cc
+++ b/src/nnet2bin/nnet-am-mixup.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Add mixture-components to a neural net (comparable to mixtures in a Gaussian\n"
diff --git a/src/nnet2bin/nnet-am-reinitialize.cc b/src/nnet2bin/nnet-am-reinitialize.cc
index 43d87ec..e445dd6 100644
--- a/src/nnet2bin/nnet-am-reinitialize.cc
+++ b/src/nnet2bin/nnet-am-reinitialize.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "This program can used when transferring a neural net from one language\n"
diff --git a/src/nnet2bin/nnet-am-switch-preconditioning.cc b/src/nnet2bin/nnet-am-switch-preconditioning.cc
index 7967eaa..54f1707 100644
--- a/src/nnet2bin/nnet-am-switch-preconditioning.cc
+++ b/src/nnet2bin/nnet-am-switch-preconditioning.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a (cpu-based) neural net and its associated transition model,\n"
diff --git a/src/nnet2bin/nnet-am-widen.cc b/src/nnet2bin/nnet-am-widen.cc
index 0ed23c1..7491692 100644
--- a/src/nnet2bin/nnet-am-widen.cc
+++ b/src/nnet2bin/nnet-am-widen.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a (cpu-based) neural net and its associated transition model,\n"
diff --git a/src/nnet2bin/nnet-combine-egs-discriminative.cc b/src/nnet2bin/nnet-combine-egs-discriminative.cc
index 8220cf4..766483e 100644
--- a/src/nnet2bin/nnet-combine-egs-discriminative.cc
+++ b/src/nnet2bin/nnet-combine-egs-discriminative.cc
@@ -26,8 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples for discriminative neural network training,\n"
diff --git a/src/nnet2bin/nnet-combine-fast.cc b/src/nnet2bin/nnet-combine-fast.cc
index 63a92f9..30e15d4 100644
--- a/src/nnet2bin/nnet-combine-fast.cc
+++ b/src/nnet2bin/nnet-combine-fast.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Using a validation set, compute an optimal combination of a number of\n"
diff --git a/src/nnet2bin/nnet-combine.cc b/src/nnet2bin/nnet-combine.cc
index 621def0..7fbd502 100644
--- a/src/nnet2bin/nnet-combine.cc
+++ b/src/nnet2bin/nnet-combine.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Using a validation set, compute an optimal combination of a number of\n"
diff --git a/src/nnet2bin/nnet-compare-hash-discriminative.cc b/src/nnet2bin/nnet-compare-hash-discriminative.cc
index e602165..77e3139 100644
--- a/src/nnet2bin/nnet-compare-hash-discriminative.cc
+++ b/src/nnet2bin/nnet-compare-hash-discriminative.cc
@@ -26,8 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Compares two archives of discriminative training examples and checks\n"
diff --git a/src/nnet2bin/nnet-compute-from-egs.cc b/src/nnet2bin/nnet-compute-from-egs.cc
index a4c4c0c..f6fd1bd 100644
--- a/src/nnet2bin/nnet-compute-from-egs.cc
+++ b/src/nnet2bin/nnet-compute-from-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Does the neural net computation, taking as input the nnet-training examples\n"
diff --git a/src/nnet2bin/nnet-compute-prob.cc b/src/nnet2bin/nnet-compute-prob.cc
index 7a5fa4b..47716ed 100644
--- a/src/nnet2bin/nnet-compute-prob.cc
+++ b/src/nnet2bin/nnet-compute-prob.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Computes and prints the average log-prob per frame of the given data with a\n"
diff --git a/src/nnet2bin/nnet-compute.cc b/src/nnet2bin/nnet-compute.cc
index cc9b04f..f87bade 100644
--- a/src/nnet2bin/nnet-compute.cc
+++ b/src/nnet2bin/nnet-compute.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Does the neural net computation for each file of input features, and\n"
diff --git a/src/nnet2bin/nnet-copy-egs-discriminative.cc b/src/nnet2bin/nnet-copy-egs-discriminative.cc
index a14fd3e..cc13e0e 100644
--- a/src/nnet2bin/nnet-copy-egs-discriminative.cc
+++ b/src/nnet2bin/nnet-copy-egs-discriminative.cc
@@ -66,8 +66,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples for discriminative neural\n"
diff --git a/src/nnet2bin/nnet-copy-egs.cc b/src/nnet2bin/nnet-copy-egs.cc
index 7ef07cd..8ab8e3c 100644
--- a/src/nnet2bin/nnet-copy-egs.cc
+++ b/src/nnet2bin/nnet-copy-egs.cc
@@ -48,8 +48,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples (typically single frames) for neural network training,\n"
diff --git a/src/nnet2bin/nnet-get-egs-discriminative.cc b/src/nnet2bin/nnet-get-egs-discriminative.cc
index 58db697..4773668 100644
--- a/src/nnet2bin/nnet-get-egs-discriminative.cc
+++ b/src/nnet2bin/nnet-get-egs-discriminative.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get examples of data for discriminative neural network training;\n"
diff --git a/src/nnet2bin/nnet-get-egs.cc b/src/nnet2bin/nnet-get-egs.cc
index 49f270c..0cd1a5e 100644
--- a/src/nnet2bin/nnet-get-egs.cc
+++ b/src/nnet2bin/nnet-get-egs.cc
@@ -95,8 +95,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for neural network training.\n"
diff --git a/src/nnet2bin/nnet-get-feature-transform-multi.cc b/src/nnet2bin/nnet-get-feature-transform-multi.cc
index d7763e8..d4caf84 100644
--- a/src/nnet2bin/nnet-get-feature-transform-multi.cc
+++ b/src/nnet2bin/nnet-get-feature-transform-multi.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Get feature-projection transform using stats obtained with acc-lda.\n"
diff --git a/src/nnet2bin/nnet-get-feature-transform.cc b/src/nnet2bin/nnet-get-feature-transform.cc
index b2e3823..b9dbeb6 100644
--- a/src/nnet2bin/nnet-get-feature-transform.cc
+++ b/src/nnet2bin/nnet-get-feature-transform.cc
@@ -24,7 +24,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
         "Get feature-projection transform using stats obtained with acc-lda.\n"
diff --git a/src/nnet2bin/nnet-get-weighted-egs.cc b/src/nnet2bin/nnet-get-weighted-egs.cc
index a3099ad..9c737e6 100644
--- a/src/nnet2bin/nnet-get-weighted-egs.cc
+++ b/src/nnet2bin/nnet-get-weighted-egs.cc
@@ -111,8 +111,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for neural network training.\n"
diff --git a/src/nnet2bin/nnet-init.cc b/src/nnet2bin/nnet-init.cc
index 7f29f5e..f98124a 100644
--- a/src/nnet2bin/nnet-init.cc
+++ b/src/nnet2bin/nnet-init.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize the nnet2 neural network from a config file with a line for each\n"
diff --git a/src/nnet2bin/nnet-insert.cc b/src/nnet2bin/nnet-insert.cc
index caf4f58..79507d9 100644
--- a/src/nnet2bin/nnet-insert.cc
+++ b/src/nnet2bin/nnet-insert.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Insert components into a neural network-based acoustic model.\n"
diff --git a/src/nnet2bin/nnet-latgen-faster-parallel.cc b/src/nnet2bin/nnet-latgen-faster-parallel.cc
index 658d1fd..ef9c58a 100644
--- a/src/nnet2bin/nnet-latgen-faster-parallel.cc
+++ b/src/nnet2bin/nnet-latgen-faster-parallel.cc
@@ -34,7 +34,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -104,7 +103,7 @@ int main(int argc, char *argv[]) {
     // net requires this (i.e. it was trained with this).
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_done = 0, num_err = 0;
     Fst<StdArc> *decode_fst = NULL;
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
diff --git a/src/nnet2bin/nnet-latgen-faster.cc b/src/nnet2bin/nnet-latgen-faster.cc
index e83c65f..ce3e97e 100644
--- a/src/nnet2bin/nnet-latgen-faster.cc
+++ b/src/nnet2bin/nnet-latgen-faster.cc
@@ -34,7 +34,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -98,7 +97,7 @@ int main(int argc, char *argv[]) {
 
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
diff --git a/src/nnet2bin/nnet-modify-learning-rates.cc b/src/nnet2bin/nnet-modify-learning-rates.cc
index 55cab63..d926475 100644
--- a/src/nnet2bin/nnet-modify-learning-rates.cc
+++ b/src/nnet2bin/nnet-modify-learning-rates.cc
@@ -42,8 +42,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program modifies the learning rates so as to equalize the\n"
diff --git a/src/nnet2bin/nnet-normalize-stddev.cc b/src/nnet2bin/nnet-normalize-stddev.cc
index b23faef..5508d5d 100644
--- a/src/nnet2bin/nnet-normalize-stddev.cc
+++ b/src/nnet2bin/nnet-normalize-stddev.cc
@@ -29,8 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program first identifies any affine or block affine layers that\n"
diff --git a/src/nnet2bin/nnet-relabel-egs.cc b/src/nnet2bin/nnet-relabel-egs.cc
index 2a66012..d3fe1f1 100644
--- a/src/nnet2bin/nnet-relabel-egs.cc
+++ b/src/nnet2bin/nnet-relabel-egs.cc
@@ -54,8 +54,6 @@ int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet2;
 
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Relabel neural network egs with the read pdf-id alignments, "
diff --git a/src/nnet2bin/nnet-replace-last-layers.cc b/src/nnet2bin/nnet-replace-last-layers.cc
index 70ebf91..c6f00db 100644
--- a/src/nnet2bin/nnet-replace-last-layers.cc
+++ b/src/nnet2bin/nnet-replace-last-layers.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "This program is for adding new layers to a neural-network acoustic model.\n"
diff --git a/src/nnet2bin/nnet-show-progress.cc b/src/nnet2bin/nnet-show-progress.cc
index 97e1308..093d9f6 100644
--- a/src/nnet2bin/nnet-show-progress.cc
+++ b/src/nnet2bin/nnet-show-progress.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Given an old and a new model and some training examples (possibly held-out),\n"
diff --git a/src/nnet2bin/nnet-shuffle-egs-discriminative.cc b/src/nnet2bin/nnet-shuffle-egs-discriminative.cc
index 5ef3acf..676c75a 100644
--- a/src/nnet2bin/nnet-shuffle-egs-discriminative.cc
+++ b/src/nnet2bin/nnet-shuffle-egs-discriminative.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples (typically single frames) for neural network training,\n"
diff --git a/src/nnet2bin/nnet-shuffle-egs.cc b/src/nnet2bin/nnet-shuffle-egs.cc
index 55d02f2..9a1bd4d 100644
--- a/src/nnet2bin/nnet-shuffle-egs.cc
+++ b/src/nnet2bin/nnet-shuffle-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples (typically single frames) for neural network training,\n"
diff --git a/src/nnet2bin/nnet-subset-egs.cc b/src/nnet2bin/nnet-subset-egs.cc
index 2ff08a0..38146d3 100644
--- a/src/nnet2bin/nnet-subset-egs.cc
+++ b/src/nnet2bin/nnet-subset-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Creates a random subset of the input examples, of a specified size.\n"
diff --git a/src/nnet2bin/nnet-to-raw-nnet.cc b/src/nnet2bin/nnet-to-raw-nnet.cc
index 30085c9..2d897e6 100644
--- a/src/nnet2bin/nnet-to-raw-nnet.cc
+++ b/src/nnet2bin/nnet-to-raw-nnet.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace kaldi::nnet2;
     
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a (cpu-based) neural net: reads the AmNnet with its transition model, but\n"
diff --git a/src/nnet2bin/nnet-train-discriminative-parallel.cc b/src/nnet2bin/nnet-train-discriminative-parallel.cc
index fbc3388..0e898b2 100644
--- a/src/nnet2bin/nnet-train-discriminative-parallel.cc
+++ b/src/nnet2bin/nnet-train-discriminative-parallel.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train the neural network parameters with a discriminative objective\n"
diff --git a/src/nnet2bin/nnet-train-discriminative-simple.cc b/src/nnet2bin/nnet-train-discriminative-simple.cc
index 5b2caf4..e64e2c0 100644
--- a/src/nnet2bin/nnet-train-discriminative-simple.cc
+++ b/src/nnet2bin/nnet-train-discriminative-simple.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train the neural network parameters with a discriminative objective\n"
diff --git a/src/nnet2bin/nnet-train-ensemble.cc b/src/nnet2bin/nnet-train-ensemble.cc
index 86e7893..70b7dd0 100644
--- a/src/nnet2bin/nnet-train-ensemble.cc
+++ b/src/nnet2bin/nnet-train-ensemble.cc
@@ -29,8 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train an ensemble of neural networks with backprop and stochastic\n"
diff --git a/src/nnet2bin/nnet-train-parallel.cc b/src/nnet2bin/nnet-train-parallel.cc
index a094a06..598557e 100644
--- a/src/nnet2bin/nnet-train-parallel.cc
+++ b/src/nnet2bin/nnet-train-parallel.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train the neural network parameters with backprop and stochastic\n"
diff --git a/src/nnet2bin/nnet-train-simple.cc b/src/nnet2bin/nnet-train-simple.cc
index 3228684..0db0337 100644
--- a/src/nnet2bin/nnet-train-simple.cc
+++ b/src/nnet2bin/nnet-train-simple.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train the neural network parameters with backprop and stochastic\n"
diff --git a/src/nnet2bin/nnet-train-transitions.cc b/src/nnet2bin/nnet-train-transitions.cc
index 111b690..4dcc5e8 100644
--- a/src/nnet2bin/nnet-train-transitions.cc
+++ b/src/nnet2bin/nnet-train-transitions.cc
@@ -54,7 +54,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Train the transition probabilities of a neural network acoustic model\n"
diff --git a/src/nnet2bin/nnet1-to-raw-nnet.cc b/src/nnet2bin/nnet1-to-raw-nnet.cc
index 96e0580..31b4829 100644
--- a/src/nnet2bin/nnet1-to-raw-nnet.cc
+++ b/src/nnet2bin/nnet1-to-raw-nnet.cc
@@ -176,7 +176,6 @@ nnet2::Nnet *ConvertNnet1ToNnet2(const nnet1::Nnet &nnet1,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Convert nnet1 neural net to nnet2 'raw' neural net\n"
diff --git a/src/nnet2bin/raw-nnet-concat.cc b/src/nnet2bin/raw-nnet-concat.cc
index a466400..704bcce 100644
--- a/src/nnet2bin/raw-nnet-concat.cc
+++ b/src/nnet2bin/raw-nnet-concat.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Concatenate two 'raw' neural nets, e.g. as output by nnet-init or\n"
diff --git a/src/nnet2bin/raw-nnet-copy.cc b/src/nnet2bin/raw-nnet-copy.cc
index 57b5ee0..7d6be79 100644
--- a/src/nnet2bin/raw-nnet-copy.cc
+++ b/src/nnet2bin/raw-nnet-copy.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy a raw neural net (this version works on raw nnet2 neural nets,\n"
diff --git a/src/nnet2bin/raw-nnet-info.cc b/src/nnet2bin/raw-nnet-info.cc
index f72e521..3161ccf 100644
--- a/src/nnet2bin/raw-nnet-info.cc
+++ b/src/nnet2bin/raw-nnet-info.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Print human-readable information about the raw neural network\n"
diff --git a/src/nnet3/nnet-component-test.cc b/src/nnet3/nnet-component-test.cc
index 618fa7c..e90b9ed 100644
--- a/src/nnet3/nnet-component-test.cc
+++ b/src/nnet3/nnet-component-test.cc
@@ -525,7 +525,7 @@ int main() {
   using namespace kaldi;
   using namespace kaldi::nnet3;
 #if HAVE_CUDA == 1
-  kaldi::int32 loop = 0;
+  int32 loop = 0;
   for (loop = 0; loop < 2; loop++) {
     //CuDevice::Instantiate().SetDebugStrideMode(true);
     if (loop == 0)
diff --git a/src/nnet3/nnet-compute-test.cc b/src/nnet3/nnet-compute-test.cc
index b8e20e5..b0bf9f5 100644
--- a/src/nnet3/nnet-compute-test.cc
+++ b/src/nnet3/nnet-compute-test.cc
@@ -287,7 +287,7 @@ int main() {
   //SetVerboseLevel(4);
 
 
-  for (kaldi::int32 loop = 0; loop < 2; loop++) {
+  for (int32 loop = 0; loop < 2; loop++) {
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SetDebugStrideMode(true);
     if (loop == 0)
diff --git a/src/nnet3/nnet-derivative-test.cc b/src/nnet3/nnet-derivative-test.cc
index ac2e8c4..f65401e 100644
--- a/src/nnet3/nnet-derivative-test.cc
+++ b/src/nnet3/nnet-derivative-test.cc
@@ -423,7 +423,7 @@ int main() {
   using namespace kaldi::nnet3;
   SetVerboseLevel(3);
 #if HAVE_CUDA == 1
-  kaldi::int32 loop = 0;
+  int32 loop = 0;
   for (loop = 0; loop < 2; loop++) {
     CuDevice::Instantiate().SetDebugStrideMode(true);
     if (loop == 0)
diff --git a/src/nnet3bin/nnet3-acc-lda-stats.cc b/src/nnet3bin/nnet3-acc-lda-stats.cc
index c8911a4..71ef130 100644
--- a/src/nnet3bin/nnet3-acc-lda-stats.cc
+++ b/src/nnet3bin/nnet3-acc-lda-stats.cc
@@ -136,8 +136,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Accumulate statistics in the same format as acc-lda (i.e. stats for\n"
diff --git a/src/nnet3bin/nnet3-align-compiled.cc b/src/nnet3bin/nnet3-align-compiled.cc
index a09ab1c..86f6e8b 100644
--- a/src/nnet3bin/nnet3-align-compiled.cc
+++ b/src/nnet3bin/nnet3-align-compiled.cc
@@ -36,7 +36,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -104,7 +103,7 @@ int main(int argc, char *argv[]) {
 
     int num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
 
 
     {
diff --git a/src/nnet3bin/nnet3-am-adjust-priors.cc b/src/nnet3bin/nnet3-am-adjust-priors.cc
index 419be80..5a46f35 100644
--- a/src/nnet3bin/nnet3-am-adjust-priors.cc
+++ b/src/nnet3bin/nnet3-am-adjust-priors.cc
@@ -71,7 +71,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Set the priors of the nnet3 neural net to the computed posteriors from the net,\n"
diff --git a/src/nnet3bin/nnet3-am-copy.cc b/src/nnet3bin/nnet3-am-copy.cc
index c820814..a4e6dc1 100644
--- a/src/nnet3bin/nnet3-am-copy.cc
+++ b/src/nnet3bin/nnet3-am-copy.cc
@@ -29,7 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy nnet3 neural-net acoustic model file; supports conversion\n"
diff --git a/src/nnet3bin/nnet3-am-info.cc b/src/nnet3bin/nnet3-am-info.cc
index be3df5e..6c0b315 100644
--- a/src/nnet3bin/nnet3-am-info.cc
+++ b/src/nnet3bin/nnet3-am-info.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Print some text information about an nnet3 neural network, to\n"
diff --git a/src/nnet3bin/nnet3-am-init.cc b/src/nnet3bin/nnet3-am-init.cc
index 3cb0bfe..a2593c0 100644
--- a/src/nnet3bin/nnet3-am-init.cc
+++ b/src/nnet3bin/nnet3-am-init.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize nnet3 am-nnet (i.e. neural network-based acoustic model, with\n"
diff --git a/src/nnet3bin/nnet3-am-train-transitions.cc b/src/nnet3bin/nnet3-am-train-transitions.cc
index a1956d1..6a9de0f 100644
--- a/src/nnet3bin/nnet3-am-train-transitions.cc
+++ b/src/nnet3bin/nnet3-am-train-transitions.cc
@@ -54,7 +54,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Train the transition probabilities of an nnet3 neural network acoustic model\n"
diff --git a/src/nnet3bin/nnet3-average.cc b/src/nnet3bin/nnet3-average.cc
index d794e37..5d77aa1 100644
--- a/src/nnet3bin/nnet3-average.cc
+++ b/src/nnet3bin/nnet3-average.cc
@@ -80,8 +80,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program averages the parameters over a number of 'raw' nnet3 neural nets.\n"
diff --git a/src/nnet3bin/nnet3-combine.cc b/src/nnet3bin/nnet3-combine.cc
index 0f7c472..79a8fb7 100644
--- a/src/nnet3bin/nnet3-combine.cc
+++ b/src/nnet3bin/nnet3-combine.cc
@@ -77,8 +77,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Using a subset of training or held-out examples, compute the average\n"
diff --git a/src/nnet3bin/nnet3-compute-batch.cc b/src/nnet3bin/nnet3-compute-batch.cc
index 5d4b9b1..33e7bf9 100644
--- a/src/nnet3bin/nnet3-compute-batch.cc
+++ b/src/nnet3bin/nnet3-compute-batch.cc
@@ -30,8 +30,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Propagate the features through raw neural network model "
diff --git a/src/nnet3bin/nnet3-compute-from-egs.cc b/src/nnet3bin/nnet3-compute-from-egs.cc
index 8f29675..53a3695 100644
--- a/src/nnet3bin/nnet3-compute-from-egs.cc
+++ b/src/nnet3bin/nnet3-compute-from-egs.cc
@@ -67,8 +67,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Read input nnet training examples, and compute the output for each one.\n"
diff --git a/src/nnet3bin/nnet3-compute-prob.cc b/src/nnet3bin/nnet3-compute-prob.cc
index 8b91008..c8baf4f 100644
--- a/src/nnet3bin/nnet3-compute-prob.cc
+++ b/src/nnet3bin/nnet3-compute-prob.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Computes and prints in logging messages the average log-prob per frame of\n"
diff --git a/src/nnet3bin/nnet3-compute.cc b/src/nnet3bin/nnet3-compute.cc
index cf13302..0d8266f 100644
--- a/src/nnet3bin/nnet3-compute.cc
+++ b/src/nnet3bin/nnet3-compute.cc
@@ -30,8 +30,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Propagate the features through raw neural network model "
diff --git a/src/nnet3bin/nnet3-copy-egs.cc b/src/nnet3bin/nnet3-copy-egs.cc
index 19c2054..6fdc29d 100644
--- a/src/nnet3bin/nnet3-copy-egs.cc
+++ b/src/nnet3bin/nnet3-copy-egs.cc
@@ -291,8 +291,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples (single frames or fixed-size groups of frames) for neural\n"
diff --git a/src/nnet3bin/nnet3-copy.cc b/src/nnet3bin/nnet3-copy.cc
index 0e12fa8..a6e27be 100644
--- a/src/nnet3bin/nnet3-copy.cc
+++ b/src/nnet3bin/nnet3-copy.cc
@@ -29,7 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Copy 'raw' nnet3 neural network to standard output\n"
diff --git a/src/nnet3bin/nnet3-discriminative-compute-from-egs.cc b/src/nnet3bin/nnet3-discriminative-compute-from-egs.cc
index d8b0f46..a30fe2a 100644
--- a/src/nnet3bin/nnet3-discriminative-compute-from-egs.cc
+++ b/src/nnet3bin/nnet3-discriminative-compute-from-egs.cc
@@ -64,8 +64,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Read input nnet discriminative training examples, and compute the "
diff --git a/src/nnet3bin/nnet3-discriminative-compute-objf.cc b/src/nnet3bin/nnet3-discriminative-compute-objf.cc
index cc3d0f1..572a6c1 100644
--- a/src/nnet3bin/nnet3-discriminative-compute-objf.cc
+++ b/src/nnet3bin/nnet3-discriminative-compute-objf.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Computes and prints to in logging messages the objective function per frame of\n"
diff --git a/src/nnet3bin/nnet3-discriminative-copy-egs.cc b/src/nnet3bin/nnet3-discriminative-copy-egs.cc
index 17dc2ee..abb7a13 100644
--- a/src/nnet3bin/nnet3-discriminative-copy-egs.cc
+++ b/src/nnet3bin/nnet3-discriminative-copy-egs.cc
@@ -40,8 +40,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples for nnet3 discriminative training, possibly changing the binary mode.\n"
diff --git a/src/nnet3bin/nnet3-discriminative-get-egs.cc b/src/nnet3bin/nnet3-discriminative-get-egs.cc
index 4a31876..b488158 100644
--- a/src/nnet3bin/nnet3-discriminative-get-egs.cc
+++ b/src/nnet3bin/nnet3-discriminative-get-egs.cc
@@ -156,8 +156,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for nnet3+sequence neural network\n"
diff --git a/src/nnet3bin/nnet3-discriminative-merge-egs.cc b/src/nnet3bin/nnet3-discriminative-merge-egs.cc
index bc4cdfb..892fc25 100644
--- a/src/nnet3bin/nnet3-discriminative-merge-egs.cc
+++ b/src/nnet3bin/nnet3-discriminative-merge-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This copies nnet3 discriminative training examples from input to output, merging them\n"
diff --git a/src/nnet3bin/nnet3-discriminative-shuffle-egs.cc b/src/nnet3bin/nnet3-discriminative-shuffle-egs.cc
index faa046a..e925722 100644
--- a/src/nnet3bin/nnet3-discriminative-shuffle-egs.cc
+++ b/src/nnet3bin/nnet3-discriminative-shuffle-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy nnet3 discriminative training examples from the input to output,\n"
diff --git a/src/nnet3bin/nnet3-discriminative-subset-egs.cc b/src/nnet3bin/nnet3-discriminative-subset-egs.cc
index f1a63c4..b3afa4d 100644
--- a/src/nnet3bin/nnet3-discriminative-subset-egs.cc
+++ b/src/nnet3bin/nnet3-discriminative-subset-egs.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Creates a random subset of the input examples, of a specified size.\n"
diff --git a/src/nnet3bin/nnet3-discriminative-train.cc b/src/nnet3bin/nnet3-discriminative-train.cc
index 0d201b1..4728ffc 100644
--- a/src/nnet3bin/nnet3-discriminative-train.cc
+++ b/src/nnet3bin/nnet3-discriminative-train.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train nnet3 neural network parameters with discriminative sequence objective \n"
diff --git a/src/nnet3bin/nnet3-egs-augment-image.cc b/src/nnet3bin/nnet3-egs-augment-image.cc
index 64c7948..bee8801 100644
--- a/src/nnet3bin/nnet3-egs-augment-image.cc
+++ b/src/nnet3bin/nnet3-egs-augment-image.cc
@@ -332,8 +332,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples (single frames or fixed-size groups of frames) for neural\n"
diff --git a/src/nnet3bin/nnet3-get-egs-dense-targets.cc b/src/nnet3bin/nnet3-get-egs-dense-targets.cc
index 13ffaee..9745bb4 100644
--- a/src/nnet3bin/nnet3-get-egs-dense-targets.cc
+++ b/src/nnet3bin/nnet3-get-egs-dense-targets.cc
@@ -151,8 +151,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for nnet3 neural network training.\n"
diff --git a/src/nnet3bin/nnet3-get-egs-simple.cc b/src/nnet3bin/nnet3-get-egs-simple.cc
index 031d941..a6d3a5e 100644
--- a/src/nnet3bin/nnet3-get-egs-simple.cc
+++ b/src/nnet3bin/nnet3-get-egs-simple.cc
@@ -56,8 +56,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for nnet3 neural network training.\n"
diff --git a/src/nnet3bin/nnet3-get-egs.cc b/src/nnet3bin/nnet3-get-egs.cc
index a45a399..27b54db 100644
--- a/src/nnet3bin/nnet3-get-egs.cc
+++ b/src/nnet3bin/nnet3-get-egs.cc
@@ -139,8 +139,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Get frame-by-frame examples of data for nnet3 neural network training.\n"
diff --git a/src/nnet3bin/nnet3-info.cc b/src/nnet3bin/nnet3-info.cc
index ac9a0b5..d8cb6aa 100644
--- a/src/nnet3bin/nnet3-info.cc
+++ b/src/nnet3bin/nnet3-info.cc
@@ -25,7 +25,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Print some text information about 'raw' nnet3 neural network, to\n"
diff --git a/src/nnet3bin/nnet3-init.cc b/src/nnet3bin/nnet3-init.cc
index d913ee4..1ed8a7c 100644
--- a/src/nnet3bin/nnet3-init.cc
+++ b/src/nnet3bin/nnet3-init.cc
@@ -27,7 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize nnet3 neural network from a config file; outputs 'raw' nnet\n"
diff --git a/src/nnet3bin/nnet3-latgen-faster-batch.cc b/src/nnet3bin/nnet3-latgen-faster-batch.cc
index 9a3dc1a..c6a5100 100644
--- a/src/nnet3bin/nnet3-latgen-faster-batch.cc
+++ b/src/nnet3bin/nnet3-latgen-faster-batch.cc
@@ -65,7 +65,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
diff --git a/src/nnet3bin/nnet3-latgen-faster-lookahead.cc b/src/nnet3bin/nnet3-latgen-faster-lookahead.cc
index 5ff13b0..d6ed2e2 100644
--- a/src/nnet3bin/nnet3-latgen-faster-lookahead.cc
+++ b/src/nnet3bin/nnet3-latgen-faster-lookahead.cc
@@ -37,7 +37,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -133,7 +132,7 @@ int main(int argc, char *argv[]) {
 
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     // this compiler object allows caching of computations across
     // different utterances.
@@ -208,7 +207,7 @@ int main(int argc, char *argv[]) {
       KALDI_ERR << "Not supported for lookahead";
     }
 
-    kaldi::int64 input_frame_count =
+    int64 input_frame_count =
         frame_count * decodable_opts.frame_subsampling_factor;
 
     double elapsed = timer.Elapsed();
diff --git a/src/nnet3bin/nnet3-latgen-faster-looped-parallel.cc b/src/nnet3bin/nnet3-latgen-faster-looped-parallel.cc
index 1b7f947..30d2c93 100644
--- a/src/nnet3bin/nnet3-latgen-faster-looped-parallel.cc
+++ b/src/nnet3bin/nnet3-latgen-faster-looped-parallel.cc
@@ -57,7 +57,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -156,7 +155,7 @@ int main(int argc, char *argv[]) {
     NnetBatchLoopedComputer computer(decodable_info);
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
@@ -283,7 +282,7 @@ int main(int argc, char *argv[]) {
       sequencer.Wait(); // Waits for all tasks to be done.
     }
 
-    kaldi::int64 input_frame_count =
+    int64 input_frame_count =
         frame_count * decodable_opts.frame_subsampling_factor;
 
     double elapsed = timer.Elapsed();
diff --git a/src/nnet3bin/nnet3-latgen-faster-looped.cc b/src/nnet3bin/nnet3-latgen-faster-looped.cc
index 1d46d00..1c0e5fd 100644
--- a/src/nnet3bin/nnet3-latgen-faster-looped.cc
+++ b/src/nnet3bin/nnet3-latgen-faster-looped.cc
@@ -37,7 +37,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -125,7 +124,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     // this object contains precomputed stuff that is used by all decodable
@@ -251,7 +250,7 @@ int main(int argc, char *argv[]) {
       }
     }
 
-    kaldi::int64 input_frame_count =
+    int64 input_frame_count =
         frame_count * decodable_opts.frame_subsampling_factor;
 
     double elapsed = timer.Elapsed();
diff --git a/src/nnet3bin/nnet3-latgen-faster-parallel.cc b/src/nnet3bin/nnet3-latgen-faster-parallel.cc
index e3d0241..dcd162d 100644
--- a/src/nnet3bin/nnet3-latgen-faster-parallel.cc
+++ b/src/nnet3bin/nnet3-latgen-faster-parallel.cc
@@ -39,7 +39,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -130,7 +129,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
 
     if (ClassifyRspecifier(fst_in_str, NULL, NULL) == kNoRspecifier) {
@@ -257,7 +256,7 @@ int main(int argc, char *argv[]) {
       sequencer.Wait(); // Waits for all tasks to be done.
     }
 
-    kaldi::int64 input_frame_count =
+    int64 input_frame_count =
         frame_count * decodable_opts.frame_subsampling_factor;
 
     double elapsed = timer.Elapsed();
diff --git a/src/nnet3bin/nnet3-latgen-faster.cc b/src/nnet3bin/nnet3-latgen-faster.cc
index 42cd843..a0ee1a8 100644
--- a/src/nnet3bin/nnet3-latgen-faster.cc
+++ b/src/nnet3bin/nnet3-latgen-faster.cc
@@ -37,7 +37,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -125,7 +124,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     // this compiler object allows caching of computations across
     // different utterances.
@@ -249,7 +248,7 @@ int main(int argc, char *argv[]) {
       }
     }
 
-    kaldi::int64 input_frame_count =
+    int64 input_frame_count =
         frame_count * decodable_opts.frame_subsampling_factor;
 
     double elapsed = timer.Elapsed();
diff --git a/src/nnet3bin/nnet3-latgen-grammar.cc b/src/nnet3bin/nnet3-latgen-grammar.cc
index 3083723..66cab71 100644
--- a/src/nnet3bin/nnet3-latgen-grammar.cc
+++ b/src/nnet3bin/nnet3-latgen-grammar.cc
@@ -37,7 +37,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -127,7 +126,7 @@ int main(int argc, char *argv[]) {
                    << word_syms_filename;
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_fail = 0;
     // this compiler object allows caching of computations across
     // different utterances.
@@ -191,7 +190,7 @@ int main(int argc, char *argv[]) {
       }
     }
 
-    kaldi::int64 input_frame_count =
+    int64 input_frame_count =
         frame_count * decodable_opts.frame_subsampling_factor;
 
     double elapsed = timer.Elapsed();
diff --git a/src/nnet3bin/nnet3-merge-egs.cc b/src/nnet3bin/nnet3-merge-egs.cc
index 8a345a4..425e32d 100644
--- a/src/nnet3bin/nnet3-merge-egs.cc
+++ b/src/nnet3bin/nnet3-merge-egs.cc
@@ -43,8 +43,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This copies nnet training examples from input to output, but while doing so it\n"
diff --git a/src/nnet3bin/nnet3-show-progress.cc b/src/nnet3bin/nnet3-show-progress.cc
index 25a65db..99f34d5 100644
--- a/src/nnet3bin/nnet3-show-progress.cc
+++ b/src/nnet3bin/nnet3-show-progress.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Given an old and a new 'raw' nnet3 network and some training examples\n"
diff --git a/src/nnet3bin/nnet3-shuffle-egs.cc b/src/nnet3bin/nnet3-shuffle-egs.cc
index f456c5f..c7a14d9 100644
--- a/src/nnet3bin/nnet3-shuffle-egs.cc
+++ b/src/nnet3bin/nnet3-shuffle-egs.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Copy examples (typically single frames or small groups of frames) for\n"
diff --git a/src/nnet3bin/nnet3-subset-egs.cc b/src/nnet3bin/nnet3-subset-egs.cc
index 2ef23d2..2251a81 100644
--- a/src/nnet3bin/nnet3-subset-egs.cc
+++ b/src/nnet3bin/nnet3-subset-egs.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Creates a random subset of the input examples, of a specified size.\n"
diff --git a/src/nnet3bin/nnet3-train.cc b/src/nnet3bin/nnet3-train.cc
index d3fbaa5..f61e19c 100644
--- a/src/nnet3bin/nnet3-train.cc
+++ b/src/nnet3bin/nnet3-train.cc
@@ -26,8 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Train nnet3 neural network parameters with backprop and stochastic\n"
diff --git a/src/nnet3bin/nnet3-xvector-compute-batched.cc b/src/nnet3bin/nnet3-xvector-compute-batched.cc
index 0124081..eafb045 100644
--- a/src/nnet3bin/nnet3-xvector-compute-batched.cc
+++ b/src/nnet3bin/nnet3-xvector-compute-batched.cc
@@ -525,8 +525,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Propagate features through an xvector neural network model and write\n"
diff --git a/src/nnet3bin/nnet3-xvector-compute.cc b/src/nnet3bin/nnet3-xvector-compute.cc
index a2d0457..59cff6c 100644
--- a/src/nnet3bin/nnet3-xvector-compute.cc
+++ b/src/nnet3bin/nnet3-xvector-compute.cc
@@ -64,8 +64,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Propagate features through an xvector neural network model and write\n"
diff --git a/src/nnet3bin/nnet3-xvector-get-egs.cc b/src/nnet3bin/nnet3-xvector-get-egs.cc
index 10d29ee..563f13a 100644
--- a/src/nnet3bin/nnet3-xvector-get-egs.cc
+++ b/src/nnet3bin/nnet3-xvector-get-egs.cc
@@ -134,7 +134,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet3;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Get examples for training an nnet3 neural network for the xvector\n"
diff --git a/src/nnetbin/cmvn-to-nnet.cc b/src/nnetbin/cmvn-to-nnet.cc
index c06851e..24a2e61 100644
--- a/src/nnetbin/cmvn-to-nnet.cc
+++ b/src/nnetbin/cmvn-to-nnet.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
       "Convert cmvn-stats into <AddShift> and <Rescale> components.\n"
diff --git a/src/nnetbin/feat-to-post.cc b/src/nnetbin/feat-to-post.cc
index 6e4f430..26b1d2c 100644
--- a/src/nnetbin/feat-to-post.cc
+++ b/src/nnetbin/feat-to-post.cc
@@ -26,7 +26,6 @@
  *  format of NN training targets in 'nnet1'. */
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Convert features into posterior format, which is the generic format \n"
diff --git a/src/nnetbin/nnet-concat.cc b/src/nnetbin/nnet-concat.cc
index 71c72d0..bafdb8e 100644
--- a/src/nnetbin/nnet-concat.cc
+++ b/src/nnetbin/nnet-concat.cc
@@ -25,7 +25,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
       "Concatenate Neural Networks (and possibly change binary/text format)\n"
diff --git a/src/nnetbin/nnet-copy.cc b/src/nnetbin/nnet-copy.cc
index c4a27f2..80aa222 100644
--- a/src/nnetbin/nnet-copy.cc
+++ b/src/nnetbin/nnet-copy.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
       "Copy Neural Network model (and possibly change binary/text format)\n"
diff --git a/src/nnetbin/nnet-forward.cc b/src/nnetbin/nnet-forward.cc
index 062bca7..32ae97e 100644
--- a/src/nnetbin/nnet-forward.cc
+++ b/src/nnetbin/nnet-forward.cc
@@ -60,7 +60,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     po.Read(argc, argv);
 
@@ -112,7 +111,7 @@ int main(int argc, char *argv[]) {
     nnet_transf.SetDropoutRate(0.0);
     nnet.SetDropoutRate(0.0);
 
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     BaseFloatMatrixWriter feature_writer(feature_wspecifier);
diff --git a/src/nnetbin/nnet-info.cc b/src/nnetbin/nnet-info.cc
index b35ef7d..c479c7a 100644
--- a/src/nnetbin/nnet-info.cc
+++ b/src/nnetbin/nnet-info.cc
@@ -25,7 +25,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Print human-readable information about the neural network.\n"
diff --git a/src/nnetbin/nnet-initialize.cc b/src/nnetbin/nnet-initialize.cc
index fed2555..67a69cf 100644
--- a/src/nnetbin/nnet-initialize.cc
+++ b/src/nnetbin/nnet-initialize.cc
@@ -25,7 +25,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
       "Initialize Neural Network parameters according to a prototype (nnet1).\n"
diff --git a/src/nnetbin/nnet-set-learnrate.cc b/src/nnetbin/nnet-set-learnrate.cc
index c520e6b..c852dad 100644
--- a/src/nnetbin/nnet-set-learnrate.cc
+++ b/src/nnetbin/nnet-set-learnrate.cc
@@ -28,7 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
       "Sets learning rate coefficient inside of 'nnet1' model\n"
diff --git a/src/nnetbin/nnet-train-frmshuff.cc b/src/nnetbin/nnet-train-frmshuff.cc
index cc50e33..b44dfa2 100644
--- a/src/nnetbin/nnet-train-frmshuff.cc
+++ b/src/nnetbin/nnet-train-frmshuff.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
@@ -106,7 +105,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SelectGpuId(use_gpu);
@@ -126,7 +124,7 @@ int main(int argc, char *argv[]) {
       nnet.SetDropoutRate(0.0);
     }
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     RandomAccessPosteriorReader targets_reader(targets_rspecifier);
diff --git a/src/nnetbin/nnet-train-mmi-sequential.cc b/src/nnetbin/nnet-train-mmi-sequential.cc
index 1f67860..a9fb6eb 100644
--- a/src/nnetbin/nnet-train-mmi-sequential.cc
+++ b/src/nnetbin/nnet-train-mmi-sequential.cc
@@ -46,7 +46,7 @@ void LatticeAcousticRescore(const Matrix<BaseFloat> &log_like,
                             const TransitionModel &trans_model,
                             const std::vector<int32> &state_times,
                             Lattice *lat) {
-  kaldi::uint64 props = lat->Properties(fst::kFstProperties, false);
+  uint64 props = lat->Properties(fst::kFstProperties, false);
   if (!(props & fst::kTopSorted))
     KALDI_ERR << "Input lattice must be topologically sorted.";
 
@@ -85,7 +85,6 @@ void LatticeAcousticRescore(const Matrix<BaseFloat> &log_like,
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Perform one iteration of MMI training using SGD with per-utterance "
@@ -128,7 +127,7 @@ int main(int argc, char *argv[]) {
         "Add in the scores in the input lattices with this scale, "
         "rather than discarding them.");
 
-    kaldi::int32 max_frames = 6000;
+    int32 max_frames = 6000;
     po.Register("max-frames", &max_frames,
         "Maximum number of frames an utterance can have (skipped if longer)");
 
@@ -157,7 +156,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SelectGpuId(use_gpu);
@@ -214,7 +212,7 @@ int main(int argc, char *argv[]) {
     int32 num_done = 0, num_no_num_ali = 0, num_no_den_lat = 0,
           num_other_error = 0, num_frm_drop = 0;
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
     double lat_like;  // total likelihood of the lattice
     double lat_ac_like;  // acoustic likelihood weighted by posterior.
     double total_mmi_obj = 0.0, mmi_obj = 0.0;
@@ -265,7 +263,7 @@ int main(int argc, char *argv[]) {
                           &den_lat);
       }
       // optional sort it topologically
-      kaldi::uint64 props = den_lat.Properties(fst::kFstProperties, false);
+      uint64 props = den_lat.Properties(fst::kFstProperties, false);
       if (!(props & fst::kTopSorted)) {
         if (fst::TopSort(&den_lat) == false) {
           KALDI_ERR << "Cycles detected in lattice.";
diff --git a/src/nnetbin/nnet-train-mpe-sequential.cc b/src/nnetbin/nnet-train-mpe-sequential.cc
index d1e1220..2984b33 100644
--- a/src/nnetbin/nnet-train-mpe-sequential.cc
+++ b/src/nnetbin/nnet-train-mpe-sequential.cc
@@ -46,7 +46,7 @@ void LatticeAcousticRescore(const Matrix<BaseFloat> &log_like,
                             const TransitionModel &trans_model,
                             const std::vector<int32> &state_times,
                             Lattice *lat) {
-  kaldi::uint64 props = lat->Properties(fst::kFstProperties, false);
+  uint64 props = lat->Properties(fst::kFstProperties, false);
   if (!(props & fst::kTopSorted))
     KALDI_ERR << "Input lattice must be topologically sorted.";
 
@@ -85,7 +85,6 @@ void LatticeAcousticRescore(const Matrix<BaseFloat> &log_like,
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Perform one iteration of MPE/sMBR training using SGD with per-utterance "
@@ -136,7 +135,7 @@ int main(int argc, char *argv[]) {
     po.Register("one-silence-class", &one_silence_class,
         "If true, the newer behavior reduces insertions.");
 
-    kaldi::int32 max_frames = 6000;
+    int32 max_frames = 6000;
     po.Register("max-frames", &max_frames,
         "Maximum number of frames an utterance can have (skipped if longer)");
 
@@ -221,7 +220,7 @@ int main(int argc, char *argv[]) {
           num_no_den_lat = 0,
           num_other_error = 0;
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
     double total_frame_acc = 0.0, utt_frame_acc;
 
     // main loop over utterances,
@@ -269,7 +268,7 @@ int main(int argc, char *argv[]) {
                           &den_lat);
       }
       // optional sort it topologically
-      kaldi::uint64 props = den_lat.Properties(fst::kFstProperties, false);
+      uint64 props = den_lat.Properties(fst::kFstProperties, false);
       if (!(props & fst::kTopSorted)) {
         if (fst::TopSort(&den_lat) == false) {
           KALDI_ERR << "Cycles detected in lattice.";
diff --git a/src/nnetbin/nnet-train-multistream-perutt.cc b/src/nnetbin/nnet-train-multistream-perutt.cc
index 3694cf2..21f5a38 100644
--- a/src/nnetbin/nnet-train-multistream-perutt.cc
+++ b/src/nnetbin/nnet-train-multistream-perutt.cc
@@ -34,7 +34,6 @@
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
@@ -105,7 +104,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SelectGpuId(use_gpu);
@@ -125,7 +123,7 @@ int main(int argc, char *argv[]) {
       nnet.SetDropoutRate(0.0);
     }
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
 
     // Initialize feature and target readers,
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
@@ -309,7 +307,7 @@ int main(int argc, char *argv[]) {
         }
       }
 
-      kaldi::int64 tmp_frames = total_frames;
+      int64 tmp_frames = total_frames;
 
       num_done += frame_num_utt.size();
       total_frames += std::accumulate(frame_num_utt.begin(), frame_num_utt.end(), 0);
diff --git a/src/nnetbin/nnet-train-multistream.cc b/src/nnetbin/nnet-train-multistream.cc
index 0667aa8..777280e 100644
--- a/src/nnetbin/nnet-train-multistream.cc
+++ b/src/nnetbin/nnet-train-multistream.cc
@@ -109,7 +109,6 @@ bool ReadData(SequentialBaseFloatMatrixReader& feature_reader,
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
@@ -184,7 +183,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SelectGpuId(use_gpu);
@@ -204,7 +202,7 @@ int main(int argc, char *argv[]) {
       nnet.SetDropoutRate(0.0);
     }
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     RandomAccessPosteriorReader target_reader(targets_rspecifier);
@@ -405,7 +403,7 @@ int main(int argc, char *argv[]) {
         }
       }
 
-      kaldi::int64 tmp_frames = total_frames;
+      int64 tmp_frames = total_frames;
 
       num_done += std::accumulate(new_utt_flags.begin(), new_utt_flags.end(), 0);
       total_frames += std::accumulate(frame_num_utt.begin(), frame_num_utt.end(), 0);
diff --git a/src/nnetbin/nnet-train-perutt.cc b/src/nnetbin/nnet-train-perutt.cc
index 8f417e1..59860d9 100644
--- a/src/nnetbin/nnet-train-perutt.cc
+++ b/src/nnetbin/nnet-train-perutt.cc
@@ -29,7 +29,6 @@
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
 
   try {
     const char *usage =
@@ -70,7 +69,7 @@ int main(int argc, char *argv[]) {
     po.Register("frame-weights", &frame_weights,
         "Per-frame weights to scale gradients (frame selection/weighting).");
 
-    kaldi::int32 max_frames = 6000;  // Allow segments maximum of one minute by default
+    int32 max_frames = 6000;  // Allow segments maximum of one minute by default
     po.Register("max-frames",&max_frames, "Maximum number of frames a segment can have to be processed");
 
     std::string use_gpu="yes";
@@ -101,7 +100,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SelectGpuId(use_gpu);
@@ -121,7 +119,7 @@ int main(int argc, char *argv[]) {
       nnet.SetDropoutRate(0.0);
     }
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     RandomAccessPosteriorReader targets_reader(targets_rspecifier);
diff --git a/src/nnetbin/paste-post.cc b/src/nnetbin/paste-post.cc
index 10d72f4..40af04c 100644
--- a/src/nnetbin/paste-post.cc
+++ b/src/nnetbin/paste-post.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Combine 2 or more streams with NN-training targets into single stream.\n"
diff --git a/src/nnetbin/rbm-convert-to-nnet.cc b/src/nnetbin/rbm-convert-to-nnet.cc
index 3ac8962..edf61b2 100644
--- a/src/nnetbin/rbm-convert-to-nnet.cc
+++ b/src/nnetbin/rbm-convert-to-nnet.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Convert RBM to <affinetransform> and <sigmoid>\n"
diff --git a/src/nnetbin/rbm-train-cd1-frmshuff.cc b/src/nnetbin/rbm-train-cd1-frmshuff.cc
index 09e6f24..387e6b9 100644
--- a/src/nnetbin/rbm-train-cd1-frmshuff.cc
+++ b/src/nnetbin/rbm-train-cd1-frmshuff.cc
@@ -32,7 +32,6 @@
 int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace kaldi::nnet1;
-  typedef kaldi::int32 int32;
   try {
     const char *usage =
       "Train RBM by Contrastive Divergence alg. with 1 step of "
@@ -71,7 +70,7 @@ int main(int argc, char *argv[]) {
     rnd_opts.minibatch_size = 100;
     rnd_opts.Register(&po);
 
-    kaldi::int32 max_frames = 6000;
+    int32 max_frames = 6000;
     po.Register("max-frames", &max_frames,
         "Maximum number of frames an utterance can have (skipped if longer)");
 
@@ -95,7 +94,6 @@ int main(int argc, char *argv[]) {
 
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
 #if HAVE_CUDA == 1
     CuDevice::Instantiate().SelectGpuId(use_gpu);
@@ -128,7 +126,7 @@ int main(int argc, char *argv[]) {
     // pass options to RBM,
     rbm.SetRbmTrainOptions(trn_opts_rbm);
 
-    kaldi::int64 total_frames = 0;
+    int64 total_frames = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     RandomizerMask randomizer_mask(rnd_opts);
diff --git a/src/nnetbin/train-transitions.cc b/src/nnetbin/train-transitions.cc
index 0226e09..2d13a14 100644
--- a/src/nnetbin/train-transitions.cc
+++ b/src/nnetbin/train-transitions.cc
@@ -26,7 +26,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Train the transition probabilities in transition-model "
diff --git a/src/nnetbin/transf-to-nnet.cc b/src/nnetbin/transf-to-nnet.cc
index f83c71c..db174b2 100644
--- a/src/nnetbin/transf-to-nnet.cc
+++ b/src/nnetbin/transf-to-nnet.cc
@@ -26,7 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet1;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Convert transformation matrix to <affine-transform>\n"
diff --git a/src/online/online-tcp-source.cc b/src/online/online-tcp-source.cc
index 8421073..8529938 100644
--- a/src/online/online-tcp-source.cc
+++ b/src/online/online-tcp-source.cc
@@ -24,8 +24,6 @@
 
 namespace kaldi {
 
-typedef int32 int32;
-
 OnlineTcpVectorSource::OnlineTcpVectorSource(int32 socket)
     : socket_desc(socket),
       connected(true),
diff --git a/src/online2bin/apply-cmvn-online.cc b/src/online2bin/apply-cmvn-online.cc
index 06157d0..f0c2a18 100644
--- a/src/online2bin/apply-cmvn-online.cc
+++ b/src/online2bin/apply-cmvn-online.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Apply online cepstral mean (and possibly variance) computation online,\n"
diff --git a/src/online2bin/compress-uncompress-speex.cc b/src/online2bin/compress-uncompress-speex.cc
index 677e6ed..5df4571 100644
--- a/src/online2bin/compress-uncompress-speex.cc
+++ b/src/online2bin/compress-uncompress-speex.cc
@@ -26,7 +26,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Demonstrating how to use the Speex wrapper in Kaldi by compressing input waveforms \n"
diff --git a/src/online2bin/extend-wav-with-silence.cc b/src/online2bin/extend-wav-with-silence.cc
index a8f6b06..0f7006c 100644
--- a/src/online2bin/extend-wav-with-silence.cc
+++ b/src/online2bin/extend-wav-with-silence.cc
@@ -42,7 +42,6 @@ void ExtendWaveWithSilence(const Vector<BaseFloat> &wav_in,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Extend wave data with a fairly long silence at the end (e.g. 5 seconds).\n"
diff --git a/src/online2bin/ivector-extract-online2.cc b/src/online2bin/ivector-extract-online2.cc
index e697de6..c4de287 100644
--- a/src/online2bin/ivector-extract-online2.cc
+++ b/src/online2bin/ivector-extract-online2.cc
@@ -27,8 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
-  typedef kaldi::int64 int64;
   try {
     const char *usage =
         "Extract iVectors for utterances every --ivector-period frames, using a trained\n"
diff --git a/src/online2bin/online2-tcp-nnet3-decode-faster-emscripten.cc b/src/online2bin/online2-tcp-nnet3-decode-faster-emscripten.cc
index 7a7f795..e8c60e3 100644
--- a/src/online2bin/online2-tcp-nnet3-decode-faster-emscripten.cc
+++ b/src/online2bin/online2-tcp-nnet3-decode-faster-emscripten.cc
@@ -198,8 +198,6 @@ class OnlineASR {
 #ifndef __EMSCRIPTEN__
 
 int main(int argc, const char* const* argv) {
-  using kaldi::int32;
-  using kaldi::int64;
   using kaldi::OnlineASR;
   using kaldi::OnlineASROptionParser;
   using kaldi::Vector;
@@ -262,13 +260,12 @@ int main(int argc, const char* const* argv) {
 #include <iterator>
 
 using std::vector;
-using kaldi::int16;
 using emscripten::val;
 using emscripten::class_;
 using emscripten::optional_override;
 using emscripten::register_vector;
 
-/* Convert JS Int16Array to C++ std::vector<kaldi::int16> without copy of data
+/* Convert JS Int16Array to C++ std::vector<int16> without copy of data
 */
 vector<int16> typed_array_to_vector(const val &int16_array) {
   unsigned int length = int16_array["length"].as<unsigned int>();
diff --git a/src/online2bin/online2-tcp-nnet3-decode-faster.cc b/src/online2bin/online2-tcp-nnet3-decode-faster.cc
index 0adead0..1d0c94c 100644
--- a/src/online2bin/online2-tcp-nnet3-decode-faster.cc
+++ b/src/online2bin/online2-tcp-nnet3-decode-faster.cc
@@ -118,8 +118,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in audio from a network socket and performs online\n"
diff --git a/src/online2bin/online2-wav-dump-features.cc b/src/online2bin/online2-wav-dump-features.cc
index 6ddd3bf..44e5e57 100644
--- a/src/online2bin/online2-wav-dump-features.cc
+++ b/src/online2bin/online2-wav-dump-features.cc
@@ -32,8 +32,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
     
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     
     const char *usage =
         "Reads in wav file(s) and processes them as in online2-wav-nnet2-latgen-faster,\n"
diff --git a/src/online2bin/online2-wav-gmm-latgen-faster.cc b/src/online2bin/online2-wav-gmm-latgen-faster.cc
index b3dbf5e..c912b5f 100644
--- a/src/online2bin/online2-wav-gmm-latgen-faster.cc
+++ b/src/online2bin/online2-wav-gmm-latgen-faster.cc
@@ -76,8 +76,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
     
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     
     const char *usage =
         "Reads in wav file(s) and simulates online decoding, including\n"
diff --git a/src/online2bin/online2-wav-nnet2-am-compute.cc b/src/online2bin/online2-wav-nnet2-am-compute.cc
index 34d8129..ec2736a 100644
--- a/src/online2bin/online2-wav-nnet2-am-compute.cc
+++ b/src/online2bin/online2-wav-nnet2-am-compute.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::nnet2;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Simulates the online neural net computation for each file of input\n"
diff --git a/src/online2bin/online2-wav-nnet2-latgen-faster.cc b/src/online2bin/online2-wav-nnet2-latgen-faster.cc
index 135195b..91349c4 100644
--- a/src/online2bin/online2-wav-nnet2-latgen-faster.cc
+++ b/src/online2bin/online2-wav-nnet2-latgen-faster.cc
@@ -77,8 +77,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding with neural nets\n"
diff --git a/src/online2bin/online2-wav-nnet2-latgen-threaded.cc b/src/online2bin/online2-wav-nnet2-latgen-threaded.cc
index 5d8d7fb..cd08c81 100644
--- a/src/online2bin/online2-wav-nnet2-latgen-threaded.cc
+++ b/src/online2bin/online2-wav-nnet2-latgen-threaded.cc
@@ -77,8 +77,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding with neural nets\n"
diff --git a/src/online2bin/online2-wav-nnet3-latgen-faster.cc b/src/online2bin/online2-wav-nnet3-latgen-faster.cc
index 2db2a07..4decb68 100644
--- a/src/online2bin/online2-wav-nnet3-latgen-faster.cc
+++ b/src/online2bin/online2-wav-nnet3-latgen-faster.cc
@@ -80,8 +80,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding with neural nets\n"
diff --git a/src/online2bin/online2-wav-nnet3-latgen-grammar.cc b/src/online2bin/online2-wav-nnet3-latgen-grammar.cc
index 7151d19..78ac8ae 100644
--- a/src/online2bin/online2-wav-nnet3-latgen-grammar.cc
+++ b/src/online2bin/online2-wav-nnet3-latgen-grammar.cc
@@ -80,8 +80,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding with neural nets\n"
diff --git a/src/online2bin/online2-wav-nnet3-latgen-incremental.cc b/src/online2bin/online2-wav-nnet3-latgen-incremental.cc
index aaa87f2..94c692a 100644
--- a/src/online2bin/online2-wav-nnet3-latgen-incremental.cc
+++ b/src/online2bin/online2-wav-nnet3-latgen-incremental.cc
@@ -79,8 +79,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding with neural nets\n"
diff --git a/src/online2bin/online2-wav-nnet3-wake-word-decoder-faster.cc b/src/online2bin/online2-wav-nnet3-wake-word-decoder-faster.cc
index e983111..15a6292 100644
--- a/src/online2bin/online2-wav-nnet3-wake-word-decoder-faster.cc
+++ b/src/online2bin/online2-wav-nnet3-wake-word-decoder-faster.cc
@@ -40,8 +40,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Reads in wav file(s) and simulates online decoding for wake word with neural nets\n"
diff --git a/src/onlinebin/online-audio-client.cc b/src/onlinebin/online-audio-client.cc
index 577204b..faca02a 100644
--- a/src/onlinebin/online-audio-client.cc
+++ b/src/onlinebin/online-audio-client.cc
@@ -51,7 +51,6 @@ struct RecognizedWord {
 
 int main(int argc, char** argv) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   #if !defined(_MSC_VER)
   try {
 
diff --git a/src/onlinebin/online-audio-server-decode-faster.cc b/src/onlinebin/online-audio-server-decode-faster.cc
index 43a2fa7..344081d 100644
--- a/src/onlinebin/online-audio-server-decode-faster.cc
+++ b/src/onlinebin/online-audio-server-decode-faster.cc
@@ -70,7 +70,6 @@ int32 main(int argc, char *argv[]) {
   using namespace fst;
 
   try {
-    typedef kaldi::int32 int32;
     typedef OnlineFeInput<Mfcc> FeInput;
     TcpServer tcp_server;
     signal(SIGPIPE, SIG_IGN);
diff --git a/src/onlinebin/online-gmm-decode-faster.cc b/src/onlinebin/online-gmm-decode-faster.cc
index b5b0cbe..4e75bd1 100644
--- a/src/onlinebin/online-gmm-decode-faster.cc
+++ b/src/onlinebin/online-gmm-decode-faster.cc
@@ -34,7 +34,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
     typedef OnlineFeInput<Mfcc> FeInput;
 
     // Up to delta-delta derivative features are calculated (unless LDA is used)
diff --git a/src/onlinebin/online-net-client.cc b/src/onlinebin/online-net-client.cc
index 64d1578..d81566c 100644
--- a/src/onlinebin/online-net-client.cc
+++ b/src/onlinebin/online-net-client.cc
@@ -33,7 +33,6 @@ int main(int argc, char *argv[]) {
 #ifndef KALDI_NO_PORTAUDIO
     using namespace kaldi;
 
-    typedef kaldi::int32 int32;
     typedef OnlineFeInput<Mfcc> FeInput;
 
     // Time out interval for the PortAudio source
diff --git a/src/onlinebin/online-server-gmm-decode-faster.cc b/src/onlinebin/online-server-gmm-decode-faster.cc
index 29384d6..2dc0000 100644
--- a/src/onlinebin/online-server-gmm-decode-faster.cc
+++ b/src/onlinebin/online-server-gmm-decode-faster.cc
@@ -58,7 +58,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
 
     // Up to delta-delta derivative features are calculated (unless LDA is used)
     const int32 kDeltaOrder = 2;
diff --git a/src/onlinebin/online-wav-gmm-decode-faster.cc b/src/onlinebin/online-wav-gmm-decode-faster.cc
index 9a50a5c..dfa43a1 100644
--- a/src/onlinebin/online-wav-gmm-decode-faster.cc
+++ b/src/onlinebin/online-wav-gmm-decode-faster.cc
@@ -33,7 +33,6 @@ int main(int argc, char *argv[]) {
     using namespace kaldi;
     using namespace fst;
 
-    typedef kaldi::int32 int32;
     typedef OnlineFeInput<Mfcc> FeInput;
 
     // up to delta-delta derivative features are calculated (unless LDA is used)
diff --git a/src/rnnlmbin/rnnlm-compute-prob.cc b/src/rnnlmbin/rnnlm-compute-prob.cc
index 6110147..03256a7 100644
--- a/src/rnnlmbin/rnnlm-compute-prob.cc
+++ b/src/rnnlmbin/rnnlm-compute-prob.cc
@@ -29,8 +29,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program computes the probability per word of the provided training\n"
diff --git a/src/rnnlmbin/rnnlm-get-egs.cc b/src/rnnlmbin/rnnlm-get-egs.cc
index f124a87..a0898d3 100644
--- a/src/rnnlmbin/rnnlm-get-egs.cc
+++ b/src/rnnlmbin/rnnlm-get-egs.cc
@@ -27,8 +27,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program processes lines of text (typically sentences) with weights,\n"
diff --git a/src/rnnlmbin/rnnlm-get-sampling-lm.cc b/src/rnnlmbin/rnnlm-get-sampling-lm.cc
index 481c1eb..33e91dc 100644
--- a/src/rnnlmbin/rnnlm-get-sampling-lm.cc
+++ b/src/rnnlmbin/rnnlm-get-sampling-lm.cc
@@ -26,8 +26,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     SamplingLmEstimatorOptions config;
     bool binary = true;
diff --git a/src/rnnlmbin/rnnlm-get-word-embedding.cc b/src/rnnlmbin/rnnlm-get-word-embedding.cc
index b87b4d0..8c7b757 100644
--- a/src/rnnlmbin/rnnlm-get-word-embedding.cc
+++ b/src/rnnlmbin/rnnlm-get-word-embedding.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This very simple program multiplies a sparse matrix by a\n"
diff --git a/src/rnnlmbin/rnnlm-sentence-probs.cc b/src/rnnlmbin/rnnlm-sentence-probs.cc
index ec9f7fc..9d47958 100644
--- a/src/rnnlmbin/rnnlm-sentence-probs.cc
+++ b/src/rnnlmbin/rnnlm-sentence-probs.cc
@@ -32,8 +32,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "This program takes input of a text corpus (with words represented by\n"
diff --git a/src/rnnlmbin/rnnlm-train.cc b/src/rnnlmbin/rnnlm-train.cc
index d9107e3..65f6b55 100644
--- a/src/rnnlmbin/rnnlm-train.cc
+++ b/src/rnnlmbin/rnnlm-train.cc
@@ -28,8 +28,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
 
     // rnnlm_rxfilename must be supplied, via --read-rnnlm option.
diff --git a/src/sgmm2/am-sgmm2-test.cc b/src/sgmm2/am-sgmm2-test.cc
index 5dee50f..ee3feae 100644
--- a/src/sgmm2/am-sgmm2-test.cc
+++ b/src/sgmm2/am-sgmm2-test.cc
@@ -24,7 +24,6 @@
 #include "util/kaldi-io.h"
 
 using kaldi::AmSgmm2;
-using kaldi::int32;
 using kaldi::BaseFloat;
 namespace ut = kaldi::unittest;
 
diff --git a/src/sgmm2/estimate-am-sgmm2-test.cc b/src/sgmm2/estimate-am-sgmm2-test.cc
index bfdb161..c6aa6c3 100644
--- a/src/sgmm2/estimate-am-sgmm2-test.cc
+++ b/src/sgmm2/estimate-am-sgmm2-test.cc
@@ -27,7 +27,6 @@
 
 using kaldi::AmSgmm2;
 using kaldi::MleAmSgmm2Accs;
-using kaldi::int32;
 using kaldi::BaseFloat;
 using kaldi::Exp;
 
diff --git a/src/sgmm2/fmllr-sgmm2-test.cc b/src/sgmm2/fmllr-sgmm2-test.cc
index ede25d7..a3e0aca 100644
--- a/src/sgmm2/fmllr-sgmm2-test.cc
+++ b/src/sgmm2/fmllr-sgmm2-test.cc
@@ -27,7 +27,6 @@
 #include "util/kaldi-io.h"
 
 using kaldi::AmSgmm2;
-using kaldi::int32;
 using kaldi::BaseFloat;
 using kaldi::Vector;
 using kaldi::Matrix;
diff --git a/src/sgmm2bin/init-ubm.cc b/src/sgmm2bin/init-ubm.cc
index 3a0d398..84a272d 100644
--- a/src/sgmm2bin/init-ubm.cc
+++ b/src/sgmm2bin/init-ubm.cc
@@ -29,7 +29,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     typedef kaldi::BaseFloat BaseFloat;
 
     const char *usage =
diff --git a/src/sgmm2bin/sgmm2-acc-stats-gpost.cc b/src/sgmm2bin/sgmm2-acc-stats-gpost.cc
index 9c6fa59..ef63389 100644
--- a/src/sgmm2bin/sgmm2-acc-stats-gpost.cc
+++ b/src/sgmm2bin/sgmm2-acc-stats-gpost.cc
@@ -62,7 +62,6 @@ int main(int argc, char *argv[]) {
         accs_wxfilename = po.GetArg(4);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     // Initialize the readers before the model, as this can avoid
     // crashes on systems with low virtual memory.
diff --git a/src/sgmm2bin/sgmm2-acc-stats.cc b/src/sgmm2bin/sgmm2-acc-stats.cc
index a083e16..75f7706 100644
--- a/src/sgmm2bin/sgmm2-acc-stats.cc
+++ b/src/sgmm2bin/sgmm2-acc-stats.cc
@@ -69,7 +69,6 @@ int main(int argc, char *argv[]) {
         accs_wxfilename = po.GetArg(4);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     int32 num_done = 0, num_err = 0;
     Vector<double> transition_accs;
diff --git a/src/sgmm2bin/sgmm2-acc-stats2.cc b/src/sgmm2bin/sgmm2-acc-stats2.cc
index a2446df..8867e84 100644
--- a/src/sgmm2bin/sgmm2-acc-stats2.cc
+++ b/src/sgmm2bin/sgmm2-acc-stats2.cc
@@ -68,8 +68,6 @@ int main(int argc, char *argv[]) {
     
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     // Initialize the readers before the model, as the model can
     // be large, and we don't want to call fork() after reading it if
diff --git a/src/sgmm2bin/sgmm2-align-compiled.cc b/src/sgmm2bin/sgmm2-align-compiled.cc
index 6b733fe..71c2d34 100644
--- a/src/sgmm2bin/sgmm2-align-compiled.cc
+++ b/src/sgmm2bin/sgmm2-align-compiled.cc
@@ -33,7 +33,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
@@ -110,7 +109,7 @@ int main(int argc, char *argv[]) {
 
     int num_done = 0, num_err = 0, num_retry = 0;
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
 
     for (; !fst_reader.Done(); fst_reader.Next()) {
       std::string utt = fst_reader.Key();
diff --git a/src/sgmm2bin/sgmm2-comp-prexform.cc b/src/sgmm2bin/sgmm2-comp-prexform.cc
index a216300..03e7791 100644
--- a/src/sgmm2bin/sgmm2-comp-prexform.cc
+++ b/src/sgmm2bin/sgmm2-comp-prexform.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Compute \"pre-transform\" parameters required for estimating fMLLR with\n"
diff --git a/src/sgmm2bin/sgmm2-copy.cc b/src/sgmm2bin/sgmm2-copy.cc
index b3271e0..61c69ed 100644
--- a/src/sgmm2bin/sgmm2-copy.cc
+++ b/src/sgmm2bin/sgmm2-copy.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Copy SGMM (possibly changing binary/text format)\n"
         "Usage: sgmm2-copy [options] <model-in> <model-out>\n"
diff --git a/src/sgmm2bin/sgmm2-est-ebw.cc b/src/sgmm2bin/sgmm2-est-ebw.cc
index bff0e8f..4624c8d 100644
--- a/src/sgmm2bin/sgmm2-est-ebw.cc
+++ b/src/sgmm2bin/sgmm2-est-ebw.cc
@@ -27,7 +27,6 @@
 
 int main(int argc, char *argv[]) {
   using namespace kaldi;
-  typedef kaldi::int32 int32;
   using std::string;
   try {
     const char *usage =
diff --git a/src/sgmm2bin/sgmm2-est-fmllr.cc b/src/sgmm2bin/sgmm2-est-fmllr.cc
index 56ad63a..526c84c 100644
--- a/src/sgmm2bin/sgmm2-est-fmllr.cc
+++ b/src/sgmm2bin/sgmm2-est-fmllr.cc
@@ -68,7 +68,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate FMLLR transform for SGMMs, either per utterance or for the "
diff --git a/src/sgmm2bin/sgmm2-est-spkvecs-gpost.cc b/src/sgmm2bin/sgmm2-est-spkvecs-gpost.cc
index 3d8bfbb..4a443c3 100644
--- a/src/sgmm2bin/sgmm2-est-spkvecs-gpost.cc
+++ b/src/sgmm2bin/sgmm2-est-spkvecs-gpost.cc
@@ -56,7 +56,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate SGMM speaker vectors, either per utterance or for the "
diff --git a/src/sgmm2bin/sgmm2-est-spkvecs.cc b/src/sgmm2bin/sgmm2-est-spkvecs.cc
index 8bc0953..2e24807 100644
--- a/src/sgmm2bin/sgmm2-est-spkvecs.cc
+++ b/src/sgmm2bin/sgmm2-est-spkvecs.cc
@@ -61,7 +61,6 @@ void AccumulateForUtterance(const Matrix<BaseFloat> &feats,
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
     using namespace kaldi;
     const char *usage =
         "Estimate SGMM speaker vectors, either per utterance or for the "
diff --git a/src/sgmm2bin/sgmm2-est.cc b/src/sgmm2bin/sgmm2-est.cc
index 39e2509..b50487f 100644
--- a/src/sgmm2bin/sgmm2-est.cc
+++ b/src/sgmm2bin/sgmm2-est.cc
@@ -30,7 +30,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Estimate SGMM model parameters from accumulated stats.\n"
         "Usage: sgmm2-est [options] <model-in> <stats-in> <model-out>\n";
diff --git a/src/sgmm2bin/sgmm2-gselect.cc b/src/sgmm2bin/sgmm2-gselect.cc
index ded53b6..ac0a1d1 100644
--- a/src/sgmm2bin/sgmm2-gselect.cc
+++ b/src/sgmm2bin/sgmm2-gselect.cc
@@ -53,7 +53,6 @@ int main(int argc, char *argv[]) {
         gselect_wspecifier = po.GetArg(3);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     AmSgmm2 am_sgmm;
     {
@@ -65,7 +64,7 @@ int main(int argc, char *argv[]) {
     }
 
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     Int32VectorVectorWriter gselect_writer(gselect_wspecifier);
diff --git a/src/sgmm2bin/sgmm2-info.cc b/src/sgmm2bin/sgmm2-info.cc
index 6b9ce2f..96a2d35 100644
--- a/src/sgmm2bin/sgmm2-info.cc
+++ b/src/sgmm2bin/sgmm2-info.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Print various information about an SGMM.\n"
         "Usage: sgmm2-info [options] <model-in> [model-in2 ... ]\n";
diff --git a/src/sgmm2bin/sgmm2-init.cc b/src/sgmm2bin/sgmm2-init.cc
index 4aaa400..b9d1650 100644
--- a/src/sgmm2bin/sgmm2-init.cc
+++ b/src/sgmm2bin/sgmm2-init.cc
@@ -28,7 +28,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Initialize an SGMM from a trained full-covariance UBM and a specified"
diff --git a/src/sgmm2bin/sgmm2-latgen-faster-parallel.cc b/src/sgmm2bin/sgmm2-latgen-faster-parallel.cc
index 31ed135..c12942d 100644
--- a/src/sgmm2bin/sgmm2-latgen-faster-parallel.cc
+++ b/src/sgmm2bin/sgmm2-latgen-faster-parallel.cc
@@ -107,7 +107,6 @@ void ProcessUtterance(const AmSgmm2 &am_sgmm,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::VectorFst;
@@ -162,7 +161,7 @@ int main(int argc, char *argv[]) {
         alignment_wspecifier = po.GetOptArg(6);
 
     double tot_like = 0.0;
-    kaldi::int64 frame_count = 0;    
+    int64 frame_count = 0;    
     int num_done = 0, num_err = 0;
     Timer timer;
     Fst<StdArc> *decode_fst = NULL;
diff --git a/src/sgmm2bin/sgmm2-latgen-faster.cc b/src/sgmm2bin/sgmm2-latgen-faster.cc
index 39eccc4..340039f 100644
--- a/src/sgmm2bin/sgmm2-latgen-faster.cc
+++ b/src/sgmm2bin/sgmm2-latgen-faster.cc
@@ -88,7 +88,6 @@ bool ProcessUtterance(LatticeFasterDecoder &decoder,
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     using fst::SymbolTable;
     using fst::Fst;
     using fst::StdArc;
@@ -170,7 +169,7 @@ int main(int argc, char *argv[]) {
                                                            utt2spk_rspecifier);
 
     BaseFloat tot_like = 0.0;
-    kaldi::int64 frame_count = 0;
+    int64 frame_count = 0;
     int num_success = 0, num_err = 0;
 
     Timer timer;
diff --git a/src/sgmm2bin/sgmm2-post-to-gpost.cc b/src/sgmm2bin/sgmm2-post-to-gpost.cc
index 2dfbe43..e3f5cc7 100644
--- a/src/sgmm2bin/sgmm2-post-to-gpost.cc
+++ b/src/sgmm2bin/sgmm2-post-to-gpost.cc
@@ -60,7 +60,6 @@ int main(int argc, char *argv[]) {
         gpost_wspecifier = po.GetArg(4);
 
     using namespace kaldi;
-    typedef kaldi::int32 int32;
 
     AmSgmm2 am_sgmm;
     TransitionModel trans_model;
@@ -72,7 +71,7 @@ int main(int argc, char *argv[]) {
     }
 
     double tot_like = 0.0;
-    kaldi::int64 tot_t = 0;
+    int64 tot_t = 0;
 
     SequentialBaseFloatMatrixReader feature_reader(feature_rspecifier);
     RandomAccessPosteriorReader posteriors_reader(posteriors_rspecifier);
diff --git a/src/sgmm2bin/sgmm2-project.cc b/src/sgmm2bin/sgmm2-project.cc
index 7b3d5c4..6e52181 100644
--- a/src/sgmm2bin/sgmm2-project.cc
+++ b/src/sgmm2bin/sgmm2-project.cc
@@ -27,7 +27,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
     const char *usage =
         "Compute SGMM model projection that only models a part of a pre-LDA space.\n"
         "Used in predictive SGMMs.  Takes as input an LDA+MLLT transform,\n"
diff --git a/src/sgmm2bin/sgmm2-rescore-lattice.cc b/src/sgmm2bin/sgmm2-rescore-lattice.cc
index 95daab1..bc35482 100644
--- a/src/sgmm2bin/sgmm2-rescore-lattice.cc
+++ b/src/sgmm2bin/sgmm2-rescore-lattice.cc
@@ -32,8 +32,6 @@
 int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/sgmm2bin/sgmm2-sum-accs.cc b/src/sgmm2bin/sgmm2-sum-accs.cc
index 8259702..95cd2d9 100644
--- a/src/sgmm2bin/sgmm2-sum-accs.cc
+++ b/src/sgmm2bin/sgmm2-sum-accs.cc
@@ -25,7 +25,6 @@
 
 int main(int argc, char *argv[]) {
   try {
-    typedef kaldi::int32 int32;
 
     const char *usage =
         "Sum multiple accumulated stats files for SGMM training.\n"
diff --git a/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm-pruned.cc b/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm-pruned.cc
index ff9e3ce..fe13577 100644
--- a/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm-pruned.cc
+++ b/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm-pruned.cc
@@ -33,8 +33,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::tf_rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
     using fst::SymbolTable;
     using fst::VectorFst;
     using fst::StdArc;
diff --git a/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm.cc b/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm.cc
index 5d500b5..3cebdea 100644
--- a/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm.cc
+++ b/src/tfrnnlmbin/lattice-lmrescore-tf-rnnlm.cc
@@ -31,8 +31,6 @@ int main(int argc, char *argv[]) {
   try {
     using namespace kaldi;
     using namespace kaldi::tf_rnnlm;
-    typedef kaldi::int32 int32;
-    typedef kaldi::int64 int64;
 
     const char *usage =
         "Rescores lattice with rnnlm that is trained with TensorFlow.\n"
diff --git a/src/transform/regtree-mllr-diag-gmm-test.cc b/src/transform/regtree-mllr-diag-gmm-test.cc
index 812a78d..ecf82d4 100644
--- a/src/transform/regtree-mllr-diag-gmm-test.cc
+++ b/src/transform/regtree-mllr-diag-gmm-test.cc
@@ -25,7 +25,6 @@
 #include "gmm/model-test-common.h"
 #include "transform/regtree-mllr-diag-gmm.h"
 
-using kaldi::int32;
 using kaldi::BaseFloat;
 using kaldi::RegtreeMllrDiagGmmAccs;
 namespace ut = kaldi::unittest;
diff --git a/src/util/kaldi-thread.h b/src/util/kaldi-thread.h
index 29cfaee..e51cc39 100644
--- a/src/util/kaldi-thread.h
+++ b/src/util/kaldi-thread.h
@@ -26,6 +26,7 @@
 #include <algorithm>
 #include "itf/options-itf.h"
 #include "util/kaldi-semaphore.h"
+#include "util/kaldi_util_Export.h"
 
 // This header provides convenient mechanisms for parallelization.
 //
@@ -57,7 +58,7 @@
 
 namespace kaldi {
 
-extern int32 g_num_threads;  // Maximum number of threads (for programs that
+extern int32 kaldi_util_EXPORT g_num_threads;  // Maximum number of threads (for programs that
 // use threads, which is not many of them, e.g. the SGMM update program does.
 // This is 8 by default.  You can change this on the command line, where
 // used, with --num-threads.  Programs that think they will use threads
diff --git a/src/util/kaldi_util_Export.h b/src/util/kaldi_util_Export.h
new file mode 100644
index 0000000..4ba9a98
--- /dev/null
+++ b/src/util/kaldi_util_Export.h
@@ -0,0 +1,46 @@
+
+#ifndef kaldi_util_EXPORT_H
+#define kaldi_util_EXPORT_H
+
+#ifdef kaldi_util_BUILT_AS_STATIC
+#  define kaldi_util_EXPORT
+#  define KALDI_util_NO_EXPORT
+#else
+#ifdef _WIN32
+#  ifndef kaldi_util_EXPORT
+#    ifdef kaldi_util_EXPORTS
+        /* We are building this library */
+#      define kaldi_util_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define kaldi_util_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef KALDI_UTIL_NO_EXPORT
+#    define KALDI_UTIL_NO_EXPORT 
+#  endif
+#else
+        #define kaldi_util_EXPORT
+#endif // _WIN32
+#endif
+
+#ifndef KALDI_UTIL_DEPRECATED
+#  define KALDI_UTIL_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef KALDI_UTIL_DEPRECATED_EXPORT
+#  define KALDI_UTIL_DEPRECATED_EXPORT kaldi_util_EXPORT KALDI_UTIL_DEPRECATED
+#endif
+
+#ifndef KALDI_UTIL_DEPRECATED_NO_EXPORT
+#  define KALDI_UTIL_DEPRECATED_NO_EXPORT KALDI_UTIL_NO_EXPORT KALDI_UTIL_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef KALDI_UTIL_NO_DEPRECATED
+#    define KALDI_UTIL_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* kaldi_util_EXPORT_H */
