From d33c39a409927dcb1deddcd990e4f3b717e2f58e Mon Sep 17 00:00:00 2001
From: Yuriy Chernyshov <thegeorg@yandex-team.com>
Date: Thu, 23 Feb 2023 21:23:57 +0300
Subject: [PATCH] Support openfst-1.7.6

---
 src/chain/chain-supervision.cc   | 10 ++++------
 src/fstext/fstext-utils-inl.h    | 12 ++++++------
 src/fstext/kaldi-fst-io-inl.h    |  2 +-
 src/fstext/pre-determinize-inl.h |  4 ++--
 src/kws/kws-functions.cc         |  2 +-
 src/lat/kaldi-lattice.cc         |  4 ++--
 6 files changed, 16 insertions(+), 18 deletions(-)

diff --git src/chain/chain-supervision.cc src/chain/chain-supervision.cc
index f8a2c1d11..b29000a44 100644
--- src/chain/chain-supervision.cc
+++ src/chain/chain-supervision.cc
@@ -571,9 +571,8 @@ void Supervision::Write(std::ostream &os, bool binary) const {
       // Write using StdAcceptorCompactFst, making use of the fact that it's an
       // acceptor.
       fst::FstWriteOptions write_options("<unknown>");
-      fst::StdCompactAcceptorFst::WriteFst(
-          fst, fst::AcceptorCompactor<fst::StdArc>(), os,
-          write_options);
+      fst::StdCompactAcceptorFst cfst(fst);
+      cfst.Write(os, write_options);
     }
   } else {
     KALDI_ASSERT(e2e_fsts.size() == num_sequences);
@@ -586,9 +585,8 @@ void Supervision::Write(std::ostream &os, bool binary) const {
         // Write using StdAcceptorCompactFst, making use of the fact that it's an
         // acceptor.
         fst::FstWriteOptions write_options("<unknown>");
-        fst::StdCompactAcceptorFst::WriteFst(
-            e2e_fsts[i], fst::AcceptorCompactor<fst::StdArc>(), os,
-            write_options);
+        fst::StdCompactAcceptorFst cfst(e2e_fsts[i]);
+        cfst.Write(os, write_options);
       }
     }
     WriteToken(os, binary, "</Fsts>");
diff --git src/fstext/fstext-utils-inl.h src/fstext/fstext-utils-inl.h
index 853697387..d877c03e1 100644
--- src/fstext/fstext-utils-inl.h
+++ src/fstext/fstext-utils-inl.h
@@ -374,12 +374,12 @@ void GetSymbols(const SymbolTable &symtab,
                 std::vector<I> *syms_out) {
   KALDI_ASSERT(syms_out != NULL);
   syms_out->clear();
-  for (SymbolTableIterator iter(symtab);
-      !iter.Done();
-      iter.Next()) {
-    if (include_eps || iter.Value() != 0) {
-      syms_out->push_back(iter.Value());
-      KALDI_ASSERT(syms_out->back() == iter.Value());  // an integer-range thing.
+  for (SymbolTable::iterator iter = symtab.begin();
+      iter != symtab.end();
+      ++iter) {
+    if (include_eps || iter->Label() != 0) {
+      syms_out->push_back(iter->Label());
+      KALDI_ASSERT(syms_out->back() == iter->Label());  // an integer-range thing.
     }
   }
 }
diff --git src/fstext/kaldi-fst-io-inl.h src/fstext/kaldi-fst-io-inl.h
index b6bae4b9d..f7bb3a7c2 100644
--- src/fstext/kaldi-fst-io-inl.h
+++ src/fstext/kaldi-fst-io-inl.h
@@ -44,7 +44,7 @@ void WriteFstKaldi(std::ostream &os, bool binary,
     bool acceptor = false, write_one = false;
     FstPrinter<Arc> printer(t, t.InputSymbols(), t.OutputSymbols(),
                             NULL, acceptor, write_one, "\t");
-    printer.Print(&os, "<unknown>");
+    printer.Print(os, "<unknown>");
     if (os.fail())
       KALDI_ERR << "Stream failure detected writing FST to stream";
     // Write another newline as a terminating character.  The read routine will
diff --git src/fstext/pre-determinize-inl.h src/fstext/pre-determinize-inl.h
index b67b0ba6f..b531bdef2 100644
--- src/fstext/pre-determinize-inl.h
+++ src/fstext/pre-determinize-inl.h
@@ -235,8 +235,8 @@ inline bool HasBannedPrefixPlusDigits(SymbolTable *symTable, std::string prefix,
   assert(symTable != NULL);
   const char *prefix_ptr = prefix.c_str();
   size_t prefix_len = strlen(prefix_ptr);  // allowed to be zero but not encouraged.
-  for (SymbolTableIterator siter(*symTable); !siter.Done(); siter.Next()) {
-    const std::string &sym = siter.Symbol();
+  for (SymbolTable::iterator siter = symTable->begin(); siter != symTable->end(); ++siter) {
+    const std::string &sym = siter->Symbol();
     if (!strncmp(prefix_ptr, sym.c_str(), prefix_len)) {  // has prefix.
       if (isdigit(sym[prefix_len])) {  // we don't allow prefix followed by a digit, as a symbol.
         // Has at least one digit.
diff --git src/kws/kws-functions.cc src/kws/kws-functions.cc
index d1d71ce7a..3e27226f1 100644
--- src/kws/kws-functions.cc
+++ src/kws/kws-functions.cc
@@ -75,7 +75,7 @@ bool ClusterLattice(CompactLattice *clat,
   unordered_map<StateId, std::vector<Interval> >::iterator iter;
   for (iter = head.begin(); iter != head.end(); ++iter) {
     // For this ilabel, sort all the arcs on time, from first to last.
-    sort(iter->second.begin(), iter->second.end(), CompareInterval);
+    std::sort(iter->second.begin(), iter->second.end(), CompareInterval);
     std::vector<Interval> tmp;
     tmp.push_back(iter->second[0]);
     for (int32 i = 1; i < iter->second.size(); i++) {
diff --git src/lat/kaldi-lattice.cc src/lat/kaldi-lattice.cc
index 744cc5384..648e67115 100644
--- src/lat/kaldi-lattice.cc
+++ src/lat/kaldi-lattice.cc
@@ -78,7 +78,7 @@ bool WriteCompactLattice(std::ostream &os, bool binary,
     fst::FstPrinter<CompactLatticeArc> printer(t, t.InputSymbols(),
                                                t.OutputSymbols(),
                                                NULL, acceptor, write_one, "\t");
-    printer.Print(&os, "<unknown>");
+    printer.Print(os, "<unknown>");
     if (os.fail())
       KALDI_WARN << "Stream failure detected.";
     // Write another newline as a terminating character.  The read routine will
@@ -403,7 +403,7 @@ bool WriteLattice(std::ostream &os, bool binary, const Lattice &t) {
     fst::FstPrinter<LatticeArc> printer(t, t.InputSymbols(),
                                         t.OutputSymbols(),
                                         NULL, acceptor, write_one, "\t");
-    printer.Print(&os, "<unknown>");
+    printer.Print(os, "<unknown>");
     if (os.fail())
       KALDI_WARN << "Stream failure detected.";
     // Write another newline as a terminating character.  The read routine will
-- 
2.33.0.windows.1

