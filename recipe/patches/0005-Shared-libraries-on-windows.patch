From a93cba8fc45e8d1546b2dfa98c086d6d24452905 Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Wed, 10 May 2023 13:34:32 -0700
Subject: [PATCH] Shared libraries on windows

---
 CMakeLists.txt                                | 25 +++++++------
 cmake/gen_cmake_skeleton.py                   | 28 +++++++++++++++
 src/base/kaldi-dll-exports.h                  | 29 +++++++++++++++
 src/base/kaldi-error.h                        |  3 +-
 src/base/kaldi-types.h                        | 36 +++++++++++++------
 src/bin/phones-to-prons.cc                    |  8 ++---
 src/cudafeat/feature-spectral-cuda.cu         | 20 +++++------
 src/cudamatrix/cu-allocator.h                 |  5 +--
 src/cudamatrix/cu-device.cc                   |  5 ++-
 src/cudamatrix/cu-device.h                    | 12 +++----
 src/fstbin/make-grammar-fst.cc                |  2 +-
 src/gmmbin/gmm-decode-faster-regtree-fmllr.cc |  2 +-
 src/gmmbin/gmm-decode-faster-regtree-mllr.cc  |  2 +-
 src/gmmbin/gmm-init-biphone.cc                |  6 ++--
 src/kwsbin/kws-search.cc                      |  8 ++---
 src/latbin/lattice-arc-post.cc                |  2 +-
 src/latbin/lattice-compose.cc                 |  8 ++---
 src/latbin/lattice-lmrescore.cc               |  4 +--
 src/latbin/lattice-oracle.cc                  |  2 +-
 .../online-audio-server-decode-faster.cc      |  2 +-
 src/util/kaldi-thread.h                       |  3 +-
 21 files changed, 146 insertions(+), 66 deletions(-)
 create mode 100644 src/base/kaldi-dll-exports.h

diff --git CMakeLists.txt CMakeLists.txt
index 886af19c6..24cb574a6 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -22,7 +22,6 @@ endif()
 
 include(third_party/get_third_party)
 
-include(cmake/third_party/openfst.cmake)
 
 find_package(PythonInterp)
 if(NOT PYTHON_EXECUTABLE)
@@ -43,14 +42,20 @@ execute_process(COMMAND ${PYTHON_EXECUTABLE}
 )
 unset(IS_LIB_SHARE)
 
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_INSTALL_MESSAGE LAZY) # hide "-- Up-to-date: ..."
 if(BUILD_SHARED_LIBS)
     set(CMAKE_POSITION_INDEPENDENT_CODE ON)
-    if(WIN32)
+    if(MSVC)
+        find_package(dlfcn-win32 REQUIRED)
+        set(CMAKE_DL_LIBS dlfcn-win32::dl)
         set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
-        message(FATAL_ERROR "DLL is not supported currently")
+        add_definitions(-DWIN32_LEAN_AND_MEAN)
+        add_definitions(-DNOMINMAX)
+        add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+        add_definitions(-D_USE_MATH_DEFINES)
+        #message(FATAL_ERROR "DLL is not supported currently")
     elseif(APPLE)
         set(CMAKE_INSTALL_RPATH "@loader_path")
     else()
@@ -181,6 +186,8 @@ if(CUDA_FOUND)
         list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler -fPIC")
         set(KALDI_CUDA_NVCC_FLAGS "--default-stream=per-thread;-std=c++${CMAKE_CXX_STANDARD}")
     endif()
+    set(CMAKE_CUDA_STANDARD 17)
+    set(CMAKE_CUDA_STANDARD_REQUIRED TRUE)
     set(CUDA_NVCC_FLAGS ${KALDI_CUDA_NVCC_FLAGS} ${CUDA_NVCC_FLAGS})
 
     add_definitions(-DHAVE_CUDA=1)
@@ -251,9 +258,7 @@ add_subdirectory(src/nnet3)
 add_subdirectory(src/rnnlm)
 add_subdirectory(src/chain)
 add_subdirectory(src/ivector)
-if(NOT MSVC)
-    add_subdirectory(src/online)
-endif()
+add_subdirectory(src/online)
 add_subdirectory(src/online2)
 add_subdirectory(src/kws)
 
@@ -283,10 +288,8 @@ add_subdirectory(src/nnet3bin)
 add_subdirectory(src/rnnlmbin)
 add_subdirectory(src/chainbin)
 add_subdirectory(src/ivectorbin)
-if(NOT MSVC)
-    add_subdirectory(src/onlinebin)
-    add_subdirectory(src/online2bin)
-endif()
+add_subdirectory(src/onlinebin)
+add_subdirectory(src/online2bin)
 add_subdirectory(src/kwsbin)
 
 # add all cuda executables
diff --git cmake/gen_cmake_skeleton.py cmake/gen_cmake_skeleton.py
index c8fee4c41..f1a92b74b 100644
--- cmake/gen_cmake_skeleton.py
+++ cmake/gen_cmake_skeleton.py
@@ -154,6 +154,7 @@ def disable_for_win32(t):
         "online-audio-client",
         "online-net-client",
         "online2-tcp-nnet3-decode-faster",
+        "online2-tcp-nnet3-decode-faster-emscripten",
         "online-server-gmm-decode-faster",
         "online-audio-server-decode-faster"
     ]
@@ -239,6 +240,10 @@ class CMakeListsLibrary(object):
     def gen_code(self):
         ret = []
 
+        if sys.platform == 'win32' and self.dir_name.startswith("online"):
+            self.header_list = [x for x in self.header_list if x != 'online-tcp-source.h']
+            self.source_list = [x for x in self.source_list if x != 'online-tcp-source.cc']
+
         if len(self.header_list) > 0:
             ret.append("set(PUBLIC_HEADERS")
             for f in self.header_list:
@@ -252,6 +257,8 @@ class CMakeListsLibrary(object):
             ret.append("    cuda_compile(CUDA_OBJS SHARED")
             for f in self.cuda_source_list:
                 ret.append("        " + f)
+            if self.dir_name.startswith("cudafeat") and sys.platform == 'win32':
+                ret.append("    OPTIONS -DKALDI_CUMATRIX_DLL_IMPORTS")
             ret.append("    )")
             ret.append("endif()\n")
 
@@ -266,6 +273,27 @@ class CMakeListsLibrary(object):
         ret.append("     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>")
         ret.append("     $<INSTALL_INTERFACE:include/kaldi>")
         ret.append(")\n")
+        if self.dir_name.startswith("base"):
+            ret.append("if(MSVC)")
+            ret.append("set_target_properties(" + self.target_name + " PROPERTIES DEFINE_SYMBOL \"KALDI_DLL_EXPORTS\")")
+            
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_DLL_IMPORTS)")
+
+            ret.append("endif(MSVC)\n")
+        elif self.dir_name.startswith("cudamatrix"):
+            ret.append("if(MSVC)")
+            ret.append("set_target_properties(" + self.target_name + " PROPERTIES DEFINE_SYMBOL \"KALDI_CUMATRIX_DLL_EXPORTS\")")
+            
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_CUMATRIX_DLL_IMPORTS)")
+
+            ret.append("endif(MSVC)\n")
+        elif self.dir_name.startswith("util"):
+            ret.append("if(MSVC)")
+            ret.append("set_target_properties(" + self.target_name + " PROPERTIES DEFINE_SYMBOL \"KALDI_UTIL_DLL_EXPORTS\")")
+            
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_UTIL_DLL_IMPORTS)")
+
+            ret.append("endif(MSVC)\n")
 
         if len(self.depends) > 0:
             ret.append("target_link_libraries(" + self.target_name + " PUBLIC")
diff --git src/base/kaldi-dll-exports.h src/base/kaldi-dll-exports.h
new file mode 100644
index 000000000..ee1d84cd6
--- /dev/null
+++ src/base/kaldi-dll-exports.h
@@ -0,0 +1,29 @@
+
+#ifndef kaldi_dll_export_H
+#define kaldi_dll_export_H
+
+#if defined(KALDI_DLL_EXPORTS)
+#  define KALDI_DLL __declspec(dllexport)
+#elif defined(KALDI_DLL_IMPORTS)
+#  define KALDI_DLL __declspec(dllimport)
+#else
+#  define KALDI_DLL
+#endif // defined(KALDI_DLL_EXPORTS)
+
+#if defined(KALDI_UTIL_DLL_EXPORTS)
+#  define KALDI_UTIL_DLL __declspec(dllexport)
+#elif defined(KALDI_UTIL_DLL_IMPORTS)
+#  define KALDI_UTIL_DLL __declspec(dllimport)
+#else
+#  define KALDI_UTIL_DLL
+#endif // defined(KALDI_UTIL_DLL_EXPORTS)
+
+#if defined(KALDI_CUMATRIX_DLL_EXPORTS)
+#  define KALDI_CUMATRIX_DLL __declspec(dllexport)
+#elif defined(KALDI_CUMATRIX_DLL_IMPORTS)
+#  define KALDI_CUMATRIX_DLL __declspec(dllimport)
+#else
+#  define KALDI_CUMATRIX_DLL
+#endif // defined(KALDI_CUMATRIX_DLL_EXPORTS)
+
+#endif /* kaldi_dll_export_H */
diff --git src/base/kaldi-error.h src/base/kaldi-error.h
index a9904a752..bc950f3da 100644
--- src/base/kaldi-error.h
+++ src/base/kaldi-error.h
@@ -33,6 +33,7 @@
 
 #include "base/kaldi-types.h"
 #include "base/kaldi-utils.h"
+#include "base/kaldi-dll-exports.h"
 /* Important that this file does not depend on any other kaldi headers. */
 
 #ifdef _MSC_VER
@@ -54,7 +55,7 @@ void SetProgramName(const char *basename);
 
 /// This is set by util/parse-options.{h,cc} if you set --verbose=? option.
 /// Do not use directly, prefer {Get,Set}VerboseLevel().
-extern int32 g_kaldi_verbose_level;
+extern int32 KALDI_DLL g_kaldi_verbose_level;
 
 /// Get verbosity level, usually set via command line '--verbose=' switch.
 inline int32 GetVerboseLevel() { return g_kaldi_verbose_level; }
diff --git src/base/kaldi-types.h src/base/kaldi-types.h
index 68d5578a5..3a1b8b920 100644
--- src/base/kaldi-types.h
+++ src/base/kaldi-types.h
@@ -39,16 +39,30 @@ typedef float   BaseFloat;
 // we find in the future lacks stdint.h
 #include <stdint.h>
 
-typedef int8_t   int8;
-typedef int16_t  int16;
-typedef int32_t  int32;
-typedef int64_t  int64;
-
-typedef uint8_t  uint8;
-typedef uint16_t uint16;
-typedef uint32_t uint32;
-typedef uint64_t uint64;
-typedef float    float32;
-typedef double   double64;
+namespace fst {
+  typedef int8_t   int8;
+  typedef int16_t  int16;
+  typedef int32_t  int32;
+  typedef int64_t  int64;
+  typedef uint8_t  uint8;
+  typedef uint16_t uint16;
+  typedef uint32_t uint32;
+  typedef uint64_t uint64;
+}  // end namespace fst
+
+
+namespace kaldi {
+  typedef int8_t   int8;
+  typedef int16_t  int16;
+  typedef int32_t  int32;
+  typedef int64_t  int64;
+  typedef uint8_t  uint8;
+  typedef uint16_t uint16;
+  typedef uint32_t uint32;
+  typedef uint64_t uint64;
+  typedef float    float32;
+  typedef double   double64;
+}  // end namespace kaldi
+
 
 #endif  // KALDI_BASE_KALDI_TYPES_H_
diff --git src/bin/phones-to-prons.cc src/bin/phones-to-prons.cc
index 0d7ab12c2..d6a4422a3 100644
--- src/bin/phones-to-prons.cc
+++ src/bin/phones-to-prons.cc
@@ -28,9 +28,9 @@
 
 // Create FST that accepts the phone sequence, with any number
 // of word-start and word-end symbol in between each phone.
-void CreatePhonesAltFst(const std::vector<int32> &phones,
-                        int32 word_start_sym,
-                        int32 word_end_sym,
+void CreatePhonesAltFst(const std::vector<fst::int32> &phones,
+                        fst::int32 word_start_sym,
+                        fst::int32 word_end_sym,
                         fst::VectorFst<fst::StdArc> *ofst) {
   using fst::StdArc;
   typedef fst::StdArc::StateId StateId;
@@ -172,7 +172,7 @@ int main(int argc, char *argv[]) {
         if (g_kaldi_verbose_level >= 2) {
           KALDI_LOG << "phn2word FST is below:";
           fst::FstPrinter<StdArc> fstprinter(phn2word, NULL, NULL, NULL, false, true, "\t");
-          fstprinter.Print(&std::cerr, "standard error");
+          fstprinter.Print(std::cerr, "standard error");
           KALDI_LOG << "phone sequence is: ";
           for (size_t i = 0; i < phones.size(); i++)
             std::cerr << phones[i] << ' ';
diff --git src/cudafeat/feature-spectral-cuda.cu src/cudafeat/feature-spectral-cuda.cu
index d8fc215b8..035d6bb9d 100644
--- src/cudafeat/feature-spectral-cuda.cu
+++ src/cudafeat/feature-spectral-cuda.cu
@@ -109,7 +109,7 @@ __global__ void power_spectrum_kernel(int row_length, float *A_in, int32_t ldi,
 // Expects to be called with 32x8 sized thread block.
 // LDB: Adding use_log flag
 __global__ void mel_banks_compute_kernel(int32_t num_frames, float energy_floor,
-                                         int32 *offsets, int32 *sizes,
+                                         kaldi::int32 *offsets, kaldi::int32 *sizes,
                                          float **vecs, const float *feats,
                                          int32_t ldf, float *mels, int32_t ldm,
                                          bool use_log) {
@@ -269,31 +269,31 @@ __global__ void process_window_kernel(
   }
 }
 
-__device__ inline int32 FirstSampleOfFrame(int32 frame, int32 frame_shift,
-                                           int32 window_size, bool snip_edges) {
+__device__ inline kaldi::int32 FirstSampleOfFrame(kaldi::int32 frame, kaldi::int32 frame_shift,
+                                           kaldi::int32 window_size, bool snip_edges) {
   if (snip_edges) {
     return frame * frame_shift;
   } else {
-    int32 midpoint_of_frame = frame_shift * frame + frame_shift / 2,
+    kaldi::int32 midpoint_of_frame = frame_shift * frame + frame_shift / 2,
           beginning_of_frame = midpoint_of_frame - window_size / 2;
     return beginning_of_frame;
   }
 }
 
 __global__ void extract_window_kernel(
-    int32 frame_shift, int32 frame_length, int32 frame_length_padded,
-    int32 window_size, bool snip_edges, int32_t sample_offset,
-    const BaseFloat * __restrict__ wave, int32 wave_dim,
+    kaldi::int32 frame_shift, kaldi::int32 frame_length, kaldi::int32 frame_length_padded,
+    kaldi::int32 window_size, bool snip_edges, int32_t sample_offset,
+    const BaseFloat * __restrict__ wave, kaldi::int32 wave_dim,
     BaseFloat *__restrict__ windows, int32_t wlda) {
   int frame = blockIdx.x;
   int tidx = threadIdx.x;
 
-  int32 start_sample =
+  kaldi::int32 start_sample =
       FirstSampleOfFrame(frame, frame_shift, window_size, snip_edges);
 
   // wave_start and wave_end are start and end indexes into 'wave', for the
   // piece of wave that we're trying to extract.
-  int32 wave_start = int32(start_sample - sample_offset),
+  kaldi::int32 wave_start = kaldi::int32(start_sample - sample_offset),
         wave_end = wave_start + frame_length;
 
   BaseFloat *window = windows + frame * wlda;
@@ -307,7 +307,7 @@ __global__ void extract_window_kernel(
     // be reached for about two frames per utterance, so we don't concern
     // ourselves excessively with efficiency.
     for (int s = tidx; s < frame_length; s += blockDim.x) {
-      int32 s_in_wave = s + wave_start;
+      kaldi::int32 s_in_wave = s + wave_start;
       while (s_in_wave < 0 || s_in_wave >= wave_dim) {
         // reflect around the beginning or end of the wave.
         // e.g. -1 -> 0, -2 -> 1.
diff --git src/cudamatrix/cu-allocator.h src/cudamatrix/cu-allocator.h
index 3edd9f1ca..464f3fd4e 100644
--- src/cudamatrix/cu-allocator.h
+++ src/cudamatrix/cu-allocator.h
@@ -46,6 +46,7 @@
 #include "base/kaldi-common.h"
 #include "util/stl-utils.h"
 #include "itf/options-itf.h"
+#include "base/kaldi-dll-exports.h"
 
 namespace kaldi {
 
@@ -90,7 +91,7 @@ struct CuAllocatorOptions {
   }
 };
 
-extern CuAllocatorOptions g_allocator_options;
+extern CuAllocatorOptions KALDI_CUMATRIX_DLL g_allocator_options;
 
 inline void RegisterCuAllocatorOptions(OptionsItf *po) {
   g_allocator_options.Register(po);
@@ -364,7 +365,7 @@ class CuMemoryAllocator {
 // output to them the free memory and the total memory of the device.
 std::string GetFreeGpuMemory(int64* free, int64* total);
 
-extern CuMemoryAllocator g_cuda_allocator;
+extern CuMemoryAllocator KALDI_CUMATRIX_DLL g_cuda_allocator;
 
 }  // namespace kaldi
 
diff --git src/cudamatrix/cu-device.cc src/cudamatrix/cu-device.cc
index fd2c0c64f..5c47aef15 100644
--- src/cudamatrix/cu-device.cc
+++ src/cudamatrix/cu-device.cc
@@ -631,7 +631,10 @@ CuDevice::~CuDevice() {
 
 // Each thread has its own copy of the CuDevice object.
 // Note: this was declared "static".
-thread_local CuDevice CuDevice::this_thread_device_;
+CuDevice& CuDevice::this_thread_device() {
+    static thread_local CuDevice this_thread_device_;
+    return this_thread_device_;
+}
 
 CuDevice::CuDeviceOptions CuDevice::device_options_;
 
diff --git src/cudamatrix/cu-device.h src/cudamatrix/cu-device.h
index fe8ac7955..7f54e0864 100644
--- src/cudamatrix/cu-device.h
+++ src/cudamatrix/cu-device.h
@@ -61,6 +61,7 @@ typedef int cusolverStatus_t;
 #include "base/timer.h"
 #include "cudamatrix/cu-allocator.h"
 #include "cudamatrix/cu-common.h"
+#include "base/kaldi-dll-exports.h"
 
 
 namespace kaldi {
@@ -100,7 +101,7 @@ class CuDevice {
   // At the beginning of the program, if you want to use a GPU, you
   // should call CuDevice::Instantiate().SelectGpuId(..).
   static CuDevice& Instantiate() {
-    CuDevice &ans = this_thread_device_;
+    CuDevice &ans = this_thread_device();
     if (!ans.initialized_)
       ans.Initialize();
     return ans;
@@ -296,7 +297,7 @@ class CuDevice {
     }
   };
 
-  static CuDeviceOptions device_options_;
+  static CuDeviceOptions KALDI_CUMATRIX_DLL device_options_;
 
   // Default constructor used to initialize this_thread_device_
   CuDevice();
@@ -339,20 +340,19 @@ class CuDevice {
   // Each thread has its own CuDevice object, which contains the cublas and
   // cusparse handles.  These are unique to the thread (which is what is
   // recommended by NVidia).
-  static thread_local CuDevice this_thread_device_;
-
+  static CuDevice& this_thread_device();
   // The GPU device-id that we are using.  This will be initialized to -1, and will
   // be set when the user calls
   //  CuDevice::Instantiate::SelectGpuId(...)
   // from the main thread.  Background threads will, when spawned and when
   // CuDevice::Instantiate() is called from them the first time, will
   // call cudaSetDevice(device_id))
-  static int32 device_id_;
+  static KALDI_CUMATRIX_DLL int32 device_id_;
 
   // This will automatically be set to true if the application has multiple
   // threads that access the GPU device.  It is used to know whether to
   // use locks when accessing the allocator and the profiling-related code.
-  static bool multi_threaded_;
+  static KALDI_CUMATRIX_DLL bool multi_threaded_;
 
   // The variable profile_map_ will only be used if the verbose level is >= 1;
   // it will accumulate some function-level timing information that is printed
diff --git src/fstbin/make-grammar-fst.cc src/fstbin/make-grammar-fst.cc
index 564f25531..a6168bcd1 100644
--- src/fstbin/make-grammar-fst.cc
+++ src/fstbin/make-grammar-fst.cc
@@ -27,7 +27,7 @@
 
 template<typename FST>
 void MakeGrammarFst(kaldi::ParseOptions po,
-                    int32 nonterm_phones_offset,
+                    kaldi::int32 nonterm_phones_offset,
                     bool write_as_grammar){
   using namespace kaldi;
   using namespace fst;
diff --git src/gmmbin/gmm-decode-faster-regtree-fmllr.cc src/gmmbin/gmm-decode-faster-regtree-fmllr.cc
index ca39cbe8c..dab4a85ab 100644
--- src/gmmbin/gmm-decode-faster-regtree-fmllr.cc
+++ src/gmmbin/gmm-decode-faster-regtree-fmllr.cc
@@ -71,7 +71,7 @@ bool DecodeUtterance(kaldi::FasterDecoder *decoder,
                      kaldi::DecodableInterface *decodable,
                      DecodeInfo *info,
                      const string &uttid,
-                     int32 num_frames,
+                     kaldi::int32 num_frames,
                      BaseFloat *total_like) {
   decoder->Decode(decodable);
   KALDI_LOG << "Length of file is " << num_frames;
diff --git src/gmmbin/gmm-decode-faster-regtree-mllr.cc src/gmmbin/gmm-decode-faster-regtree-mllr.cc
index 9a5d9486b..bf89bfb62 100644
--- src/gmmbin/gmm-decode-faster-regtree-mllr.cc
+++ src/gmmbin/gmm-decode-faster-regtree-mllr.cc
@@ -70,7 +70,7 @@ bool DecodeUtterance(kaldi::FasterDecoder *decoder,
                      kaldi::DecodableInterface *decodable,
                      DecodeInfo *info,
                      const string &uttid,
-                     int32 num_frames,
+                     kaldi::int32 num_frames,
                      BaseFloat *total_like) {
   decoder->Decode(decodable);
   KALDI_LOG << "Length of file is " << num_frames;;
diff --git src/gmmbin/gmm-init-biphone.cc src/gmmbin/gmm-init-biphone.cc
index 18f7b68af..31940b8be 100644
--- src/gmmbin/gmm-init-biphone.cc
+++ src/gmmbin/gmm-init-biphone.cc
@@ -222,9 +222,9 @@ BiphoneContextDependencyFull(std::vector<std::vector<int32> > phone_sets,
    It's more efficient to load the biphone counts into a map because
    most entries are zero, but since there are not many biphones, a 2-dim vector
    is OK. */
-static void ReadPhoneCounts(std::string &filename, int32 num_phones,
-                            std::vector<int32> *mono_counts,
-                            std::vector<std::vector<int32> > *bi_counts) {
+static void ReadPhoneCounts(std::string &filename, kaldi::int32 num_phones,
+                            std::vector<kaldi::int32> *mono_counts,
+                            std::vector<std::vector<kaldi::int32> > *bi_counts) {
   // The actual phones start from id = 1 (so the last phone has id = num_phones).
   mono_counts->resize(num_phones + 1, 0);
   bi_counts->resize(num_phones + 1, std::vector<int>(num_phones + 1, 0));
diff --git src/kwsbin/kws-search.cc src/kwsbin/kws-search.cc
index 8e2b2a84d..7dcc3f81b 100644
--- src/kwsbin/kws-search.cc
+++ src/kwsbin/kws-search.cc
@@ -120,7 +120,7 @@ typedef kaldi::TableWriter< kaldi::BasicVectorHolder<double> >
                                                         VectorOfDoublesWriter;
 void OutputDetailedStatistics(const std::string &kwid,
                         const kaldi::KwsLexicographicFst &keyword,
-                        const unordered_map<uint32, uint64> &label_decoder,
+                        const unordered_map<kaldi::uint32, kaldi::uint64> &label_decoder,
                         VectorOfDoublesWriter *output ) {
   std::vector<kaldi::ActivePath> paths;
 
@@ -134,9 +134,9 @@ void OutputDetailedStatistics(const std::string &kwid,
   for (int i = 0; i < paths.size(); ++i) {
     std::vector<double> out;
     double score;
-    int32 tbeg, tend, uid;
+    kaldi::int32 tbeg, tend, uid;
 
-    uint64 osymbol = label_decoder.find(paths[i].last)->second;
+    kaldi::uint64 osymbol = label_decoder.find(paths[i].last)->second;
     uid = kaldi::DecodeLabelUid(osymbol);
     tbeg = paths[i].weight.Value2().Value1().Value();
     tend = paths[i].weight.Value2().Value2().Value();
@@ -305,7 +305,7 @@ int main(int argc, char *argv[]) {
 
       KwsLexicographicFst keyword_fst;
       KwsLexicographicFst result_fst;
-      Map(keyword, &keyword_fst, VectorFstToKwsLexicographicFstMapper());
+      ArcMap(keyword, &keyword_fst, VectorFstToKwsLexicographicFstMapper());
       Compose(keyword_fst, index, &result_fst);
 
       if (stats_wspecifier != "") {
diff --git src/latbin/lattice-arc-post.cc src/latbin/lattice-arc-post.cc
index 0aca9cdc4..c5b673dd2 100644
--- src/latbin/lattice-arc-post.cc
+++ src/latbin/lattice-arc-post.cc
@@ -178,7 +178,7 @@ int main(int argc, char *argv[]) {
     // Read as regular lattice
     kaldi::SequentialCompactLatticeReader clat_reader(lats_rspecifier);
 
-    int64 tot_post = 0;
+    kaldi::int64 tot_post = 0;
     int32 num_lat_done = 0, num_lat_err = 0;
 
     for (; !clat_reader.Done(); clat_reader.Next()) {
diff --git src/latbin/lattice-compose.cc src/latbin/lattice-compose.cc
index d191b076a..4074b0ef9 100644
--- src/latbin/lattice-compose.cc
+++ src/latbin/lattice-compose.cc
@@ -126,9 +126,9 @@ int main(int argc, char *argv[]) {
       // with all the cost on the first member of the pair (since we're
       // assuming it's a graph weight).
       fst::CacheOptions cache_opts(true, num_states_cache);
-      fst::MapFstOptions mapfst_opts(cache_opts);
+      fst::ArcMapFstOptions mapfst_opts(cache_opts);
       fst::StdToLatticeMapper<BaseFloat> mapper;
-      fst::MapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
+      fst::ArcMapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
           mapped_fst2(*fst2, mapper, mapfst_opts);
 
       for (; !lattice_reader1.Done(); lattice_reader1.Next()) {
@@ -265,9 +265,9 @@ int main(int argc, char *argv[]) {
         // with all the cost on the first member of the pair (since we're
         // assuming it's a graph weight).
         fst::CacheOptions cache_opts(true, num_states_cache);
-        fst::MapFstOptions mapfst_opts(cache_opts);
+        fst::ArcMapFstOptions mapfst_opts(cache_opts);
         fst::StdToLatticeMapper<BaseFloat> mapper;
-        fst::MapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
+        fst::ArcMapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
             mapped_fst2(fst2, mapper, mapfst_opts);
 
         // sort lat1 on olabel.
diff --git src/latbin/lattice-lmrescore.cc src/latbin/lattice-lmrescore.cc
index 2e5406f75..1a538e538 100644
--- src/latbin/lattice-lmrescore.cc
+++ src/latbin/lattice-lmrescore.cc
@@ -75,9 +75,9 @@ int main(int argc, char *argv[]) {
     // with all the cost on the first member of the pair (since it's a graph
     // weight).
     fst::CacheOptions cache_opts(true, num_states_cache);
-    fst::MapFstOptions mapfst_opts(cache_opts);
+    fst::ArcMapFstOptions mapfst_opts(cache_opts);
     fst::StdToLatticeMapper<BaseFloat> mapper;
-    fst::MapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
+    fst::ArcMapFst<StdArc, LatticeArc, fst::StdToLatticeMapper<BaseFloat> >
         lm_fst(*std_lm_fst, mapper, mapfst_opts);
     delete std_lm_fst;
 
diff --git src/latbin/lattice-oracle.cc src/latbin/lattice-oracle.cc
index 5f2513131..d08ff93f9 100644
--- src/latbin/lattice-oracle.cc
+++ src/latbin/lattice-oracle.cc
@@ -66,7 +66,7 @@ void ConvertLatticeToUnweightedAcceptor(const kaldi::Lattice &ilat,
   // first convert from  lattice to normal FST
   fst::ConvertLattice(ilat, ofst);
   // remove weights, project to output, sort according to input arg
-  fst::Map(ofst, fst::RmWeightMapper<fst::StdArc>());
+  fst::ArcMap(ofst, fst::RmWeightMapper<fst::StdArc>());
   fst::Project(ofst, fst::PROJECT_OUTPUT);  // The words are on the output side
   fst::Relabel(ofst, wildcards, wildcards);
   fst::RmEpsilon(ofst);   // Don't tolerate epsilons as they make it hard to
diff --git src/onlinebin/online-audio-server-decode-faster.cc src/onlinebin/online-audio-server-decode-faster.cc
index 43a2fa7e6..91b13cf22 100644
--- src/onlinebin/online-audio-server-decode-faster.cc
+++ src/onlinebin/online-audio-server-decode-faster.cc
@@ -65,7 +65,7 @@ bool WriteLine(int32 socket, std::string line);
 const float kFramesPerSecond = 100.0f;
 }  // namespace kaldi
 
-int32 main(int argc, char *argv[]) {
+int main(int argc, char *argv[]) {
   using namespace kaldi;
   using namespace fst;
 
diff --git src/util/kaldi-thread.h src/util/kaldi-thread.h
index 29cfaee8a..8d6003022 100644
--- src/util/kaldi-thread.h
+++ src/util/kaldi-thread.h
@@ -26,6 +26,7 @@
 #include <algorithm>
 #include "itf/options-itf.h"
 #include "util/kaldi-semaphore.h"
+#include "base/kaldi-dll-exports.h"
 
 // This header provides convenient mechanisms for parallelization.
 //
@@ -57,7 +58,7 @@
 
 namespace kaldi {
 
-extern int32 g_num_threads;  // Maximum number of threads (for programs that
+extern int32 KALDI_UTIL_DLL g_num_threads;  // Maximum number of threads (for programs that
 // use threads, which is not many of them, e.g. the SGMM update program does.
 // This is 8 by default.  You can change this on the command line, where
 // used, with --num-threads.  Programs that think they will use threads
-- 
2.33.0.windows.1

