diff --git a/cmake/gen_cmake_skeleton.py b/cmake/gen_cmake_skeleton.py
index c8fee4c..2eac686 100644
--- a/cmake/gen_cmake_skeleton.py
+++ b/cmake/gen_cmake_skeleton.py
@@ -154,6 +154,7 @@ def disable_for_win32(t):
         "online-audio-client",
         "online-net-client",
         "online2-tcp-nnet3-decode-faster",
+        "online2-tcp-nnet3-decode-faster-emscripten",
         "online-server-gmm-decode-faster",
         "online-audio-server-decode-faster"
     ]
@@ -179,6 +180,9 @@ class CMakeListsHeaderLibrary(object):
 
     def gen_code(self):
         ret = []
+        if sys.platform == 'win32' and self.dir_name.startswith("online"):
+            self.header_list = [x for x in self.header_list if x != 'online-tcp-source.h']
+            self.source_list = [x for x in self.source_list if x != 'online-tcp-source.cc']
         if len(self.header_list) > 0:
             ret.append("set(PUBLIC_HEADERS")
             for f in self.header_list:
@@ -232,7 +236,7 @@ class CMakeListsLibrary(object):
                 print_wrapper("WARNING: non-standard", filename)
                 return
             libs = makefile.split("ADDLIBS")[-1].split("\n\n")[0]
-            libs = re.findall("[^\s\\\\=]+", libs)
+            libs = re.findall(r"[^\s\\=]+", libs)
             for lib in libs:
                 self.depends.append(os.path.splitext(os.path.basename(lib))[0])
 
@@ -247,9 +251,9 @@ class CMakeListsLibrary(object):
 
         if len(self.cuda_source_list) > 0:
             self.source_list.append("${CUDA_OBJS}")
-            ret.append("if(CUDA_FOUND)")
-            ret.append("    cuda_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)")
-            ret.append("    cuda_compile(CUDA_OBJS SHARED")
+            ret.append("if(CUDAToolkit_FOUND)")
+            ret.append("    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)")
+            ret.append("    set(CUDA_OBJS")
             for f in self.cuda_source_list:
                 ret.append("        " + f)
             ret.append("    )")
@@ -266,6 +270,31 @@ class CMakeListsLibrary(object):
         ret.append("     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>")
         ret.append("     $<INSTALL_INTERFACE:include/kaldi>")
         ret.append(")\n")
+        if self.dir_name.startswith("base"):
+            ret.append("if(MSVC)")
+            ret.append("set_target_properties(" + self.target_name + " PROPERTIES DEFINE_SYMBOL \"KALDI_DLL_EXPORTS\")")
+
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_DLL_IMPORTS)")
+
+            ret.append("endif(MSVC)\n")
+        elif self.dir_name.startswith("cudamatrix"):
+            ret.append("if(MSVC)")
+            ret.append("set_target_properties(" + self.target_name + " PROPERTIES DEFINE_SYMBOL \"KALDI_CUMATRIX_DLL_EXPORTS\")")
+
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_CUMATRIX_DLL_IMPORTS)")
+
+            ret.append("endif(MSVC)\n")
+        elif self.dir_name.startswith("cudafeat"):
+            ret.append("if(MSVC)")
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_CUMATRIX_DLL_IMPORTS)")
+            ret.append("endif(MSVC)\n")
+        elif self.dir_name.startswith("util"):
+            ret.append("if(MSVC)")
+            ret.append("set_target_properties(" + self.target_name + " PROPERTIES DEFINE_SYMBOL \"KALDI_UTIL_DLL_EXPORTS\")")
+
+            ret.append("target_compile_definitions(" + self.target_name + " INTERFACE KALDI_UTIL_DLL_IMPORTS)")
+
+            ret.append("endif(MSVC)\n")
 
         if len(self.depends) > 0:
             ret.append("target_link_libraries(" + self.target_name + " PUBLIC")
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2f26596..2ec796e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,6 +16,12 @@ if(CONDA_ROOT)
     include_directories("${CONDA_ROOT}/include")
     if (NOT CUDA_TOOLKIT_ROOT_DIR)
         set(CUDA_TOOLKIT_ROOT_DIR "${CONDA_ROOT}")
+    else()
+        set(CMAKE_INCLUDE_PATH "${CMAKE_INCLUDE_PATH};${CUDA_TOOLKIT_ROOT_DIR}/include")
+        set(CMAKE_LIBRARY_PATH "${CMAKE_LIBRARY_PATH};${CUDA_TOOLKIT_ROOT_DIR}/lib;${CUDA_TOOLKIT_ROOT_DIR}/lib/stubs")
+        link_directories("${CUDA_TOOLKIT_ROOT_DIR}/lib")
+        link_directories("${CUDA_TOOLKIT_ROOT_DIR}/lib/stubs")
+        include_directories("${CUDA_TOOLKIT_ROOT_DIR}/include")
     endif()
 
 endif()
@@ -33,6 +39,9 @@ if(BuildForFedora)
 
     #pkg_check_modules(FST REQUIRED fst)
 
+elseif(CONDA_ROOT)
+    include(third_party/get_third_party)
+
 else()
     include(third_party/get_third_party)
 
@@ -40,8 +49,8 @@ else()
 endif()
 
 
-find_package(PythonInterp)
-if(NOT PYTHON_EXECUTABLE)
+find_package(Python3 REQUIRED)
+if(NOT Python3_EXECUTABLE)
     message(FATAL_ERROR "Needs python to auto-generate most CMake files, but not found.")
 endif()
 
@@ -51,7 +60,7 @@ set(IS_LIB_SHARE "")
 if(BUILD_SHARED_LIBS)
     set(IS_LIB_SHARE "--shared")
 endif()
-execute_process(COMMAND ${PYTHON_EXECUTABLE}
+execute_process(COMMAND ${Python3_EXECUTABLE}
     "${CMAKE_CURRENT_SOURCE_DIR}/cmake/gen_cmake_skeleton.py"
     "${CMAKE_CURRENT_SOURCE_DIR}/src"
     "--quiet"
@@ -60,6 +69,9 @@ execute_process(COMMAND ${PYTHON_EXECUTABLE}
 unset(IS_LIB_SHARE)
 
 if(BuildForFedora)
+elseif(CONDA_ROOT)
+    set(CMAKE_CXX_STANDARD 17)
+    set(CMAKE_CXX_EXTENSIONS OFF)
 else()
     set(CMAKE_CXX_STANDARD 14)
     set(CMAKE_CXX_EXTENSIONS OFF)
@@ -67,9 +79,14 @@ endif()
 set(CMAKE_INSTALL_MESSAGE LAZY) # hide "-- Up-to-date: ..."
 if(BUILD_SHARED_LIBS)
     set(CMAKE_POSITION_INDEPENDENT_CODE ON)
-    if(WIN32)
-        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
-        message(FATAL_ERROR "DLL is not supported currently")
+    if(MSVC)
+        find_package(dlfcn-win32 REQUIRED)
+        set(CMAKE_DL_LIBS dlfcn-win32::dl)
+         set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+        add_definitions(-DWIN32_LEAN_AND_MEAN)
+        add_definitions(-DNOMINMAX)
+        add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+        add_definitions(-D_USE_MATH_DEFINES)
     elseif(APPLE)
         set(CMAKE_INSTALL_RPATH "@loader_path")
     else()
@@ -160,10 +177,10 @@ if(MSVC)
     # Added in source, but we actually should do it in build script, whatever...
     # add_definitions(-DWIN32_LEAN_AND_MEAN=1)
 
-    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
+    # add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
 
     # some warnings related with fst
-    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
+    # add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
 
     set(CompilerFlags
         CMAKE_CXX_FLAGS
@@ -186,6 +203,35 @@ if(MSVC)
 endif()
 
 find_package(CUDAToolkit)
+if(CONDA_ROOT)
+    if(CUDAToolkit_FOUND)
+    enable_language(CUDA)
+
+     set(CMAKE_CUDA_STANDARD 17)
+     set(CMAKE_CUDA_STANDARD_REQUIRED TRUE)
+ 
+     add_definitions(-DHAVE_CUDA=1)
+     add_definitions(-DCUDA_API_PER_THREAD_DEFAULT_STREAM=1)
+     link_libraries(
+        CUDA::cudart
+        CUDA::cublas
+        CUDA::cufft
+        CUDA::curand
+        CUDA::cusolver
+        CUDA::cusparse
+        CUDA::cuda_driver)
+ 
+    if(MSVC)
+        # CMake's detection for NvToolExt fails with CUDA 12; it's header-only now, see
+        # https://github.com/conda-forge/cuda-nvtx-feedstock/issues/4
+        include_directories(${NvToolExt_INCLUDE_DIR})
+    else()
+        find_package(NvToolExt REQUIRED)
+        include_directories(${NvToolExt_INCLUDE_DIR})
+        link_libraries(${NvToolExt_LIBRARIES})
+    endif()
+    endif()
+else()
 find_package(CUDA)
 if(CUDA_FOUND)
     set(CUDA_PROPAGATE_HOST_FLAGS ON)
@@ -200,6 +246,8 @@ if(CUDA_FOUND)
         list(APPEND KALDI_CUDA_NVCC_FLAGS "-Xcompiler -fPIC")
         set(KALDI_CUDA_NVCC_FLAGS "--default-stream=per-thread;-std=c++${CMAKE_CXX_STANDARD}")
     endif()
+    set(CMAKE_CUDA_STANDARD 17)
+    set(CMAKE_CUDA_STANDARD_REQUIRED TRUE)
     set(CUDA_NVCC_FLAGS ${KALDI_CUDA_NVCC_FLAGS} ${CUDA_NVCC_FLAGS})
 
     add_definitions(-DHAVE_CUDA=1)
@@ -221,7 +269,7 @@ if(CUDA_FOUND)
     find_package(CUB REQUIRED)
     include_directories(${CUB_INCLUDE_DIR})
 endif()
-
+endif()
 add_definitions(-DKALDI_NO_PORTAUDIO=1)
 
 if(KALDI_VERSION)
@@ -252,7 +300,9 @@ if(BuildForFedora)
     # TODO: Detect the right version and put it here.
     add_definitions(-DOPENFST_VER=18300)
 #    link_directories(/usr/lib64)
-#    include_directories(/usr/include/fst)    
+#    include_directories(/usr/include/fst) 
+elseif(CONDA_ROOT)   
+    add_definitions(-DOPENFST_VER=18300)
 endif()
 
 link_libraries(fst)
@@ -281,9 +331,7 @@ add_subdirectory(src/nnet3)
 add_subdirectory(src/rnnlm)
 add_subdirectory(src/chain)
 add_subdirectory(src/ivector)
-if(NOT MSVC)
-    add_subdirectory(src/online)
-endif()
+add_subdirectory(src/online)
 add_subdirectory(src/online2)
 add_subdirectory(src/kws)
 
@@ -295,7 +343,7 @@ if(TENSORFLOW_DIR)
 endif()
 
 # add all cuda libraries
-if(CUDA_FOUND)
+if(CUDAToolkit_FOUND)
     add_subdirectory(src/cudafeat)
     add_subdirectory(src/cudadecoder)
 endif()
@@ -313,14 +361,12 @@ add_subdirectory(src/nnet3bin)
 add_subdirectory(src/rnnlmbin)
 add_subdirectory(src/chainbin)
 add_subdirectory(src/ivectorbin)
-if(NOT MSVC)
-    add_subdirectory(src/onlinebin)
-    add_subdirectory(src/online2bin)
-endif()
+add_subdirectory(src/onlinebin)
+add_subdirectory(src/online2bin)
 add_subdirectory(src/kwsbin)
 
 # add all cuda executables
-if(CUDA_FOUND)
+if(CUDAToolkit_FOUND)
     add_subdirectory(src/cudafeatbin)
     add_subdirectory(src/cudadecoderbin)
 endif()
diff --git a/src/base/kaldi-dll-exports.h b/src/base/kaldi-dll-exports.h
new file mode 100644
index 0000000..3a7f156
--- /dev/null
+++ b/src/base/kaldi-dll-exports.h
@@ -0,0 +1,28 @@
+#ifndef kaldi_dll_export_H
+#define kaldi_dll_export_H
+
+#if defined(KALDI_DLL_EXPORTS)
+#  define KALDI_DLL __declspec(dllexport)
+#elif defined(KALDI_DLL_IMPORTS)
+#  define KALDI_DLL __declspec(dllimport)
+#else
+#  define KALDI_DLL
+#endif // defined(KALDI_DLL_EXPORTS)
+
+#if defined(KALDI_UTIL_DLL_EXPORTS)
+#  define KALDI_UTIL_DLL __declspec(dllexport)
+#elif defined(KALDI_UTIL_DLL_IMPORTS)
+#  define KALDI_UTIL_DLL __declspec(dllimport)
+#else
+#  define KALDI_UTIL_DLL
+#endif // defined(KALDI_UTIL_DLL_EXPORTS)
+
+#if defined(KALDI_CUMATRIX_DLL_EXPORTS)
+#  define KALDI_CUMATRIX_DLL __declspec(dllexport)
+#elif defined(KALDI_CUMATRIX_DLL_IMPORTS)
+#  define KALDI_CUMATRIX_DLL __declspec(dllimport)
+#else
+#  define KALDI_CUMATRIX_DLL
+#endif // defined(KALDI_CUMATRIX_DLL_EXPORTS)
+
+#endif /* kaldi_dll_export_H */
\ No newline at end of file
diff --git a/src/base/kaldi-error.h b/src/base/kaldi-error.h
index 572cbb4..3e431b6 100644
--- a/src/base/kaldi-error.h
+++ b/src/base/kaldi-error.h
@@ -33,6 +33,7 @@
 
 #include "base/kaldi-types.h"
 #include "base/kaldi-utils.h"
+#include "base/kaldi-dll-exports.h"
 /* Important that this file does not depend on any other kaldi headers. */
 
 #ifdef _MSC_VER
@@ -54,7 +55,7 @@ void SetProgramName(const char *basename);
 
 /// This is set by util/parse-options.{h,cc} if you set --verbose=? option.
 /// Do not use directly, prefer {Get,Set}VerboseLevel().
-extern int32 g_kaldi_verbose_level;
+extern int32 KALDI_DLL g_kaldi_verbose_level;
 
 /// Get verbosity level, usually set via command line '--verbose=' switch.
 inline int32 GetVerboseLevel() { return g_kaldi_verbose_level; }
diff --git a/src/cudamatrix/cu-allocator.h b/src/cudamatrix/cu-allocator.h
index 3edd9f1..464f3fd 100644
--- a/src/cudamatrix/cu-allocator.h
+++ b/src/cudamatrix/cu-allocator.h
@@ -46,6 +46,7 @@
 #include "base/kaldi-common.h"
 #include "util/stl-utils.h"
 #include "itf/options-itf.h"
+#include "base/kaldi-dll-exports.h"
 
 namespace kaldi {
 
@@ -90,7 +91,7 @@ struct CuAllocatorOptions {
   }
 };
 
-extern CuAllocatorOptions g_allocator_options;
+extern CuAllocatorOptions KALDI_CUMATRIX_DLL g_allocator_options;
 
 inline void RegisterCuAllocatorOptions(OptionsItf *po) {
   g_allocator_options.Register(po);
@@ -364,7 +365,7 @@ class CuMemoryAllocator {
 // output to them the free memory and the total memory of the device.
 std::string GetFreeGpuMemory(int64* free, int64* total);
 
-extern CuMemoryAllocator g_cuda_allocator;
+extern CuMemoryAllocator KALDI_CUMATRIX_DLL g_cuda_allocator;
 
 }  // namespace kaldi
 
diff --git a/src/cudamatrix/cu-device.cc b/src/cudamatrix/cu-device.cc
index fd2c0c6..c31b031 100644
--- a/src/cudamatrix/cu-device.cc
+++ b/src/cudamatrix/cu-device.cc
@@ -631,7 +631,14 @@ CuDevice::~CuDevice() {
 
 // Each thread has its own copy of the CuDevice object.
 // Note: this was declared "static".
+#ifdef _WIN32
+CuDevice& CuDevice::this_thread_device() {
+    static thread_local CuDevice this_thread_device_;
+    return this_thread_device_;
+}
+#else
 thread_local CuDevice CuDevice::this_thread_device_;
+#endif
 
 CuDevice::CuDeviceOptions CuDevice::device_options_;
 
diff --git a/src/cudamatrix/cu-device.h b/src/cudamatrix/cu-device.h
index fe8ac79..ef827fe 100644
--- a/src/cudamatrix/cu-device.h
+++ b/src/cudamatrix/cu-device.h
@@ -61,6 +61,7 @@ typedef int cusolverStatus_t;
 #include "base/timer.h"
 #include "cudamatrix/cu-allocator.h"
 #include "cudamatrix/cu-common.h"
+#include "base/kaldi-dll-exports.h"
 
 
 namespace kaldi {
@@ -100,7 +101,12 @@ class CuDevice {
   // At the beginning of the program, if you want to use a GPU, you
   // should call CuDevice::Instantiate().SelectGpuId(..).
   static CuDevice& Instantiate() {
+    #ifdef _WIN32
+    CuDevice &ans = this_thread_device();
+    #else
     CuDevice &ans = this_thread_device_;
+    #endif
+
     if (!ans.initialized_)
       ans.Initialize();
     return ans;
@@ -296,7 +302,7 @@ class CuDevice {
     }
   };
 
-  static CuDeviceOptions device_options_;
+  static CuDeviceOptions KALDI_CUMATRIX_DLL device_options_;
 
   // Default constructor used to initialize this_thread_device_
   CuDevice();
@@ -339,7 +345,11 @@ class CuDevice {
   // Each thread has its own CuDevice object, which contains the cublas and
   // cusparse handles.  These are unique to the thread (which is what is
   // recommended by NVidia).
+  #ifdef _WIN32
+  static CuDevice& this_thread_device();
+  #else
   static thread_local CuDevice this_thread_device_;
+  #endif
 
   // The GPU device-id that we are using.  This will be initialized to -1, and will
   // be set when the user calls
@@ -347,12 +357,12 @@ class CuDevice {
   // from the main thread.  Background threads will, when spawned and when
   // CuDevice::Instantiate() is called from them the first time, will
   // call cudaSetDevice(device_id))
-  static int32 device_id_;
+  static int32 KALDI_CUMATRIX_DLL device_id_;
 
   // This will automatically be set to true if the application has multiple
   // threads that access the GPU device.  It is used to know whether to
   // use locks when accessing the allocator and the profiling-related code.
-  static bool multi_threaded_;
+  static bool KALDI_CUMATRIX_DLL multi_threaded_;
 
   // The variable profile_map_ will only be used if the verbose level is >= 1;
   // it will accumulate some function-level timing information that is printed
diff --git a/src/util/kaldi-thread.h b/src/util/kaldi-thread.h
index 29cfaee..8d60030 100644
--- a/src/util/kaldi-thread.h
+++ b/src/util/kaldi-thread.h
@@ -26,6 +26,7 @@
 #include <algorithm>
 #include "itf/options-itf.h"
 #include "util/kaldi-semaphore.h"
+#include "base/kaldi-dll-exports.h"
 
 // This header provides convenient mechanisms for parallelization.
 //
@@ -57,7 +58,7 @@
 
 namespace kaldi {
 
-extern int32 g_num_threads;  // Maximum number of threads (for programs that
+extern int32 KALDI_UTIL_DLL g_num_threads;  // Maximum number of threads (for programs that
 // use threads, which is not many of them, e.g. the SGMM update program does.
 // This is 8 by default.  You can change this on the command line, where
 // used, with --num-threads.  Programs that think they will use threads
