{% set version = "5.5.1016" %}
# minor/major is https://github.com/kaldi-asr/kaldi/blob/master/src/.version;
# patch version is the number of commits since then, see
# https://github.com/kaldi-asr/kaldi/blob/master/cmake/VersionHelper.cmake
{% set commit = "5a37217e107bc9cb5e4e1ad2b290cecbdedfa799" %}
{% set kaldi_proc_type = "cuda" if os.environ.get("cuda_compiler_version", "None") != "None" else "cpu" %}

{% set kaldi_libraries = [
    "base", "matrix", "cudamatrix", "util", "feat", "tree", "gmm", "transform",
    "fstext", "hmm", "lm", "decoder", "lat", "nnet", "nnet2", "nnet3",
    "rnnlm", "chain", "ivector", "online2", "kws"
] + (os.environ.get("cuda_compiler_version", "None") != "None") * [
    "cudafeat", "cudadecoder"
] + (not win) * [
    "online"
] %}
# This list should be substantially longer, but upstream just globs
# all *.h files. These are just stand-ins (one header per folder),
# but relevant headers can be added as needed/desired.
{% set kaldi_headers = [
    "base/io-funcs.h", "matrix/cblas-wrappers.h", "cudamatrix/cu-array.h",
    "util/basic-filebuf.h", "feat/feature-common.h", "tree/build-tree.h",
    "gmm/am-diag-gmm.h", "transform/cmvn.h",
    "fstext/context-fst.h", "hmm/hmm-utils.h", "lm/arpa-file-parser.h",
    "decoder/grammar-fst.h", "lat/arctic-weight.h", "nnet/nnet-activation.h",
    "nnet2/am-nnet.h", "nnet3/attention.h", "rnnlm/sampler.h",
    "chain/chain-datastruct.h", "ivector/plda.h", "online2/online-endpoint.h",
    "kws/kaldi-kws.h", "itf/options-itf.h"
] + (os.environ.get("cuda_compiler_version", "None") != "None") * [
    "cudafeat/lane-desc.h", "cudadecoder/cuda-fst.h"
] + (not win) * [
    "online/online-decodable.h"
] %}

package:
  name: kaldi
  version: {{ version }}

source:
  url: https://github.com/kaldi-asr/kaldi/archive/{{ commit }}.tar.gz
  sha256: 153ae41654046f1997c247d3328c17124745b70be090fe1ee73442160e7b08c7
  patches:
    - sgmm2.patch

build:
  number: 0
  skip: true  # [os.environ.get("cuda_compiler_version", "None") == "10.2"]

requirements:
  build:
    - {{ compiler('cxx') }}

outputs:
  - name: kaldi
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [os.environ.get("cuda_compiler_version", "None") != "None"]
      string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [os.environ.get("cuda_compiler_version", "None") == "None"]
    script: build_kaldi.sh  # [not win]
    script: bld_kaldi.bat   # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}  # [not win]
        - {{ compiler('cuda') }}  # [os.environ.get("cuda_compiler_version", "None") != "None"]
        - cmake
        - ninja
        - m2-patch  # [win]
        - libtool  # [not win]
        - automake  # [not win]
      host:
        - icu
        - libblas
        - libcblas
        - liblapack
        - liblapacke
        - libtmglib
        - magma           # [os.environ.get("cuda_compiler_version", "None") != "None"]
        - pthreads-win32  # [win]
        - zlib
      run:
        - libblas
        - libcblas
        - liblapack
        - liblapacke
        - magma    # [os.environ.get("cuda_compiler_version", "None") != "None"]
        - openfst  # [not win and build_platform == target_platform]
      run_exports:
        - {{ pin_subpackage('kaldi', max_pin='x.x.x') }}

    test:
      # will also run run_test.py (checking the binaries)
      commands:
        # libraries:
        {% for each_lib in kaldi_libraries %}
            # shared
            - test -f $PREFIX/lib/libkaldi-{{ each_lib }}.so               # [linux]
            - test -f $PREFIX/lib/libkaldi-{{ each_lib }}.dylib            # [osx]
            - if not exist %LIBRARY_BIN%\kaldi-{{ each_lib }}.dll exit 1   # [win]

            # absence of static libraries
            - test ! -f $PREFIX/lib/libkaldi-{{ each_lib }}.a              # [not win]
        {% endfor %}

        # headers:
        {% for each_header in kaldi_headers %}
            - test -f $PREFIX/include/kaldi/{{ each_header }} || (echo "{{ each_header }} not found" && exit 1)  # [unix]
            - if not exist %LIBRARY_INC%\kaldi\{{ "\\".join(each_header.split("/")) }} exit 1                    # [win]
        {% endfor %}

about:
  home: http://kaldi-asr.org/
  license: Apache-2.0
  license_file: COPYING
  summary: 'Kaldi is a toolkit for speech recognition written in C++.'
  description: |
    Kaldi is intended for use by speech recognition researchers. It is a framework rather than a library.
  doc_url: http://kaldi-asr.org/doc
  dev_url: https://github.com/kaldi-asr/kaldi

extra:
  recipe-maintainers:
    - mmcauliffe
    - mcernak
